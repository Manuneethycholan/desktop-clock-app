{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport SettingsButton from './SettingsButton';\nimport FocusTimer from './FocusTimer';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport { registerServiceWorker } from '../utils/serviceWorker';\nimport '../styles/App.css';\nimport '../styles/ErrorBoundary.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Load settings from localStorage\n  const {\n    settings: storedSettings,\n    isLoaded,\n    saveSettings\n  } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: DEFAULT_SETTINGS.displayMode,\n    settingsVisible: false,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat\n  });\n\n  // Settings panel state (separate from mouse activity)\n  const [settingsPanelOpen, setSettingsPanelOpen] = useState(false);\n\n  // Mouse activity detection for settings panel\n  const {\n    isActive\n  } = useMouseActivity();\n\n  // Register service worker for offline functionality\n  useEffect(() => {\n    registerServiceWorker({\n      onSuccess: registration => {\n        console.log('Service Worker registered successfully');\n      },\n      onUpdate: registration => {\n        console.log('New content available, please refresh');\n        // Could show a notification to user here\n      },\n      onOffline: () => {\n        console.log('App is now offline');\n        // Could show offline indicator\n      },\n      onOnline: () => {\n        console.log('App is back online');\n        // Could hide offline indicator\n      }\n    });\n  }, []);\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: storedSettings.displayMode,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings button visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings button click\n  const handleSettingsButtonClick = useCallback(() => {\n    setSettingsPanelOpen(true);\n  }, []);\n\n  // Handle settings panel close\n  const handleSettingsPanelClose = useCallback(() => {\n    setSettingsPanelOpen(false);\n  }, []);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback(newSettings => {\n    const updatedSettings = {\n      ...storedSettings,\n      ...newSettings\n    };\n\n    // Update stored settings\n    saveSettings(updatedSettings);\n\n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: updatedSettings.displayMode,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine what to render based on display mode\n  const shouldRenderClock = storedSettings.displayMode === 'digital-clock';\n  const shouldRenderWallpaper = storedSettings.displayMode === 'wallpaper';\n  const shouldRenderFocusTimer = storedSettings.displayMode === 'focus-mode';\n\n  // Clock is always full screen in digital-clock mode\n  const isClockFullScreen = true;\n  const clockPosition = 'center';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app app-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app app-error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-error-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Desktop Clock Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The application encountered an unexpected error and needs to be reloaded.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          children: \"Reload Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this),\n    onError: (error, errorInfo) => {\n      console.error('App Error Boundary caught error:', error, errorInfo);\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app ${getAppModeClass(storedSettings.displayMode)}`,\n      children: [shouldRenderWallpaper && /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wallpaper-error-fallback\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wallpaper-error-message\",\n            children: \"Wallpaper component failed to load\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Wallpaper, {\n          categories: storedSettings.selectedCategories,\n          rotationInterval: storedSettings.rotationInterval,\n          enabled: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), shouldRenderClock && /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clock-error-fallback\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clock-error-message\",\n            children: \"Clock component failed to load\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Clock, {\n          isFullScreen: isClockFullScreen,\n          position: clockPosition,\n          timeFormat: storedSettings.timeFormat,\n          fontColor: storedSettings.fontColor,\n          fontFamily: storedSettings.fontFamily\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), shouldRenderFocusTimer && /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"focus-timer-error-fallback\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"focus-timer-error-message\",\n            children: \"Focus Timer component failed to load\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(FocusTimer, {\n          fontColor: storedSettings.fontColor,\n          fontFamily: storedSettings.fontFamily,\n          timeFormat: storedSettings.timeFormat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), !shouldRenderFocusTimer && /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-error-fallback\",\n          children: \"Settings button unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n          isVisible: appState.settingsVisible,\n          onClick: handleSettingsButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), !shouldRenderFocusTimer && /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-error-fallback\",\n          children: \"Settings panel unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Settings, {\n          isVisible: settingsPanelOpen,\n          onSettingsChange: handleSettingsChange,\n          currentSettings: storedSettings,\n          onClose: handleSettingsPanelClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\n_s(App, \"Zf+FBifagqftOfrAHkIegMNAhgk=\", false, function () {\n  return [useLocalStorage, useMouseActivity];\n});\n_c = App;\nfunction getAppModeClass(displayMode) {\n  return `app-mode-${displayMode}`;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Clock","Wallpaper","Settings","SettingsButton","FocusTimer","ErrorBoundary","useLocalStorage","useMouseActivity","DEFAULT_SETTINGS","registerServiceWorker","jsxDEV","_jsxDEV","App","_s","settings","storedSettings","isLoaded","saveSettings","appState","setAppState","clockEnabled","wallpaperEnabled","selectedCategories","displayMode","settingsVisible","rotationInterval","timeFormat","settingsPanelOpen","setSettingsPanelOpen","isActive","onSuccess","registration","console","log","onUpdate","onOffline","onOnline","prev","handleSettingsButtonClick","handleSettingsPanelClose","handleSettingsChange","newSettings","updatedSettings","shouldRenderClock","shouldRenderWallpaper","shouldRenderFocusTimer","isClockFullScreen","clockPosition","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fallback","onClick","window","location","reload","onError","error","errorInfo","getAppModeClass","categories","enabled","isFullScreen","position","fontColor","fontFamily","isVisible","onSettingsChange","currentSettings","onClose","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport SettingsButton from './SettingsButton';\nimport FocusTimer from './FocusTimer';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\n\nimport { AppState, AppSettings, DisplayMode } from '../types';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport { registerServiceWorker } from '../utils/serviceWorker';\nimport '../styles/App.css';\nimport '../styles/ErrorBoundary.css';\n\nfunction App() {\n  // Load settings from localStorage\n  const { settings: storedSettings, isLoaded, saveSettings } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState<AppState>({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: DEFAULT_SETTINGS.displayMode,\n    settingsVisible: false,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat,\n  });\n\n  // Settings panel state (separate from mouse activity)\n  const [settingsPanelOpen, setSettingsPanelOpen] = useState(false);\n\n  // Mouse activity detection for settings panel\n  const { isActive } = useMouseActivity();\n\n  // Register service worker for offline functionality\n  useEffect(() => {\n    registerServiceWorker({\n      onSuccess: (registration) => {\n        console.log('Service Worker registered successfully');\n      },\n      onUpdate: (registration) => {\n        console.log('New content available, please refresh');\n        // Could show a notification to user here\n      },\n      onOffline: () => {\n        console.log('App is now offline');\n        // Could show offline indicator\n      },\n      onOnline: () => {\n        console.log('App is back online');\n        // Could hide offline indicator\n      }\n    });\n  }, []);\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: storedSettings.displayMode,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat,\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings button visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings button click\n  const handleSettingsButtonClick = useCallback(() => {\n    setSettingsPanelOpen(true);\n  }, []);\n\n  // Handle settings panel close\n  const handleSettingsPanelClose = useCallback(() => {\n    setSettingsPanelOpen(false);\n  }, []);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback((newSettings: Partial<AppSettings>) => {\n    const updatedSettings = { ...storedSettings, ...newSettings };\n    \n    // Update stored settings\n    saveSettings(updatedSettings);\n    \n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: updatedSettings.displayMode,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat,\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine what to render based on display mode\n  const shouldRenderClock = storedSettings.displayMode === 'digital-clock';\n  const shouldRenderWallpaper = storedSettings.displayMode === 'wallpaper';\n  const shouldRenderFocusTimer = storedSettings.displayMode === 'focus-mode';\n  \n  // Clock is always full screen in digital-clock mode\n  const isClockFullScreen = true;\n  const clockPosition = 'center';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return (\n      <div className=\"app app-loading\">\n        <div className=\"loading-message\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <div className=\"app app-error\">\n          <div className=\"app-error-content\">\n            <h1>Desktop Clock Error</h1>\n            <p>The application encountered an unexpected error and needs to be reloaded.</p>\n            <button onClick={() => window.location.reload()}>\n              Reload Application\n            </button>\n          </div>\n        </div>\n      }\n      onError={(error, errorInfo) => {\n        console.error('App Error Boundary caught error:', error, errorInfo);\n      }}\n    >\n      <div className={`app ${getAppModeClass(storedSettings.displayMode)}`}>\n        {/* Wallpaper component - renders behind everything */}\n        {shouldRenderWallpaper && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"wallpaper-error-fallback\">\n                <div className=\"wallpaper-error-message\">\n                  Wallpaper component failed to load\n                </div>\n              </div>\n            }\n          >\n            <Wallpaper\n              categories={storedSettings.selectedCategories}\n              rotationInterval={storedSettings.rotationInterval}\n              enabled={true}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Clock component - positioned based on display mode */}\n        {shouldRenderClock && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"clock-error-fallback\">\n                <div className=\"clock-error-message\">\n                  Clock component failed to load\n                </div>\n              </div>\n            }\n          >\n            <Clock\n              isFullScreen={isClockFullScreen}\n              position={clockPosition}\n              timeFormat={storedSettings.timeFormat}\n              fontColor={storedSettings.fontColor}\n              fontFamily={storedSettings.fontFamily}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Focus Timer component - full screen mode */}\n        {shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"focus-timer-error-fallback\">\n                <div className=\"focus-timer-error-message\">\n                  Focus Timer component failed to load\n                </div>\n              </div>\n            }\n          >\n            <FocusTimer\n              fontColor={storedSettings.fontColor}\n              fontFamily={storedSettings.fontFamily}\n              timeFormat={storedSettings.timeFormat}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Settings button - shows on mouse activity (not in focus mode) */}\n        {!shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"settings-error-fallback\">\n                Settings button unavailable\n              </div>\n            }\n          >\n            <SettingsButton\n              isVisible={appState.settingsVisible}\n              onClick={handleSettingsButtonClick}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Settings panel - shows when button is clicked (not in focus mode) */}\n        {!shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"settings-error-fallback\">\n                Settings panel unavailable\n              </div>\n            }\n          >\n            <Settings\n              isVisible={settingsPanelOpen}\n              onSettingsChange={handleSettingsChange}\n              currentSettings={storedSettings}\n              onClose={handleSettingsPanelClose}\n            />\n          </ErrorBoundary>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\nfunction getAppModeClass(displayMode: DisplayMode): string {\n  return `app-mode-${displayMode}`;\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,gBAAgB,QAAQ,2BAA2B;AAG5D,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,qBAAqB,QAAQ,wBAAwB;AAC9D,OAAO,mBAAmB;AAC1B,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM;IAAEC,QAAQ,EAAEC,cAAc;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAGX,eAAe,CAAC,CAAC;;EAE9E;EACA,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAW;IACjDuB,YAAY,EAAEZ,gBAAgB,CAACY,YAAY;IAC3CC,gBAAgB,EAAEb,gBAAgB,CAACa,gBAAgB;IACnDC,kBAAkB,EAAEd,gBAAgB,CAACc,kBAAkB;IACvDC,WAAW,EAAEf,gBAAgB,CAACe,WAAW;IACzCC,eAAe,EAAE,KAAK;IACtBC,gBAAgB,EAAEjB,gBAAgB,CAACiB,gBAAgB;IACnDC,UAAU,EAAElB,gBAAgB,CAACkB;EAC/B,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;;EAEjE;EACA,MAAM;IAAEgC;EAAS,CAAC,GAAGtB,gBAAgB,CAAC,CAAC;;EAEvC;EACAR,SAAS,CAAC,MAAM;IACdU,qBAAqB,CAAC;MACpBqB,SAAS,EAAGC,YAAY,IAAK;QAC3BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACvD,CAAC;MACDC,QAAQ,EAAGH,YAAY,IAAK;QAC1BC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD;MACF,CAAC;MACDE,SAAS,EAAEA,CAAA,KAAM;QACfH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC;MACF,CAAC;MACDG,QAAQ,EAAEA,CAAA,KAAM;QACdJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlC,SAAS,CAAC,MAAM;IACd,IAAIiB,QAAQ,EAAE;MACZG,WAAW,CAACkB,IAAI,KAAK;QACnB,GAAGA,IAAI;QACPjB,YAAY,EAAEL,cAAc,CAACK,YAAY;QACzCC,gBAAgB,EAAEN,cAAc,CAACM,gBAAgB;QACjDC,kBAAkB,EAAEP,cAAc,CAACO,kBAAkB;QACrDC,WAAW,EAAER,cAAc,CAACQ,WAAW;QACvCE,gBAAgB,EAAEV,cAAc,CAACU,gBAAgB;QACjDC,UAAU,EAAEX,cAAc,CAACW;MAC7B,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACV,QAAQ,EAAED,cAAc,CAAC,CAAC;;EAE9B;EACAhB,SAAS,CAAC,MAAM;IACdoB,WAAW,CAACkB,IAAI,KAAK;MACnB,GAAGA,IAAI;MACPb,eAAe,EAAEK;IACnB,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMS,yBAAyB,GAAGxC,WAAW,CAAC,MAAM;IAClD8B,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMW,wBAAwB,GAAGzC,WAAW,CAAC,MAAM;IACjD8B,oBAAoB,CAAC,KAAK,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,oBAAoB,GAAG1C,WAAW,CAAE2C,WAAiC,IAAK;IAC9E,MAAMC,eAAe,GAAG;MAAE,GAAG3B,cAAc;MAAE,GAAG0B;IAAY,CAAC;;IAE7D;IACAxB,YAAY,CAACyB,eAAe,CAAC;;IAE7B;IACAvB,WAAW,CAACkB,IAAI,KAAK;MACnB,GAAGA,IAAI;MACPjB,YAAY,EAAEsB,eAAe,CAACtB,YAAY;MAC1CC,gBAAgB,EAAEqB,eAAe,CAACrB,gBAAgB;MAClDC,kBAAkB,EAAEoB,eAAe,CAACpB,kBAAkB;MACtDC,WAAW,EAAEmB,eAAe,CAACnB,WAAW;MACxCE,gBAAgB,EAAEiB,eAAe,CAACjB,gBAAgB;MAClDC,UAAU,EAAEgB,eAAe,CAAChB;IAC9B,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACX,cAAc,EAAEE,YAAY,CAAC,CAAC;;EAElC;EACA,MAAM0B,iBAAiB,GAAG5B,cAAc,CAACQ,WAAW,KAAK,eAAe;EACxE,MAAMqB,qBAAqB,GAAG7B,cAAc,CAACQ,WAAW,KAAK,WAAW;EACxE,MAAMsB,sBAAsB,GAAG9B,cAAc,CAACQ,WAAW,KAAK,YAAY;;EAE1E;EACA,MAAMuB,iBAAiB,GAAG,IAAI;EAC9B,MAAMC,aAAa,GAAG,QAAQ;;EAE9B;EACA,IAAI,CAAC/B,QAAQ,EAAE;IACb,oBACEL,OAAA;MAAKqC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BtC,OAAA;QAAKqC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAEV;EAEA,oBACE1C,OAAA,CAACN,aAAa;IACZiD,QAAQ,eACN3C,OAAA;MAAKqC,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BtC,OAAA;QAAKqC,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCtC,OAAA;UAAAsC,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5B1C,OAAA;UAAAsC,QAAA,EAAG;QAAyE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAChF1C,OAAA;UAAQ4C,OAAO,EAAEA,CAAA,KAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE;UAAAT,QAAA,EAAC;QAEjD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;IACDM,OAAO,EAAEA,CAACC,KAAK,EAAEC,SAAS,KAAK;MAC7B7B,OAAO,CAAC4B,KAAK,CAAC,kCAAkC,EAAEA,KAAK,EAAEC,SAAS,CAAC;IACrE,CAAE;IAAAZ,QAAA,eAEFtC,OAAA;MAAKqC,SAAS,EAAE,OAAOc,eAAe,CAAC/C,cAAc,CAACQ,WAAW,CAAC,EAAG;MAAA0B,QAAA,GAElEL,qBAAqB,iBACpBjC,OAAA,CAACN,aAAa;QACZiD,QAAQ,eACN3C,OAAA;UAAKqC,SAAS,EAAC,0BAA0B;UAAAC,QAAA,eACvCtC,OAAA;YAAKqC,SAAS,EAAC,yBAAyB;YAAAC,QAAA,EAAC;UAEzC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;QAAAJ,QAAA,eAEDtC,OAAA,CAACV,SAAS;UACR8D,UAAU,EAAEhD,cAAc,CAACO,kBAAmB;UAC9CG,gBAAgB,EAAEV,cAAc,CAACU,gBAAiB;UAClDuC,OAAO,EAAE;QAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAChB,EAGAV,iBAAiB,iBAChBhC,OAAA,CAACN,aAAa;QACZiD,QAAQ,eACN3C,OAAA;UAAKqC,SAAS,EAAC,sBAAsB;UAAAC,QAAA,eACnCtC,OAAA;YAAKqC,SAAS,EAAC,qBAAqB;YAAAC,QAAA,EAAC;UAErC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;QAAAJ,QAAA,eAEDtC,OAAA,CAACX,KAAK;UACJiE,YAAY,EAAEnB,iBAAkB;UAChCoB,QAAQ,EAAEnB,aAAc;UACxBrB,UAAU,EAAEX,cAAc,CAACW,UAAW;UACtCyC,SAAS,EAAEpD,cAAc,CAACoD,SAAU;UACpCC,UAAU,EAAErD,cAAc,CAACqD;QAAW;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAChB,EAGAR,sBAAsB,iBACrBlC,OAAA,CAACN,aAAa;QACZiD,QAAQ,eACN3C,OAAA;UAAKqC,SAAS,EAAC,4BAA4B;UAAAC,QAAA,eACzCtC,OAAA;YAAKqC,SAAS,EAAC,2BAA2B;YAAAC,QAAA,EAAC;UAE3C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;QAAAJ,QAAA,eAEDtC,OAAA,CAACP,UAAU;UACT+D,SAAS,EAAEpD,cAAc,CAACoD,SAAU;UACpCC,UAAU,EAAErD,cAAc,CAACqD,UAAW;UACtC1C,UAAU,EAAEX,cAAc,CAACW;QAAW;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAChB,EAGA,CAACR,sBAAsB,iBACtBlC,OAAA,CAACN,aAAa;QACZiD,QAAQ,eACN3C,OAAA;UAAKqC,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EAAC;QAEzC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN;QAAAJ,QAAA,eAEDtC,OAAA,CAACR,cAAc;UACbkE,SAAS,EAAEnD,QAAQ,CAACM,eAAgB;UACpC+B,OAAO,EAAEjB;QAA0B;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAChB,EAGA,CAACR,sBAAsB,iBACtBlC,OAAA,CAACN,aAAa;QACZiD,QAAQ,eACN3C,OAAA;UAAKqC,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EAAC;QAEzC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN;QAAAJ,QAAA,eAEDtC,OAAA,CAACT,QAAQ;UACPmE,SAAS,EAAE1C,iBAAkB;UAC7B2C,gBAAgB,EAAE9B,oBAAqB;UACvC+B,eAAe,EAAExD,cAAe;UAChCyD,OAAO,EAAEjC;QAAyB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAChB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEpB;;AAEA;AACA;AACA;AAFAxC,EAAA,CAnOSD,GAAG;EAAA,QAEmDN,eAAe,EAiBvDC,gBAAgB;AAAA;AAAAkE,EAAA,GAnB9B7D,GAAG;AAsOZ,SAASkD,eAAeA,CAACvC,WAAwB,EAAU;EACzD,OAAO,YAAYA,WAAW,EAAE;AAClC;AAEA,eAAeX,GAAG;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}