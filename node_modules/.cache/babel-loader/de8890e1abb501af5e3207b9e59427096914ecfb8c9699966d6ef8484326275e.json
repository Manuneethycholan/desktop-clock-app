{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Wallpaper.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useWallpaperRotation } from '../hooks/useWallpaperRotation';\nimport { CSS_CLASSES } from '../utils/constants';\nimport '../styles/Wallpaper.css';\n\n/**\n * Wallpaper component that displays rotating background images\n * with CSS-based scaling (small/medium/large)\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallpaper = ({\n  categories,\n  rotationInterval,\n  wallpaperSize,\n  enabled\n}) => {\n  _s();\n  const {\n    currentImage,\n    isLoading,\n    error,\n    scaleValue,\n    hasImages\n  } = useWallpaperRotation(categories, rotationInterval, wallpaperSize, enabled);\n\n  // Don't render anything if wallpapers are disabled\n  if (!enabled) {\n    return null;\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-loading`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallpaper-loading-text\",\n        children: \"Loading wallpapers...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-error`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallpaper-error-text\",\n        children: \"Failed to load wallpapers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show empty state when no images are available\n  if (!hasImages || !currentImage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-empty`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render wallpaper with current image\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: CSS_CLASSES.WALLPAPER_CONTAINER,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${CSS_CLASSES.WALLPAPER_IMAGE} wallpaper-size-${wallpaperSize}`,\n      style: {\n        backgroundImage: `url(${currentImage.src})`,\n        transform: `scale(${scaleValue})`\n      },\n      \"aria-label\": `Wallpaper from ${currentImage.category} category`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Wallpaper, \"jTod6V0Zxompk/izdQay0gR8HBU=\", false, function () {\n  return [useWallpaperRotation];\n});\n_c = Wallpaper;\nexport default Wallpaper;\nvar _c;\n$RefreshReg$(_c, \"Wallpaper\");","map":{"version":3,"names":["React","useWallpaperRotation","CSS_CLASSES","jsxDEV","_jsxDEV","Wallpaper","categories","rotationInterval","wallpaperSize","enabled","_s","currentImage","isLoading","error","scaleValue","hasImages","className","WALLPAPER_CONTAINER","children","fileName","_jsxFileName","lineNumber","columnNumber","WALLPAPER_IMAGE","style","backgroundImage","src","transform","category","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Wallpaper.tsx"],"sourcesContent":["import React from 'react';\nimport { WallpaperProps } from '../types';\nimport { useWallpaperRotation } from '../hooks/useWallpaperRotation';\nimport { CSS_CLASSES } from '../utils/constants';\nimport '../styles/Wallpaper.css';\n\n/**\n * Wallpaper component that displays rotating background images\n * with CSS-based scaling (small/medium/large)\n */\nconst Wallpaper: React.FC<WallpaperProps> = ({\n  categories,\n  rotationInterval,\n  wallpaperSize,\n  enabled\n}) => {\n  const {\n    currentImage,\n    isLoading,\n    error,\n    scaleValue,\n    hasImages\n  } = useWallpaperRotation(categories, rotationInterval, wallpaperSize, enabled);\n\n  // Don't render anything if wallpapers are disabled\n  if (!enabled) {\n    return null;\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-loading`}>\n        <div className=\"wallpaper-loading-text\">Loading wallpapers...</div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-error`}>\n        <div className=\"wallpaper-error-text\">Failed to load wallpapers</div>\n      </div>\n    );\n  }\n\n  // Show empty state when no images are available\n  if (!hasImages || !currentImage) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-empty`}>\n        {/* Black background when no wallpapers are selected */}\n      </div>\n    );\n  }\n\n  // Render wallpaper with current image\n  return (\n    <div className={CSS_CLASSES.WALLPAPER_CONTAINER}>\n      <div\n        className={`${CSS_CLASSES.WALLPAPER_IMAGE} wallpaper-size-${wallpaperSize}`}\n        style={{\n          backgroundImage: `url(${currentImage.src})`,\n          transform: `scale(${scaleValue})`,\n        }}\n        aria-label={`Wallpaper from ${currentImage.category} category`}\n      />\n    </div>\n  );\n};\n\nexport default Wallpaper;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,oBAAoB,QAAQ,+BAA+B;AACpE,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAO,yBAAyB;;AAEhC;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,SAAmC,GAAGA,CAAC;EAC3CC,UAAU;EACVC,gBAAgB;EAChBC,aAAa;EACbC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IACJC,YAAY;IACZC,SAAS;IACTC,KAAK;IACLC,UAAU;IACVC;EACF,CAAC,GAAGd,oBAAoB,CAACK,UAAU,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,OAAO,CAAC;;EAE9E;EACA,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;;EAEA;EACA,IAAIG,SAAS,EAAE;IACb,oBACER,OAAA;MAAKY,SAAS,EAAE,GAAGd,WAAW,CAACe,mBAAmB,oBAAqB;MAAAC,QAAA,eACrEd,OAAA;QAAKY,SAAS,EAAC,wBAAwB;QAAAE,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC;EAEV;;EAEA;EACA,IAAIT,KAAK,EAAE;IACT,oBACET,OAAA;MAAKY,SAAS,EAAE,GAAGd,WAAW,CAACe,mBAAmB,kBAAmB;MAAAC,QAAA,eACnEd,OAAA;QAAKY,SAAS,EAAC,sBAAsB;QAAAE,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC;EAEV;;EAEA;EACA,IAAI,CAACP,SAAS,IAAI,CAACJ,YAAY,EAAE;IAC/B,oBACEP,OAAA;MAAKY,SAAS,EAAE,GAAGd,WAAW,CAACe,mBAAmB;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEhE,CAAC;EAEV;;EAEA;EACA,oBACElB,OAAA;IAAKY,SAAS,EAAEd,WAAW,CAACe,mBAAoB;IAAAC,QAAA,eAC9Cd,OAAA;MACEY,SAAS,EAAE,GAAGd,WAAW,CAACqB,eAAe,mBAAmBf,aAAa,EAAG;MAC5EgB,KAAK,EAAE;QACLC,eAAe,EAAE,OAAOd,YAAY,CAACe,GAAG,GAAG;QAC3CC,SAAS,EAAE,SAASb,UAAU;MAChC,CAAE;MACF,cAAY,kBAAkBH,YAAY,CAACiB,QAAQ;IAAY;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACZ,EAAA,CA3DIL,SAAmC;EAAA,QAYnCJ,oBAAoB;AAAA;AAAA4B,EAAA,GAZpBxB,SAAmC;AA6DzC,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}