{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Settings.tsx\";\nimport React from 'react';\nimport { WALLPAPER_CATEGORIES, ROTATION_INTERVALS, CSS_CLASSES } from '../utils/constants';\nimport { getCategoryDisplayName } from '../utils/imageLoader';\nimport '../styles/Settings.css';\n\n/**\n * Settings component that provides user interface for configuration options\n * Appears on mouse movement and auto-hides after inactivity\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Settings = ({\n  isVisible,\n  onSettingsChange,\n  currentSettings\n}) => {\n  // Handle clock enable/disable toggle\n  const handleClockToggle = enabled => {\n    onSettingsChange({\n      clockEnabled: enabled\n    });\n  };\n\n  // Handle wallpaper enable/disable toggle\n  const handleWallpaperToggle = enabled => {\n    onSettingsChange({\n      wallpaperEnabled: enabled\n    });\n  };\n\n  // Handle category selection with edge case handling\n  const handleCategoryToggle = (category, selected) => {\n    let updatedCategories;\n    if (selected) {\n      // Add category if not already present\n      updatedCategories = currentSettings.selectedCategories.includes(category) ? currentSettings.selectedCategories : [...currentSettings.selectedCategories, category];\n    } else {\n      // Remove category, but ensure at least one category remains selected\n      // or allow empty selection (will show black background)\n      updatedCategories = currentSettings.selectedCategories.filter(cat => cat !== category);\n    }\n    onSettingsChange({\n      selectedCategories: updatedCategories\n    });\n  };\n\n  // Check if no categories are selected\n  const hasNoCategories = currentSettings.selectedCategories.length === 0;\n\n  // Handle wallpaper size change\n  const handleWallpaperSizeChange = size => {\n    onSettingsChange({\n      wallpaperSize: size\n    });\n  };\n\n  // Handle rotation interval change\n  const handleRotationIntervalChange = interval => {\n    onSettingsChange({\n      rotationInterval: interval\n    });\n  };\n\n  // Handle time format change\n  const handleTimeFormatChange = format => {\n    onSettingsChange({\n      timeFormat: format\n    });\n  };\n  if (!isVisible) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${CSS_CLASSES.SETTINGS_PANEL} ${CSS_CLASSES.SETTINGS_VISIBLE}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"settings-title\",\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-section-title\",\n          children: \"Display Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-toggle-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: currentSettings.clockEnabled,\n              onChange: e => handleClockToggle(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-toggle-label\",\n              children: \"Show Clock\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: currentSettings.wallpaperEnabled,\n              onChange: e => handleWallpaperToggle(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-toggle-label\",\n              children: \"Show Wallpapers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-section-title\",\n          children: \"Time Format\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-radio-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-radio\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"timeFormat\",\n              value: \"12h\",\n              checked: currentSettings.timeFormat === '12h',\n              onChange: () => handleTimeFormatChange('12h')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-radio-label\",\n              children: \"12 Hour\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-radio\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"timeFormat\",\n              value: \"24h\",\n              checked: currentSettings.timeFormat === '24h',\n              onChange: () => handleTimeFormatChange('24h')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-radio-label\",\n              children: \"24 Hour\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), currentSettings.wallpaperEnabled && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-section-title\",\n            children: \"Wallpaper Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-radio-group\",\n            children: ['small', 'medium', 'large'].map(size => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"settings-radio\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"wallpaperSize\",\n                value: size,\n                checked: currentSettings.wallpaperSize === size,\n                onChange: () => handleWallpaperSizeChange(size)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"settings-radio-label\",\n                children: size.charAt(0).toUpperCase() + size.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this)]\n            }, size, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-section-title\",\n            children: \"Rotation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"settings-select\",\n            value: currentSettings.rotationInterval,\n            onChange: e => handleRotationIntervalChange(Number(e.target.value)),\n            children: ROTATION_INTERVALS.map(interval => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: interval.value,\n              children: interval.label\n            }, interval.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"settings-section-title\",\n            children: \"Wallpaper Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-category-grid\",\n            children: WALLPAPER_CATEGORIES.map(category => {\n              const isSelected = currentSettings.selectedCategories.includes(category.name);\n              const categoryClass = `settings-category ${isSelected ? 'category-selected' : 'category-unselected'}`;\n              return /*#__PURE__*/_jsxDEV(\"label\", {\n                className: categoryClass,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: isSelected,\n                  onChange: e => handleCategoryToggle(category.name, e.target.checked),\n                  \"aria-label\": `Toggle ${getCategoryDisplayName(category.name)} wallpapers`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"settings-category-label\",\n                  children: getCategoryDisplayName(category.name)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 23\n                }, this)]\n              }, category.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), hasNoCategories && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-category-warning\",\n            children: \"No categories selected. A black background will be displayed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","WALLPAPER_CATEGORIES","ROTATION_INTERVALS","CSS_CLASSES","getCategoryDisplayName","jsxDEV","_jsxDEV","Fragment","_Fragment","Settings","isVisible","onSettingsChange","currentSettings","handleClockToggle","enabled","clockEnabled","handleWallpaperToggle","wallpaperEnabled","handleCategoryToggle","category","selected","updatedCategories","selectedCategories","includes","filter","cat","hasNoCategories","length","handleWallpaperSizeChange","size","wallpaperSize","handleRotationIntervalChange","interval","rotationInterval","handleTimeFormatChange","format","timeFormat","className","SETTINGS_PANEL","SETTINGS_VISIBLE","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","name","value","map","charAt","toUpperCase","slice","Number","label","isSelected","categoryClass","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Settings.tsx"],"sourcesContent":["import React from 'react';\nimport { SettingsProps, WallpaperSize, TimeFormat } from '../types';\nimport { WALLPAPER_CATEGORIES, ROTATION_INTERVALS, CSS_CLASSES } from '../utils/constants';\nimport { getCategoryDisplayName } from '../utils/imageLoader';\nimport '../styles/Settings.css';\n\n/**\n * Settings component that provides user interface for configuration options\n * Appears on mouse movement and auto-hides after inactivity\n */\nconst Settings: React.FC<SettingsProps> = ({\n  isVisible,\n  onSettingsChange,\n  currentSettings\n}) => {\n  // Handle clock enable/disable toggle\n  const handleClockToggle = (enabled: boolean) => {\n    onSettingsChange({ clockEnabled: enabled });\n  };\n\n  // Handle wallpaper enable/disable toggle\n  const handleWallpaperToggle = (enabled: boolean) => {\n    onSettingsChange({ wallpaperEnabled: enabled });\n  };\n\n  // Handle category selection with edge case handling\n  const handleCategoryToggle = (category: string, selected: boolean) => {\n    let updatedCategories: string[];\n    \n    if (selected) {\n      // Add category if not already present\n      updatedCategories = currentSettings.selectedCategories.includes(category)\n        ? currentSettings.selectedCategories\n        : [...currentSettings.selectedCategories, category];\n    } else {\n      // Remove category, but ensure at least one category remains selected\n      // or allow empty selection (will show black background)\n      updatedCategories = currentSettings.selectedCategories.filter(cat => cat !== category);\n    }\n    \n    onSettingsChange({ selectedCategories: updatedCategories });\n  };\n\n  // Check if no categories are selected\n  const hasNoCategories = currentSettings.selectedCategories.length === 0;\n\n  // Handle wallpaper size change\n  const handleWallpaperSizeChange = (size: WallpaperSize) => {\n    onSettingsChange({ wallpaperSize: size });\n  };\n\n  // Handle rotation interval change\n  const handleRotationIntervalChange = (interval: number) => {\n    onSettingsChange({ rotationInterval: interval });\n  };\n\n  // Handle time format change\n  const handleTimeFormatChange = (format: TimeFormat) => {\n    onSettingsChange({ timeFormat: format });\n  };\n\n\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div className={`${CSS_CLASSES.SETTINGS_PANEL} ${CSS_CLASSES.SETTINGS_VISIBLE}`}>\n      <div className=\"settings-content\">\n        <h2 className=\"settings-title\">Settings</h2>\n        \n        {/* Display Mode Controls */}\n        <div className=\"settings-section\">\n          <h3 className=\"settings-section-title\">Display Mode</h3>\n          \n          <div className=\"settings-toggle-group\">\n            <label className=\"settings-toggle\">\n              <input\n                type=\"checkbox\"\n                checked={currentSettings.clockEnabled}\n                onChange={(e) => handleClockToggle(e.target.checked)}\n              />\n              <span className=\"settings-toggle-label\">Show Clock</span>\n            </label>\n            \n            <label className=\"settings-toggle\">\n              <input\n                type=\"checkbox\"\n                checked={currentSettings.wallpaperEnabled}\n                onChange={(e) => handleWallpaperToggle(e.target.checked)}\n              />\n              <span className=\"settings-toggle-label\">Show Wallpapers</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Time Format */}\n        <div className=\"settings-section\">\n          <h3 className=\"settings-section-title\">Time Format</h3>\n          \n          <div className=\"settings-radio-group\">\n            <label className=\"settings-radio\">\n              <input\n                type=\"radio\"\n                name=\"timeFormat\"\n                value=\"12h\"\n                checked={currentSettings.timeFormat === '12h'}\n                onChange={() => handleTimeFormatChange('12h')}\n              />\n              <span className=\"settings-radio-label\">12 Hour</span>\n            </label>\n            \n            <label className=\"settings-radio\">\n              <input\n                type=\"radio\"\n                name=\"timeFormat\"\n                value=\"24h\"\n                checked={currentSettings.timeFormat === '24h'}\n                onChange={() => handleTimeFormatChange('24h')}\n              />\n              <span className=\"settings-radio-label\">24 Hour</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Wallpaper Settings */}\n        {currentSettings.wallpaperEnabled && (\n          <>\n            {/* Wallpaper Size */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-section-title\">Wallpaper Size</h3>\n              \n              <div className=\"settings-radio-group\">\n                {(['small', 'medium', 'large'] as WallpaperSize[]).map(size => (\n                  <label key={size} className=\"settings-radio\">\n                    <input\n                      type=\"radio\"\n                      name=\"wallpaperSize\"\n                      value={size}\n                      checked={currentSettings.wallpaperSize === size}\n                      onChange={() => handleWallpaperSizeChange(size)}\n                    />\n                    <span className=\"settings-radio-label\">\n                      {size.charAt(0).toUpperCase() + size.slice(1)}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            {/* Rotation Interval */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-section-title\">Rotation Speed</h3>\n              \n              <select\n                className=\"settings-select\"\n                value={currentSettings.rotationInterval}\n                onChange={(e) => handleRotationIntervalChange(Number(e.target.value))}\n              >\n                {ROTATION_INTERVALS.map(interval => (\n                  <option key={interval.value} value={interval.value}>\n                    {interval.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Category Selection */}\n            <div className=\"settings-section\">\n              <h3 className=\"settings-section-title\">Wallpaper Categories</h3>\n              \n              <div className=\"settings-category-grid\">\n                {WALLPAPER_CATEGORIES.map(category => {\n                  const isSelected = currentSettings.selectedCategories.includes(category.name);\n                  const categoryClass = `settings-category ${\n                    isSelected ? 'category-selected' : 'category-unselected'\n                  }`;\n                  \n                  return (\n                    <label key={category.name} className={categoryClass}>\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={(e) => handleCategoryToggle(category.name, e.target.checked)}\n                        aria-label={`Toggle ${getCategoryDisplayName(category.name)} wallpapers`}\n                      />\n                      <span className=\"settings-category-label\">\n                        {getCategoryDisplayName(category.name)}\n                      </span>\n                    </label>\n                  );\n                })}\n              </div>\n              \n              {/* Warning when no categories are selected */}\n              {hasNoCategories && (\n                <div className=\"settings-category-warning\">\n                  No categories selected. A black background will be displayed.\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}