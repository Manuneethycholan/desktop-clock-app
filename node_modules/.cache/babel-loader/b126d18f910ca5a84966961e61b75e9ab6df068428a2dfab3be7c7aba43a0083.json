{"ast":null,"code":"import React from'react';import{useWallpaperRotation}from'../hooks/useWallpaperRotation';import{CSS_CLASSES}from'../utils/constants';import'../styles/Wallpaper.css';/**\n * Wallpaper component that displays rotating background images\n * with CSS-based scaling (small/medium/large)\n */import{jsx as _jsx}from\"react/jsx-runtime\";const Wallpaper=_ref=>{let{categories,rotationInterval,wallpaperSize,enabled}=_ref;const{currentImage,isLoading,error,scaleValue,hasImages}=useWallpaperRotation(categories,rotationInterval,wallpaperSize,enabled);// Don't render anything if wallpapers are disabled\nif(!enabled){return null;}// Show loading state\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(CSS_CLASSES.WALLPAPER_CONTAINER,\" wallpaper-loading\"),children:/*#__PURE__*/_jsx(\"div\",{className:\"wallpaper-loading-text\",children:\"Loading wallpapers...\"})});}// Show error state\nif(error){return/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(CSS_CLASSES.WALLPAPER_CONTAINER,\" wallpaper-error\"),children:/*#__PURE__*/_jsx(\"div\",{className:\"wallpaper-error-text\",children:\"Failed to load wallpapers\"})});}// Show empty state when no images are available\nif(!hasImages||!currentImage){return/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(CSS_CLASSES.WALLPAPER_CONTAINER,\" wallpaper-empty\")});}// Render wallpaper with current image\nreturn/*#__PURE__*/_jsx(\"div\",{className:CSS_CLASSES.WALLPAPER_CONTAINER,children:/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(CSS_CLASSES.WALLPAPER_IMAGE,\" wallpaper-size-\").concat(wallpaperSize),style:{backgroundImage:\"url(\".concat(currentImage.src,\")\"),transform:\"scale(\".concat(scaleValue,\")\")},\"aria-label\":\"Wallpaper from \".concat(currentImage.category,\" category\")})});};export default Wallpaper;","map":{"version":3,"names":["React","useWallpaperRotation","CSS_CLASSES","jsx","_jsx","Wallpaper","_ref","categories","rotationInterval","wallpaperSize","enabled","currentImage","isLoading","error","scaleValue","hasImages","className","concat","WALLPAPER_CONTAINER","children","WALLPAPER_IMAGE","style","backgroundImage","src","transform","category"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Wallpaper.tsx"],"sourcesContent":["import React from 'react';\nimport { WallpaperProps } from '../types';\nimport { useWallpaperRotation } from '../hooks/useWallpaperRotation';\nimport { CSS_CLASSES } from '../utils/constants';\nimport '../styles/Wallpaper.css';\n\n/**\n * Wallpaper component that displays rotating background images\n * with CSS-based scaling (small/medium/large)\n */\nconst Wallpaper: React.FC<WallpaperProps> = ({\n  categories,\n  rotationInterval,\n  wallpaperSize,\n  enabled\n}) => {\n  const {\n    currentImage,\n    isLoading,\n    error,\n    scaleValue,\n    hasImages\n  } = useWallpaperRotation(categories, rotationInterval, wallpaperSize, enabled);\n\n  // Don't render anything if wallpapers are disabled\n  if (!enabled) {\n    return null;\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-loading`}>\n        <div className=\"wallpaper-loading-text\">Loading wallpapers...</div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-error`}>\n        <div className=\"wallpaper-error-text\">Failed to load wallpapers</div>\n      </div>\n    );\n  }\n\n  // Show empty state when no images are available\n  if (!hasImages || !currentImage) {\n    return (\n      <div className={`${CSS_CLASSES.WALLPAPER_CONTAINER} wallpaper-empty`}>\n        {/* Black background when no wallpapers are selected */}\n      </div>\n    );\n  }\n\n  // Render wallpaper with current image\n  return (\n    <div className={CSS_CLASSES.WALLPAPER_CONTAINER}>\n      <div\n        className={`${CSS_CLASSES.WALLPAPER_IMAGE} wallpaper-size-${wallpaperSize}`}\n        style={{\n          backgroundImage: `url(${currentImage.src})`,\n          transform: `scale(${scaleValue})`,\n        }}\n        aria-label={`Wallpaper from ${currentImage.category} category`}\n      />\n    </div>\n  );\n};\n\nexport default Wallpaper;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,oBAAoB,KAAQ,+BAA+B,CACpE,OAASC,WAAW,KAAQ,oBAAoB,CAChD,MAAO,yBAAyB,CAEhC;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,yBAIA,KAAM,CAAAC,SAAmC,CAAGC,IAAA,EAKtC,IALuC,CAC3CC,UAAU,CACVC,gBAAgB,CAChBC,aAAa,CACbC,OACF,CAAC,CAAAJ,IAAA,CACC,KAAM,CACJK,YAAY,CACZC,SAAS,CACTC,KAAK,CACLC,UAAU,CACVC,SACF,CAAC,CAAGd,oBAAoB,CAACM,UAAU,CAAEC,gBAAgB,CAAEC,aAAa,CAAEC,OAAO,CAAC,CAE9E;AACA,GAAI,CAACA,OAAO,CAAE,CACZ,MAAO,KAAI,CACb,CAEA;AACA,GAAIE,SAAS,CAAE,CACb,mBACER,IAAA,QAAKY,SAAS,IAAAC,MAAA,CAAKf,WAAW,CAACgB,mBAAmB,sBAAqB,CAAAC,QAAA,cACrEf,IAAA,QAAKY,SAAS,CAAC,wBAAwB,CAAAG,QAAA,CAAC,uBAAqB,CAAK,CAAC,CAChE,CAAC,CAEV,CAEA;AACA,GAAIN,KAAK,CAAE,CACT,mBACET,IAAA,QAAKY,SAAS,IAAAC,MAAA,CAAKf,WAAW,CAACgB,mBAAmB,oBAAmB,CAAAC,QAAA,cACnEf,IAAA,QAAKY,SAAS,CAAC,sBAAsB,CAAAG,QAAA,CAAC,2BAAyB,CAAK,CAAC,CAClE,CAAC,CAEV,CAEA;AACA,GAAI,CAACJ,SAAS,EAAI,CAACJ,YAAY,CAAE,CAC/B,mBACEP,IAAA,QAAKY,SAAS,IAAAC,MAAA,CAAKf,WAAW,CAACgB,mBAAmB,oBAAmB,CAEhE,CAAC,CAEV,CAEA;AACA,mBACEd,IAAA,QAAKY,SAAS,CAAEd,WAAW,CAACgB,mBAAoB,CAAAC,QAAA,cAC9Cf,IAAA,QACEY,SAAS,IAAAC,MAAA,CAAKf,WAAW,CAACkB,eAAe,qBAAAH,MAAA,CAAmBR,aAAa,CAAG,CAC5EY,KAAK,CAAE,CACLC,eAAe,QAAAL,MAAA,CAASN,YAAY,CAACY,GAAG,KAAG,CAC3CC,SAAS,UAAAP,MAAA,CAAWH,UAAU,KAChC,CAAE,CACF,+BAAAG,MAAA,CAA8BN,YAAY,CAACc,QAAQ,aAAY,CAChE,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAApB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}