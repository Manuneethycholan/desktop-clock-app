{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{formatTimeForDisplay,getCurrentISTTime}from'../utils/timeUtils';import{TIME_UPDATE_INTERVAL,CSS_CLASSES}from'../utils/constants';import'../styles/Clock.css';/**\n * Clock component that displays IST time in the specified two-line format\n * Line 1: \"HH:MM\" on left, \"AM/PM SS\" on right\n * Line 2: \"Day - Month Date\"\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Clock=_ref=>{let{isFullScreen,position,timeFormat}=_ref;const[currentTime,setCurrentTime]=useState(getCurrentISTTime());const[clockDisplay,setClockDisplay]=useState(formatTimeForDisplay(getCurrentISTTime(),timeFormat));// Update time display\nconst updateTime=useCallback(()=>{const newTime=getCurrentISTTime();const newDisplay=formatTimeForDisplay(newTime,timeFormat);setCurrentTime(newTime);setClockDisplay(newDisplay);},[timeFormat]);// Set up time update interval\nuseEffect(()=>{const interval=setInterval(updateTime,TIME_UPDATE_INTERVAL);// Update immediately on mount\nupdateTime();return()=>clearInterval(interval);},[updateTime]);// Update display when time format changes\nuseEffect(()=>{const newDisplay=formatTimeForDisplay(currentTime,timeFormat);setClockDisplay(newDisplay);},[timeFormat,currentTime]);// Determine CSS classes based on props\nconst getClockClasses=()=>{const baseClass=CSS_CLASSES.CLOCK_CONTAINER;const positionClass=isFullScreen?CSS_CLASSES.CLOCK_FULLSCREEN:CSS_CLASSES.CLOCK_BOTTOM_LEFT;return\"\".concat(baseClass,\" \").concat(positionClass);};return/*#__PURE__*/_jsxs(\"div\",{className:getClockClasses(),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"clock-time-line\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"clock-time-left\",children:clockDisplay.timeLeft}),/*#__PURE__*/_jsx(\"span\",{className:\"clock-time-right\",children:clockDisplay.timeRight})]}),/*#__PURE__*/_jsx(\"div\",{className:\"clock-date-line\",children:/*#__PURE__*/_jsx(\"span\",{className:\"clock-date\",children:clockDisplay.dateBottom})})]});};export default Clock;","map":{"version":3,"names":["React","useState","useEffect","useCallback","formatTimeForDisplay","getCurrentISTTime","TIME_UPDATE_INTERVAL","CSS_CLASSES","jsx","_jsx","jsxs","_jsxs","Clock","_ref","isFullScreen","position","timeFormat","currentTime","setCurrentTime","clockDisplay","setClockDisplay","updateTime","newTime","newDisplay","interval","setInterval","clearInterval","getClockClasses","baseClass","CLOCK_CONTAINER","positionClass","CLOCK_FULLSCREEN","CLOCK_BOTTOM_LEFT","concat","className","children","timeLeft","timeRight","dateBottom"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Clock.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ClockProps, ClockDisplay } from '../types';\nimport { formatTimeForDisplay, getCurrentISTTime } from '../utils/timeUtils';\nimport { TIME_UPDATE_INTERVAL, CSS_CLASSES } from '../utils/constants';\nimport '../styles/Clock.css';\n\n/**\n * Clock component that displays IST time in the specified two-line format\n * Line 1: \"HH:MM\" on left, \"AM/PM SS\" on right\n * Line 2: \"Day - Month Date\"\n */\nconst Clock: React.FC<ClockProps> = ({ \n  isFullScreen, \n  position, \n  timeFormat \n}) => {\n  const [currentTime, setCurrentTime] = useState<Date>(getCurrentISTTime());\n  const [clockDisplay, setClockDisplay] = useState<ClockDisplay>(\n    formatTimeForDisplay(getCurrentISTTime(), timeFormat)\n  );\n\n  // Update time display\n  const updateTime = useCallback(() => {\n    const newTime = getCurrentISTTime();\n    const newDisplay = formatTimeForDisplay(newTime, timeFormat);\n    \n    setCurrentTime(newTime);\n    setClockDisplay(newDisplay);\n  }, [timeFormat]);\n\n  // Set up time update interval\n  useEffect(() => {\n    const interval = setInterval(updateTime, TIME_UPDATE_INTERVAL);\n    \n    // Update immediately on mount\n    updateTime();\n    \n    return () => clearInterval(interval);\n  }, [updateTime]);\n\n  // Update display when time format changes\n  useEffect(() => {\n    const newDisplay = formatTimeForDisplay(currentTime, timeFormat);\n    setClockDisplay(newDisplay);\n  }, [timeFormat, currentTime]);\n\n  // Determine CSS classes based on props\n  const getClockClasses = (): string => {\n    const baseClass = CSS_CLASSES.CLOCK_CONTAINER;\n    const positionClass = isFullScreen \n      ? CSS_CLASSES.CLOCK_FULLSCREEN \n      : CSS_CLASSES.CLOCK_BOTTOM_LEFT;\n    \n    return `${baseClass} ${positionClass}`;\n  };\n\n  return (\n    <div className={getClockClasses()}>\n      <div className=\"clock-time-line\">\n        <span className=\"clock-time-left\">{clockDisplay.timeLeft}</span>\n        <span className=\"clock-time-right\">{clockDisplay.timeRight}</span>\n      </div>\n      <div className=\"clock-date-line\">\n        <span className=\"clock-date\">{clockDisplay.dateBottom}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Clock;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAE/D,OAASC,oBAAoB,CAAEC,iBAAiB,KAAQ,oBAAoB,CAC5E,OAASC,oBAAoB,CAAEC,WAAW,KAAQ,oBAAoB,CACtE,MAAO,qBAAqB,CAE5B;AACA;AACA;AACA;AACA,GAJA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAKA,KAAM,CAAAC,KAA2B,CAAGC,IAAA,EAI9B,IAJ+B,CACnCC,YAAY,CACZC,QAAQ,CACRC,UACF,CAAC,CAAAH,IAAA,CACC,KAAM,CAACI,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAOI,iBAAiB,CAAC,CAAC,CAAC,CACzE,KAAM,CAACc,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAC9CG,oBAAoB,CAACC,iBAAiB,CAAC,CAAC,CAAEW,UAAU,CACtD,CAAC,CAED;AACA,KAAM,CAAAK,UAAU,CAAGlB,WAAW,CAAC,IAAM,CACnC,KAAM,CAAAmB,OAAO,CAAGjB,iBAAiB,CAAC,CAAC,CACnC,KAAM,CAAAkB,UAAU,CAAGnB,oBAAoB,CAACkB,OAAO,CAAEN,UAAU,CAAC,CAE5DE,cAAc,CAACI,OAAO,CAAC,CACvBF,eAAe,CAACG,UAAU,CAAC,CAC7B,CAAC,CAAE,CAACP,UAAU,CAAC,CAAC,CAEhB;AACAd,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,QAAQ,CAAGC,WAAW,CAACJ,UAAU,CAAEf,oBAAoB,CAAC,CAE9D;AACAe,UAAU,CAAC,CAAC,CAEZ,MAAO,IAAMK,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,CAACH,UAAU,CAAC,CAAC,CAEhB;AACAnB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,UAAU,CAAGnB,oBAAoB,CAACa,WAAW,CAAED,UAAU,CAAC,CAChEI,eAAe,CAACG,UAAU,CAAC,CAC7B,CAAC,CAAE,CAACP,UAAU,CAAEC,WAAW,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAU,eAAe,CAAGA,CAAA,GAAc,CACpC,KAAM,CAAAC,SAAS,CAAGrB,WAAW,CAACsB,eAAe,CAC7C,KAAM,CAAAC,aAAa,CAAGhB,YAAY,CAC9BP,WAAW,CAACwB,gBAAgB,CAC5BxB,WAAW,CAACyB,iBAAiB,CAEjC,SAAAC,MAAA,CAAUL,SAAS,MAAAK,MAAA,CAAIH,aAAa,EACtC,CAAC,CAED,mBACEnB,KAAA,QAAKuB,SAAS,CAAEP,eAAe,CAAC,CAAE,CAAAQ,QAAA,eAChCxB,KAAA,QAAKuB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B1B,IAAA,SAAMyB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAEhB,YAAY,CAACiB,QAAQ,CAAO,CAAC,cAChE3B,IAAA,SAAMyB,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAEhB,YAAY,CAACkB,SAAS,CAAO,CAAC,EAC/D,CAAC,cACN5B,IAAA,QAAKyB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9B1B,IAAA,SAAMyB,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEhB,YAAY,CAACmB,UAAU,CAAO,CAAC,CAC1D,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAA1B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}