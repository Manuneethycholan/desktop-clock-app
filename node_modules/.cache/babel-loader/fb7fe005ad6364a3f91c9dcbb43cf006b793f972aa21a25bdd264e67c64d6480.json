{"ast":null,"code":"import _objectSpread from\"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{DEFAULT_SETTINGS,STORAGE_KEYS}from'../utils/constants';/**\n * Custom hook for managing localStorage with settings persistence\n * Handles validation, migration, and error recovery\n */export const useLocalStorage=()=>{const[settings,setSettings]=useState(DEFAULT_SETTINGS);const[isLoaded,setIsLoaded]=useState(false);// Validate stored settings structure\nconst validateSettings=data=>{if(!data||typeof data!=='object')return false;const requiredFields=['version','clockEnabled','wallpaperEnabled','selectedCategories','rotationInterval','timeFormat','wallpaperSize','fontColor','fontFamily','lastUpdated'];return requiredFields.every(field=>field in data);};// Convert stored settings to app settings\nconst convertStoredToAppSettings=stored=>{return{clockEnabled:stored.clockEnabled,wallpaperEnabled:stored.wallpaperEnabled,selectedCategories:stored.selectedCategories,rotationInterval:stored.rotationInterval,timeFormat:stored.timeFormat,wallpaperSize:stored.wallpaperSize,fontColor:stored.fontColor||DEFAULT_SETTINGS.fontColor,fontFamily:stored.fontFamily||DEFAULT_SETTINGS.fontFamily};};// Convert app settings to stored settings\nconst convertAppToStoredSettings=appSettings=>{return{version:STORAGE_KEYS.VERSION,clockEnabled:appSettings.clockEnabled,wallpaperEnabled:appSettings.wallpaperEnabled,selectedCategories:appSettings.selectedCategories,rotationInterval:appSettings.rotationInterval,timeFormat:appSettings.timeFormat,wallpaperSize:appSettings.wallpaperSize,fontColor:appSettings.fontColor,fontFamily:appSettings.fontFamily,lastUpdated:new Date().toISOString()};};// Load settings from localStorage\nconst loadSettings=useCallback(()=>{try{const stored=localStorage.getItem(STORAGE_KEYS.SETTINGS);if(!stored){console.log('No stored settings found, using defaults');setSettings(DEFAULT_SETTINGS);setIsLoaded(true);return;}const parsedData=JSON.parse(stored);if(!validateSettings(parsedData)){console.warn('Invalid stored settings format, using defaults');setSettings(DEFAULT_SETTINGS);setIsLoaded(true);return;}// Check version for potential migration\nif(parsedData.version!==STORAGE_KEYS.VERSION){console.log('Settings version mismatch, migrating...');// For now, just use defaults. Future versions can implement migration logic\nsetSettings(DEFAULT_SETTINGS);setIsLoaded(true);return;}const appSettings=convertStoredToAppSettings(parsedData);setSettings(appSettings);setIsLoaded(true);console.log('Settings loaded successfully');}catch(error){console.error('Error loading settings from localStorage:',error);setSettings(DEFAULT_SETTINGS);setIsLoaded(true);}},[]);// Save settings to localStorage\nconst saveSettings=useCallback(newSettings=>{try{const storedSettings=convertAppToStoredSettings(newSettings);localStorage.setItem(STORAGE_KEYS.SETTINGS,JSON.stringify(storedSettings));setSettings(newSettings);console.log('Settings saved successfully');}catch(error){console.error('Error saving settings to localStorage:',error);// Still update in-memory settings even if localStorage fails\nsetSettings(newSettings);}},[]);// Update specific setting\nconst updateSetting=useCallback((key,value)=>{const newSettings=_objectSpread(_objectSpread({},settings),{},{[key]:value});saveSettings(newSettings);},[settings,saveSettings]);// Reset to default settings\nconst resetSettings=useCallback(()=>{try{localStorage.removeItem(STORAGE_KEYS.SETTINGS);setSettings(DEFAULT_SETTINGS);console.log('Settings reset to defaults');}catch(error){console.error('Error resetting settings:',error);setSettings(DEFAULT_SETTINGS);}},[]);// Check if localStorage is available\nconst isLocalStorageAvailable=useCallback(()=>{try{const test='__localStorage_test__';localStorage.setItem(test,test);localStorage.removeItem(test);return true;}catch(_unused){return false;}},[]);// Load settings on mount\nuseEffect(()=>{if(!isLocalStorageAvailable()){console.warn('localStorage not available, using in-memory settings');setSettings(DEFAULT_SETTINGS);setIsLoaded(true);return;}loadSettings();},[loadSettings,isLocalStorageAvailable]);return{settings,isLoaded,saveSettings,updateSetting,resetSettings,isLocalStorageAvailable:isLocalStorageAvailable()};};","map":{"version":3,"names":["useState","useEffect","useCallback","DEFAULT_SETTINGS","STORAGE_KEYS","useLocalStorage","settings","setSettings","isLoaded","setIsLoaded","validateSettings","data","requiredFields","every","field","convertStoredToAppSettings","stored","clockEnabled","wallpaperEnabled","selectedCategories","rotationInterval","timeFormat","wallpaperSize","fontColor","fontFamily","convertAppToStoredSettings","appSettings","version","VERSION","lastUpdated","Date","toISOString","loadSettings","localStorage","getItem","SETTINGS","console","log","parsedData","JSON","parse","warn","error","saveSettings","newSettings","storedSettings","setItem","stringify","updateSetting","key","value","_objectSpread","resetSettings","removeItem","isLocalStorageAvailable","test","_unused"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { StoredSettings, AppSettings } from '../types';\nimport { DEFAULT_SETTINGS, STORAGE_KEYS } from '../utils/constants';\n\n/**\n * Custom hook for managing localStorage with settings persistence\n * Handles validation, migration, and error recovery\n */\nexport const useLocalStorage = () => {\n  const [settings, setSettings] = useState<AppSettings>(DEFAULT_SETTINGS);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Validate stored settings structure\n  const validateSettings = (data: any): data is StoredSettings => {\n    if (!data || typeof data !== 'object') return false;\n    \n    const requiredFields = [\n      'version',\n      'clockEnabled',\n      'wallpaperEnabled',\n      'selectedCategories',\n      'rotationInterval',\n      'timeFormat',\n      'wallpaperSize',\n      'fontColor',\n      'fontFamily',\n      'lastUpdated'\n    ];\n\n    return requiredFields.every(field => field in data);\n  };\n\n  // Convert stored settings to app settings\n  const convertStoredToAppSettings = (stored: StoredSettings): AppSettings => {\n    return {\n      clockEnabled: stored.clockEnabled,\n      wallpaperEnabled: stored.wallpaperEnabled,\n      selectedCategories: stored.selectedCategories,\n      rotationInterval: stored.rotationInterval,\n      timeFormat: stored.timeFormat,\n      wallpaperSize: stored.wallpaperSize,\n      fontColor: stored.fontColor || DEFAULT_SETTINGS.fontColor,\n      fontFamily: stored.fontFamily || DEFAULT_SETTINGS.fontFamily,\n    };\n  };\n\n  // Convert app settings to stored settings\n  const convertAppToStoredSettings = (appSettings: AppSettings): StoredSettings => {\n    return {\n      version: STORAGE_KEYS.VERSION,\n      clockEnabled: appSettings.clockEnabled,\n      wallpaperEnabled: appSettings.wallpaperEnabled,\n      selectedCategories: appSettings.selectedCategories,\n      rotationInterval: appSettings.rotationInterval,\n      timeFormat: appSettings.timeFormat,\n      wallpaperSize: appSettings.wallpaperSize,\n      fontColor: appSettings.fontColor,\n      fontFamily: appSettings.fontFamily,\n      lastUpdated: new Date().toISOString(),\n    };\n  };\n\n  // Load settings from localStorage\n  const loadSettings = useCallback(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n      \n      if (!stored) {\n        console.log('No stored settings found, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      const parsedData = JSON.parse(stored);\n      \n      if (!validateSettings(parsedData)) {\n        console.warn('Invalid stored settings format, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      // Check version for potential migration\n      if (parsedData.version !== STORAGE_KEYS.VERSION) {\n        console.log('Settings version mismatch, migrating...');\n        // For now, just use defaults. Future versions can implement migration logic\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      const appSettings = convertStoredToAppSettings(parsedData);\n      setSettings(appSettings);\n      setIsLoaded(true);\n      console.log('Settings loaded successfully');\n      \n    } catch (error) {\n      console.error('Error loading settings from localStorage:', error);\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n    }\n  }, []);\n\n  // Save settings to localStorage\n  const saveSettings = useCallback((newSettings: AppSettings) => {\n    try {\n      const storedSettings = convertAppToStoredSettings(newSettings);\n      localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(storedSettings));\n      setSettings(newSettings);\n      console.log('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings to localStorage:', error);\n      // Still update in-memory settings even if localStorage fails\n      setSettings(newSettings);\n    }\n  }, []);\n\n  // Update specific setting\n  const updateSetting = useCallback(<K extends keyof AppSettings>(\n    key: K,\n    value: AppSettings[K]\n  ) => {\n    const newSettings = { ...settings, [key]: value };\n    saveSettings(newSettings);\n  }, [settings, saveSettings]);\n\n  // Reset to default settings\n  const resetSettings = useCallback(() => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.SETTINGS);\n      setSettings(DEFAULT_SETTINGS);\n      console.log('Settings reset to defaults');\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, []);\n\n  // Check if localStorage is available\n  const isLocalStorageAvailable = useCallback(() => {\n    try {\n      const test = '__localStorage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }, []);\n\n  // Load settings on mount\n  useEffect(() => {\n    if (!isLocalStorageAvailable()) {\n      console.warn('localStorage not available, using in-memory settings');\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n      return;\n    }\n\n    loadSettings();\n  }, [loadSettings, isLocalStorageAvailable]);\n\n  return {\n    settings,\n    isLoaded,\n    saveSettings,\n    updateSetting,\n    resetSettings,\n    isLocalStorageAvailable: isLocalStorageAvailable(),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}