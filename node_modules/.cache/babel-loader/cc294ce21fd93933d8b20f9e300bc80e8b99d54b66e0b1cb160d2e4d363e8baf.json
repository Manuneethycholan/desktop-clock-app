{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Service Worker registration and management utilities\n *//**\n * Register service worker for offline functionality\n */export const registerServiceWorker=function(){let config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if('serviceWorker'in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js').then(registration=>{console.log('Service Worker registered successfully:',registration);// Check for updates\nregistration.addEventListener('updatefound',()=>{const newWorker=registration.installing;if(newWorker){newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'){if(navigator.serviceWorker.controller){var _config$onUpdate;// New content available\nconsole.log('New content available, please refresh');(_config$onUpdate=config.onUpdate)===null||_config$onUpdate===void 0?void 0:_config$onUpdate.call(config,registration);}else{var _config$onSuccess;// Content cached for first time\nconsole.log('Content cached for offline use');(_config$onSuccess=config.onSuccess)===null||_config$onSuccess===void 0?void 0:_config$onSuccess.call(config,registration);}}});}});}).catch(error=>{console.error('Service Worker registration failed:',error);});});// Listen for online/offline events\nwindow.addEventListener('online',()=>{var _config$onOnline;console.log('App is online');(_config$onOnline=config.onOnline)===null||_config$onOnline===void 0?void 0:_config$onOnline.call(config);});window.addEventListener('offline',()=>{var _config$onOffline;console.log('App is offline');(_config$onOffline=config.onOffline)===null||_config$onOffline===void 0?void 0:_config$onOffline.call(config);});}else{console.log('Service Worker not supported');}};/**\n * Unregister service worker\n */export const unregisterServiceWorker=async()=>{if('serviceWorker'in navigator){try{const registration=await navigator.serviceWorker.ready;const result=await registration.unregister();console.log('Service Worker unregistered:',result);return result;}catch(error){console.error('Service Worker unregistration failed:',error);return false;}}return false;};/**\n * Update service worker\n */export const updateServiceWorker=async()=>{if('serviceWorker'in navigator){try{const registration=await navigator.serviceWorker.ready;await registration.update();console.log('Service Worker update check completed');}catch(error){console.error('Service Worker update failed:',error);}}};/**\n * Send message to service worker\n */export const sendMessageToServiceWorker=message=>{return new Promise((resolve,reject)=>{if('serviceWorker'in navigator&&navigator.serviceWorker.controller){const messageChannel=new MessageChannel();messageChannel.port1.onmessage=event=>{resolve(event.data);};navigator.serviceWorker.controller.postMessage(message,[messageChannel.port2]);// Timeout after 5 seconds\nsetTimeout(()=>{reject(new Error('Service Worker message timeout'));},5000);}else{reject(new Error('Service Worker not available'));}});};/**\n * Cache wallpapers using service worker\n */export const cacheWallpapers=async images=>{try{await sendMessageToServiceWorker({type:'CACHE_WALLPAPERS',payload:{images}});console.log('Wallpapers cached successfully');}catch(error){console.error('Failed to cache wallpapers:',error);}};/**\n * Clear all caches\n */export const clearServiceWorkerCache=async()=>{try{await sendMessageToServiceWorker({type:'CLEAR_CACHE'});console.log('Service Worker cache cleared');}catch(error){console.error('Failed to clear cache:',error);}};/**\n * Get cache status\n */export const getCacheStatus=async()=>{try{const status=await sendMessageToServiceWorker({type:'GET_CACHE_STATUS'});return status;}catch(error){console.error('Failed to get cache status:',error);return{};}};/**\n * Check if app is running offline\n */export const isOffline=()=>{return!navigator.onLine;};/**\n * Check if service worker is supported\n */export const isServiceWorkerSupported=()=>{return'serviceWorker'in navigator;};/**\n * Get service worker registration\n */export const getServiceWorkerRegistration=async()=>{if('serviceWorker'in navigator){try{return await navigator.serviceWorker.ready;}catch(error){console.error('Failed to get service worker registration:',error);return null;}}return null;};/**\n * Hook for service worker status\n */export const useServiceWorkerStatus=()=>{const[isOnline,setIsOnline]=useState(navigator.onLine);const[isServiceWorkerReady,setIsServiceWorkerReady]=useState(false);const[cacheStatus,setCacheStatus]=useState({});useEffect(()=>{const handleOnline=()=>setIsOnline(true);const handleOffline=()=>setIsOnline(false);window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);// Check service worker status\nif('serviceWorker'in navigator){navigator.serviceWorker.ready.then(()=>{setIsServiceWorkerReady(true);// Get initial cache status\ngetCacheStatus().then(setCacheStatus);});}return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);const refreshCacheStatus=async()=>{const status=await getCacheStatus();setCacheStatus(status);};return{isOnline,isServiceWorkerReady,cacheStatus,refreshCacheStatus};};","map":{"version":3,"names":["useState","useEffect","registerServiceWorker","config","arguments","length","undefined","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","newWorker","installing","state","controller","_config$onUpdate","onUpdate","call","_config$onSuccess","onSuccess","catch","error","_config$onOnline","onOnline","_config$onOffline","onOffline","unregisterServiceWorker","ready","result","unregister","updateServiceWorker","update","sendMessageToServiceWorker","message","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","event","data","postMessage","port2","setTimeout","Error","cacheWallpapers","images","type","payload","clearServiceWorkerCache","getCacheStatus","status","isOffline","onLine","isServiceWorkerSupported","getServiceWorkerRegistration","useServiceWorkerStatus","isOnline","setIsOnline","isServiceWorkerReady","setIsServiceWorkerReady","cacheStatus","setCacheStatus","handleOnline","handleOffline","removeEventListener","refreshCacheStatus"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/serviceWorker.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Service Worker registration and management utilities\n */\n\ninterface ServiceWorkerConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  onOffline?: () => void;\n  onOnline?: () => void;\n}\n\n/**\n * Register service worker for offline functionality\n */\nexport const registerServiceWorker = (config: ServiceWorkerConfig = {}) => {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/sw.js')\n        .then((registration) => {\n          console.log('Service Worker registered successfully:', registration);\n          \n          // Check for updates\n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                    // New content available\n                    console.log('New content available, please refresh');\n                    config.onUpdate?.(registration);\n                  } else {\n                    // Content cached for first time\n                    console.log('Content cached for offline use');\n                    config.onSuccess?.(registration);\n                  }\n                }\n              });\n            }\n          });\n        })\n        .catch((error) => {\n          console.error('Service Worker registration failed:', error);\n        });\n    });\n\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      console.log('App is online');\n      config.onOnline?.();\n    });\n\n    window.addEventListener('offline', () => {\n      console.log('App is offline');\n      config.onOffline?.();\n    });\n  } else {\n    console.log('Service Worker not supported');\n  }\n};\n\n/**\n * Unregister service worker\n */\nexport const unregisterServiceWorker = async (): Promise<boolean> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const result = await registration.unregister();\n      console.log('Service Worker unregistered:', result);\n      return result;\n    } catch (error) {\n      console.error('Service Worker unregistration failed:', error);\n      return false;\n    }\n  }\n  return false;\n};\n\n/**\n * Update service worker\n */\nexport const updateServiceWorker = async (): Promise<void> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.update();\n      console.log('Service Worker update check completed');\n    } catch (error) {\n      console.error('Service Worker update failed:', error);\n    }\n  }\n};\n\n/**\n * Send message to service worker\n */\nexport const sendMessageToServiceWorker = (message: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      const messageChannel = new MessageChannel();\n      \n      messageChannel.port1.onmessage = (event) => {\n        resolve(event.data);\n      };\n      \n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n      \n      // Timeout after 5 seconds\n      setTimeout(() => {\n        reject(new Error('Service Worker message timeout'));\n      }, 5000);\n    } else {\n      reject(new Error('Service Worker not available'));\n    }\n  });\n};\n\n/**\n * Cache wallpapers using service worker\n */\nexport const cacheWallpapers = async (images: Array<{ src: string }>): Promise<void> => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CACHE_WALLPAPERS',\n      payload: { images }\n    });\n    console.log('Wallpapers cached successfully');\n  } catch (error) {\n    console.error('Failed to cache wallpapers:', error);\n  }\n};\n\n/**\n * Clear all caches\n */\nexport const clearServiceWorkerCache = async (): Promise<void> => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CLEAR_CACHE'\n    });\n    console.log('Service Worker cache cleared');\n  } catch (error) {\n    console.error('Failed to clear cache:', error);\n  }\n};\n\n/**\n * Get cache status\n */\nexport const getCacheStatus = async (): Promise<Record<string, number>> => {\n  try {\n    const status = await sendMessageToServiceWorker({\n      type: 'GET_CACHE_STATUS'\n    });\n    return status;\n  } catch (error) {\n    console.error('Failed to get cache status:', error);\n    return {};\n  }\n};\n\n/**\n * Check if app is running offline\n */\nexport const isOffline = (): boolean => {\n  return !navigator.onLine;\n};\n\n/**\n * Check if service worker is supported\n */\nexport const isServiceWorkerSupported = (): boolean => {\n  return 'serviceWorker' in navigator;\n};\n\n/**\n * Get service worker registration\n */\nexport const getServiceWorkerRegistration = async (): Promise<ServiceWorkerRegistration | null> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      return await navigator.serviceWorker.ready;\n    } catch (error) {\n      console.error('Failed to get service worker registration:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\n * Hook for service worker status\n */\nexport const useServiceWorkerStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isServiceWorkerReady, setIsServiceWorkerReady] = useState(false);\n  const [cacheStatus, setCacheStatus] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check service worker status\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        setIsServiceWorkerReady(true);\n        // Get initial cache status\n        getCacheStatus().then(setCacheStatus);\n      });\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const refreshCacheStatus = async () => {\n    const status = await getCacheStatus();\n    setCacheStatus(status);\n  };\n\n  return {\n    isOnline,\n    isServiceWorkerReady,\n    cacheStatus,\n    refreshCacheStatus\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}