{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Settings.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { WALLPAPER_CATEGORIES, ROTATION_INTERVALS, CSS_CLASSES, FONT_COLORS, FONT_FAMILIES } from '../utils/constants';\nimport { getCategoryDisplayName } from '../utils/imageLoader';\nimport '../styles/Settings.css';\n\n/**\n * Settings component with dropdown sections for Digital Clock and Wallpaper settings\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Settings = ({\n  isVisible,\n  onSettingsChange,\n  currentSettings,\n  onClose\n}) => {\n  _s();\n  const [digitalClockExpanded, setDigitalClockExpanded] = useState(false);\n  const [wallpaperExpanded, setWallpaperExpanded] = useState(false);\n  const autoCloseTimeoutRef = useRef(null);\n  const settingsPanelRef = useRef(null);\n\n  // Auto-close after 7 seconds of inactivity\n  useEffect(() => {\n    if (!isVisible) return;\n    const resetAutoCloseTimer = () => {\n      if (autoCloseTimeoutRef.current) {\n        clearTimeout(autoCloseTimeoutRef.current);\n      }\n      autoCloseTimeoutRef.current = setTimeout(() => {\n        if (onClose) {\n          onClose();\n        }\n      }, 7000); // 7 seconds\n    };\n\n    // Start the timer when panel opens\n    resetAutoCloseTimer();\n\n    // Reset timer on any interaction within the settings panel\n    const handleInteraction = () => {\n      resetAutoCloseTimer();\n    };\n    const panelElement = settingsPanelRef.current;\n    if (panelElement) {\n      panelElement.addEventListener('mouseenter', handleInteraction);\n      panelElement.addEventListener('mousemove', handleInteraction);\n      panelElement.addEventListener('click', handleInteraction);\n      panelElement.addEventListener('scroll', handleInteraction);\n    }\n\n    // Cleanup\n    return () => {\n      if (autoCloseTimeoutRef.current) {\n        clearTimeout(autoCloseTimeoutRef.current);\n      }\n      if (panelElement) {\n        panelElement.removeEventListener('mouseenter', handleInteraction);\n        panelElement.removeEventListener('mousemove', handleInteraction);\n        panelElement.removeEventListener('click', handleInteraction);\n        panelElement.removeEventListener('scroll', handleInteraction);\n      }\n    };\n  }, [isVisible, onClose]);\n\n  // Handle wallpaper enable/disable toggle\n  const handleWallpaperToggle = enabled => {\n    onSettingsChange({\n      wallpaperEnabled: enabled\n    });\n  };\n\n  // Handle category selection with edge case handling\n  const handleCategoryToggle = (category, selected) => {\n    let updatedCategories;\n    if (selected) {\n      // Add category if not already present\n      updatedCategories = currentSettings.selectedCategories.includes(category) ? currentSettings.selectedCategories : [...currentSettings.selectedCategories, category];\n    } else {\n      // Remove category\n      updatedCategories = currentSettings.selectedCategories.filter(cat => cat !== category);\n    }\n    onSettingsChange({\n      selectedCategories: updatedCategories\n    });\n  };\n\n  // Check if no categories are selected\n  const hasNoCategories = currentSettings.selectedCategories.length === 0;\n\n  // Handle rotation interval change\n  const handleRotationIntervalChange = interval => {\n    onSettingsChange({\n      rotationInterval: interval\n    });\n  };\n\n  // Handle time format change\n  const handleTimeFormatChange = format => {\n    onSettingsChange({\n      timeFormat: format\n    });\n  };\n\n  // Handle font color change\n  const handleFontColorChange = color => {\n    onSettingsChange({\n      fontColor: color\n    });\n  };\n\n  // Handle font family change\n  const handleFontFamilyChange = family => {\n    onSettingsChange({\n      fontFamily: family\n    });\n  };\n  if (!isVisible) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: settingsPanelRef,\n    className: `${CSS_CLASSES.SETTINGS_PANEL} ${CSS_CLASSES.SETTINGS_VISIBLE}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"settings-title\",\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"settings-close-button\",\n          onClick: onClose,\n          \"aria-label\": \"Close Settings\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-section-title\",\n          children: \"Display Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-radio-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-radio\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"displayMode\",\n              value: \"digital-clock\",\n              checked: currentSettings.displayMode === 'digital-clock',\n              onChange: () => onSettingsChange({\n                displayMode: 'digital-clock'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-radio-label\",\n              children: \"Digital Clock\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-radio\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"displayMode\",\n              value: \"wallpaper\",\n              checked: currentSettings.displayMode === 'wallpaper',\n              onChange: () => onSettingsChange({\n                displayMode: 'wallpaper'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-radio-label\",\n              children: \"Wallpaper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"settings-radio\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"displayMode\",\n              value: \"focus-mode\",\n              checked: currentSettings.displayMode === 'focus-mode',\n              onChange: () => onSettingsChange({\n                displayMode: 'focus-mode'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"settings-radio-label\",\n              children: \"Focus Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `settings-dropdown-header ${digitalClockExpanded ? 'expanded' : ''}`,\n          onClick: () => setDigitalClockExpanded(!digitalClockExpanded),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Digital Clock Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dropdown-arrow\",\n            children: digitalClockExpanded ? '▼' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), digitalClockExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-dropdown-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-subsection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"settings-subsection-title\",\n              children: \"Time Format\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-radio-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-radio\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"timeFormat\",\n                  value: \"12h\",\n                  checked: currentSettings.timeFormat === '12h',\n                  onChange: () => handleTimeFormatChange('12h')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"settings-radio-label\",\n                  children: \"12 Hour\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-radio\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"timeFormat\",\n                  value: \"24h\",\n                  checked: currentSettings.timeFormat === '24h',\n                  onChange: () => handleTimeFormatChange('24h')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"settings-radio-label\",\n                  children: \"24 Hour\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-subsection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"settings-subsection-title\",\n              children: \"Font Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-color-grid\",\n              children: FONT_COLORS.map(color => /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"settings-color-option\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"fontColor\",\n                  value: color.value,\n                  checked: currentSettings.fontColor === color.value,\n                  onChange: () => handleFontColorChange(color.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"settings-color-swatch\",\n                  style: {\n                    backgroundColor: color.value\n                  },\n                  title: color.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"settings-color-name\",\n                  children: color.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 23\n                }, this)]\n              }, color.value, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-subsection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"settings-subsection-title\",\n              children: \"Font Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"settings-select\",\n              value: currentSettings.fontFamily,\n              onChange: e => handleFontFamilyChange(e.target.value),\n              children: FONT_FAMILIES.map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: font.value,\n                children: font.name\n              }, font.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), currentSettings.wallpaperEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `settings-dropdown-header ${wallpaperExpanded ? 'expanded' : ''}`,\n          onClick: () => setWallpaperExpanded(!wallpaperExpanded),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Wallpaper Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dropdown-arrow\",\n            children: wallpaperExpanded ? '▼' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), wallpaperExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-dropdown-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-subsection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"settings-subsection-title\",\n              children: \"Rotation Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"settings-select\",\n              value: currentSettings.rotationInterval,\n              onChange: e => handleRotationIntervalChange(Number(e.target.value)),\n              children: ROTATION_INTERVALS.map(interval => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: interval.value,\n                children: interval.label\n              }, interval.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-subsection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"settings-subsection-title\",\n              children: \"Wallpaper Categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-category-grid\",\n              children: WALLPAPER_CATEGORIES.map(category => {\n                const isSelected = currentSettings.selectedCategories.includes(category.name);\n                const hasImages = category.imageCount > 0;\n                const categoryClass = `settings-category ${isSelected ? 'category-selected' : 'category-unselected'} ${!hasImages ? 'category-empty' : ''}`;\n                return /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: categoryClass,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: isSelected,\n                    onChange: e => handleCategoryToggle(category.name, e.target.checked),\n                    \"aria-label\": `Toggle ${getCategoryDisplayName(category.name)} wallpapers${!hasImages ? ' (no images available)' : ''}`,\n                    disabled: !hasImages\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"settings-category-label\",\n                    children: [getCategoryDisplayName(category.name), hasImages && category.imageCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"settings-category-count\",\n                      children: [\"(\", category.imageCount, \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 31\n                    }, this), !hasImages && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"settings-category-empty-indicator\",\n                      children: \"(empty)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 27\n                  }, this)]\n                }, category.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this), hasNoCategories && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-category-warning\",\n              children: \"No categories selected. A black background will be displayed.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 21\n            }, this), currentSettings.selectedCategories.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"settings-category-info\",\n              children: [currentSettings.selectedCategories.length, \" categor\", currentSettings.selectedCategories.length === 1 ? 'y' : 'ies', \" selected\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(Settings, \"yfNl5dvyjwQWAb6XGOYbCE4sWuM=\");\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","useEffect","useRef","WALLPAPER_CATEGORIES","ROTATION_INTERVALS","CSS_CLASSES","FONT_COLORS","FONT_FAMILIES","getCategoryDisplayName","jsxDEV","_jsxDEV","Settings","isVisible","onSettingsChange","currentSettings","onClose","_s","digitalClockExpanded","setDigitalClockExpanded","wallpaperExpanded","setWallpaperExpanded","autoCloseTimeoutRef","settingsPanelRef","resetAutoCloseTimer","current","clearTimeout","setTimeout","handleInteraction","panelElement","addEventListener","removeEventListener","handleWallpaperToggle","enabled","wallpaperEnabled","handleCategoryToggle","category","selected","updatedCategories","selectedCategories","includes","filter","cat","hasNoCategories","length","handleRotationIntervalChange","interval","rotationInterval","handleTimeFormatChange","format","timeFormat","handleFontColorChange","color","fontColor","handleFontFamilyChange","family","fontFamily","ref","className","SETTINGS_PANEL","SETTINGS_VISIBLE","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","name","value","checked","displayMode","onChange","map","style","backgroundColor","title","e","target","font","Number","label","isSelected","hasImages","imageCount","categoryClass","disabled","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Settings.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SettingsProps, TimeFormat, FontColor, FontFamily } from '../types';\nimport { WALLPAPER_CATEGORIES, ROTATION_INTERVALS, CSS_CLASSES, FONT_COLORS, FONT_FAMILIES } from '../utils/constants';\nimport { getCategoryDisplayName } from '../utils/imageLoader';\nimport '../styles/Settings.css';\n\n/**\n * Settings component with dropdown sections for Digital Clock and Wallpaper settings\n */\nconst Settings: React.FC<SettingsProps> = ({\n  isVisible,\n  onSettingsChange,\n  currentSettings,\n  onClose\n}) => {\n  const [digitalClockExpanded, setDigitalClockExpanded] = useState(false);\n  const [wallpaperExpanded, setWallpaperExpanded] = useState(false);\n  const autoCloseTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const settingsPanelRef = useRef<HTMLDivElement>(null);\n\n  // Auto-close after 7 seconds of inactivity\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const resetAutoCloseTimer = () => {\n      if (autoCloseTimeoutRef.current) {\n        clearTimeout(autoCloseTimeoutRef.current);\n      }\n\n      autoCloseTimeoutRef.current = setTimeout(() => {\n        if (onClose) {\n          onClose();\n        }\n      }, 7000); // 7 seconds\n    };\n\n    // Start the timer when panel opens\n    resetAutoCloseTimer();\n\n    // Reset timer on any interaction within the settings panel\n    const handleInteraction = () => {\n      resetAutoCloseTimer();\n    };\n\n    const panelElement = settingsPanelRef.current;\n    if (panelElement) {\n      panelElement.addEventListener('mouseenter', handleInteraction);\n      panelElement.addEventListener('mousemove', handleInteraction);\n      panelElement.addEventListener('click', handleInteraction);\n      panelElement.addEventListener('scroll', handleInteraction);\n    }\n\n    // Cleanup\n    return () => {\n      if (autoCloseTimeoutRef.current) {\n        clearTimeout(autoCloseTimeoutRef.current);\n      }\n      if (panelElement) {\n        panelElement.removeEventListener('mouseenter', handleInteraction);\n        panelElement.removeEventListener('mousemove', handleInteraction);\n        panelElement.removeEventListener('click', handleInteraction);\n        panelElement.removeEventListener('scroll', handleInteraction);\n      }\n    };\n  }, [isVisible, onClose]);\n\n  // Handle wallpaper enable/disable toggle\n  const handleWallpaperToggle = (enabled: boolean) => {\n    onSettingsChange({ wallpaperEnabled: enabled });\n  };\n\n  // Handle category selection with edge case handling\n  const handleCategoryToggle = (category: string, selected: boolean) => {\n    let updatedCategories: string[];\n\n    if (selected) {\n      // Add category if not already present\n      updatedCategories = currentSettings.selectedCategories.includes(category)\n        ? currentSettings.selectedCategories\n        : [...currentSettings.selectedCategories, category];\n    } else {\n      // Remove category\n      updatedCategories = currentSettings.selectedCategories.filter(cat => cat !== category);\n    }\n\n    onSettingsChange({ selectedCategories: updatedCategories });\n  };\n\n  // Check if no categories are selected\n  const hasNoCategories = currentSettings.selectedCategories.length === 0;\n\n\n\n  // Handle rotation interval change\n  const handleRotationIntervalChange = (interval: number) => {\n    onSettingsChange({ rotationInterval: interval });\n  };\n\n  // Handle time format change\n  const handleTimeFormatChange = (format: TimeFormat) => {\n    onSettingsChange({ timeFormat: format });\n  };\n\n  // Handle font color change\n  const handleFontColorChange = (color: FontColor) => {\n    onSettingsChange({ fontColor: color });\n  };\n\n  // Handle font family change\n  const handleFontFamilyChange = (family: FontFamily) => {\n    onSettingsChange({ fontFamily: family });\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={settingsPanelRef}\n      className={`${CSS_CLASSES.SETTINGS_PANEL} ${CSS_CLASSES.SETTINGS_VISIBLE}`}\n    >\n      <div className=\"settings-content\">\n        <div className=\"settings-header\">\n          <h2 className=\"settings-title\">Settings</h2>\n          <button\n            className=\"settings-close-button\"\n            onClick={onClose}\n            aria-label=\"Close Settings\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* Display Mode Controls */}\n        <div className=\"settings-section\">\n          <h3 className=\"settings-section-title\">Display Mode</h3>\n\n          <div className=\"settings-radio-group\">\n            <label className=\"settings-radio\">\n              <input\n                type=\"radio\"\n                name=\"displayMode\"\n                value=\"digital-clock\"\n                checked={currentSettings.displayMode === 'digital-clock'}\n                onChange={() => onSettingsChange({ displayMode: 'digital-clock' })}\n              />\n              <span className=\"settings-radio-label\">Digital Clock</span>\n            </label>\n\n            <label className=\"settings-radio\">\n              <input\n                type=\"radio\"\n                name=\"displayMode\"\n                value=\"wallpaper\"\n                checked={currentSettings.displayMode === 'wallpaper'}\n                onChange={() => onSettingsChange({ displayMode: 'wallpaper' })}\n              />\n              <span className=\"settings-radio-label\">Wallpaper</span>\n            </label>\n\n            <label className=\"settings-radio\">\n              <input\n                type=\"radio\"\n                name=\"displayMode\"\n                value=\"focus-mode\"\n                checked={currentSettings.displayMode === 'focus-mode'}\n                onChange={() => onSettingsChange({ displayMode: 'focus-mode' })}\n              />\n              <span className=\"settings-radio-label\">Focus Mode</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Digital Clock Settings Dropdown */}\n        <div className=\"settings-dropdown\">\n          <button\n            className={`settings-dropdown-header ${digitalClockExpanded ? 'expanded' : ''}`}\n            onClick={() => setDigitalClockExpanded(!digitalClockExpanded)}\n          >\n            <span>Digital Clock Settings</span>\n            <span className=\"dropdown-arrow\">{digitalClockExpanded ? '▼' : '▶'}</span>\n          </button>\n\n          {digitalClockExpanded && (\n            <div className=\"settings-dropdown-content\">\n              {/* Time Format */}\n              <div className=\"settings-subsection\">\n                <h4 className=\"settings-subsection-title\">Time Format</h4>\n                <div className=\"settings-radio-group\">\n                  <label className=\"settings-radio\">\n                    <input\n                      type=\"radio\"\n                      name=\"timeFormat\"\n                      value=\"12h\"\n                      checked={currentSettings.timeFormat === '12h'}\n                      onChange={() => handleTimeFormatChange('12h')}\n                    />\n                    <span className=\"settings-radio-label\">12 Hour</span>\n                  </label>\n\n                  <label className=\"settings-radio\">\n                    <input\n                      type=\"radio\"\n                      name=\"timeFormat\"\n                      value=\"24h\"\n                      checked={currentSettings.timeFormat === '24h'}\n                      onChange={() => handleTimeFormatChange('24h')}\n                    />\n                    <span className=\"settings-radio-label\">24 Hour</span>\n                  </label>\n                </div>\n              </div>\n\n              {/* Font Color */}\n              <div className=\"settings-subsection\">\n                <h4 className=\"settings-subsection-title\">Font Color</h4>\n                <div className=\"settings-color-grid\">\n                  {FONT_COLORS.map(color => (\n                    <label key={color.value} className=\"settings-color-option\">\n                      <input\n                        type=\"radio\"\n                        name=\"fontColor\"\n                        value={color.value}\n                        checked={currentSettings.fontColor === color.value}\n                        onChange={() => handleFontColorChange(color.value)}\n                      />\n                      <span\n                        className=\"settings-color-swatch\"\n                        style={{ backgroundColor: color.value }}\n                        title={color.name}\n                      />\n                      <span className=\"settings-color-name\">{color.name}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Font Family */}\n              <div className=\"settings-subsection\">\n                <h4 className=\"settings-subsection-title\">Font Type</h4>\n                <select\n                  className=\"settings-select\"\n                  value={currentSettings.fontFamily}\n                  onChange={(e) => handleFontFamilyChange(e.target.value)}\n                >\n                  {FONT_FAMILIES.map(font => (\n                    <option key={font.value} value={font.value}>\n                      {font.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Wallpaper Settings Dropdown */}\n        {currentSettings.wallpaperEnabled && (\n          <div className=\"settings-dropdown\">\n            <button\n              className={`settings-dropdown-header ${wallpaperExpanded ? 'expanded' : ''}`}\n              onClick={() => setWallpaperExpanded(!wallpaperExpanded)}\n            >\n              <span>Wallpaper Settings</span>\n              <span className=\"dropdown-arrow\">{wallpaperExpanded ? '▼' : '▶'}</span>\n            </button>\n\n            {wallpaperExpanded && (\n              <div className=\"settings-dropdown-content\">\n\n\n                {/* Rotation Speed */}\n                <div className=\"settings-subsection\">\n                  <h4 className=\"settings-subsection-title\">Rotation Speed</h4>\n                  <select\n                    className=\"settings-select\"\n                    value={currentSettings.rotationInterval}\n                    onChange={(e) => handleRotationIntervalChange(Number(e.target.value))}\n                  >\n                    {ROTATION_INTERVALS.map(interval => (\n                      <option key={interval.value} value={interval.value}>\n                        {interval.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Category Selection */}\n                <div className=\"settings-subsection\">\n                  <h4 className=\"settings-subsection-title\">Wallpaper Categories</h4>\n\n                  <div className=\"settings-category-grid\">\n                    {WALLPAPER_CATEGORIES.map(category => {\n                      const isSelected = currentSettings.selectedCategories.includes(category.name);\n                      const hasImages = category.imageCount > 0;\n                      const categoryClass = `settings-category ${isSelected ? 'category-selected' : 'category-unselected'\n                        } ${!hasImages ? 'category-empty' : ''}`;\n\n                      return (\n                        <label key={category.name} className={categoryClass}>\n                          <input\n                            type=\"checkbox\"\n                            checked={isSelected}\n                            onChange={(e) => handleCategoryToggle(category.name, e.target.checked)}\n                            aria-label={`Toggle ${getCategoryDisplayName(category.name)} wallpapers${!hasImages ? ' (no images available)' : ''}`}\n                            disabled={!hasImages}\n                          />\n                          <span className=\"settings-category-label\">\n                            {getCategoryDisplayName(category.name)}\n                            {hasImages && category.imageCount > 0 && (\n                              <span className=\"settings-category-count\">\n                                ({category.imageCount})\n                              </span>\n                            )}\n                            {!hasImages && (\n                              <span className=\"settings-category-empty-indicator\">\n                                (empty)\n                              </span>\n                            )}\n                          </span>\n                        </label>\n                      );\n                    })}\n                  </div>\n\n                  {/* Warning when no categories are selected */}\n                  {hasNoCategories && (\n                    <div className=\"settings-category-warning\">\n                      No categories selected. A black background will be displayed.\n                    </div>\n                  )}\n\n                  {/* Info about selected categories */}\n                  {currentSettings.selectedCategories.length > 0 && (\n                    <div className=\"settings-category-info\">\n                      {currentSettings.selectedCategories.length} categor{currentSettings.selectedCategories.length === 1 ? 'y' : 'ies'} selected\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}