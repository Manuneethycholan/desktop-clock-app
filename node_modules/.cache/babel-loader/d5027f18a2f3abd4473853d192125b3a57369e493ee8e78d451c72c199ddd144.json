{"ast":null,"code":"import { IST_TIMEZONE } from './constants';\n\n/**\n * Utility functions for time formatting and IST conversion\n */\n\n/**\n * Get current IST time as Date object with error handling\n */\nexport const getCurrentISTTime = () => {\n  try {\n    const now = new Date();\n\n    // Validate that we got a valid date\n    if (isNaN(now.getTime())) {\n      console.error('Invalid date object created, using fallback');\n      return new Date(Date.now()); // Fallback to current timestamp\n    }\n    return now;\n  } catch (error) {\n    console.error('Error getting current time:', error);\n    // Ultimate fallback - create date from timestamp\n    return new Date(Date.now());\n  }\n};\n\n/**\n * Format time for display according to the specified format with comprehensive error handling\n */\nexport const formatTimeForDisplay = (date, timeFormat) => {\n  // Validate input date\n  if (!date || isNaN(date.getTime())) {\n    console.error('Invalid date provided to formatTimeForDisplay, using current time');\n    date = getCurrentISTTime();\n  }\n\n  // Validate time format\n  if (!isValidTimeFormat(timeFormat)) {\n    console.warn(`Invalid time format: ${timeFormat}, defaulting to 12h`);\n    timeFormat = '12h';\n  }\n  try {\n    var _parts$find, _parts$find2, _parts$find3, _parts$find4, _parts$find5, _parts$find6, _parts$find7;\n    // Get IST time components\n    const istOptions = {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric'\n    };\n    const formatter = new Intl.DateTimeFormat('en-IN', istOptions);\n    const parts = formatter.formatToParts(date);\n\n    // Extract parts with fallbacks\n    const hour = ((_parts$find = parts.find(part => part.type === 'hour')) === null || _parts$find === void 0 ? void 0 : _parts$find.value) || '00';\n    const minute = ((_parts$find2 = parts.find(part => part.type === 'minute')) === null || _parts$find2 === void 0 ? void 0 : _parts$find2.value) || '00';\n    const second = ((_parts$find3 = parts.find(part => part.type === 'second')) === null || _parts$find3 === void 0 ? void 0 : _parts$find3.value) || '00';\n    const dayPeriod = ((_parts$find4 = parts.find(part => part.type === 'dayPeriod')) === null || _parts$find4 === void 0 ? void 0 : _parts$find4.value) || '';\n    const weekday = ((_parts$find5 = parts.find(part => part.type === 'weekday')) === null || _parts$find5 === void 0 ? void 0 : _parts$find5.value) || 'Unknown';\n    const month = ((_parts$find6 = parts.find(part => part.type === 'month')) === null || _parts$find6 === void 0 ? void 0 : _parts$find6.value) || 'Unknown';\n    const day = ((_parts$find7 = parts.find(part => part.type === 'day')) === null || _parts$find7 === void 0 ? void 0 : _parts$find7.value) || '1';\n\n    // Validate extracted values\n    if (!hour || !minute || !second) {\n      throw new Error('Failed to extract time components');\n    }\n\n    // Format according to the design: \"10:03\" \"AM\\n24\" \"Friday - September 12\"\n    const timeLeft = `${hour}:${minute}`;\n    const timeRight = timeFormat === '12h' ? `${dayPeriod.toUpperCase()}\\n${second}` : second;\n    const dateBottom = `${weekday} - ${month} ${day}`;\n    return {\n      timeLeft,\n      timeRight,\n      dateBottom\n    };\n  } catch (error) {\n    console.error('Error formatting time with Intl.DateTimeFormat:', error);\n\n    // Enhanced fallback formatting\n    try {\n      return getFallbackTimeDisplay(date, timeFormat);\n    } catch (fallbackError) {\n      console.error('Fallback time formatting also failed:', fallbackError);\n      return getEmergencyTimeDisplay();\n    }\n  }\n};\n\n/**\n * Fallback time formatting using basic Date methods\n */\nconst getFallbackTimeDisplay = (date, timeFormat) => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  let timeLeft;\n  let timeRight;\n  if (timeFormat === '12h') {\n    const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    timeLeft = `${displayHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    timeRight = `${ampm}\\n${seconds.toString().padStart(2, '0')}`;\n  } else {\n    timeLeft = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    timeRight = seconds.toString().padStart(2, '0');\n  }\n\n  // Basic date formatting\n  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const weekday = weekdays[date.getDay()] || 'Unknown';\n  const month = months[date.getMonth()] || 'Unknown';\n  const day = date.getDate();\n  const dateBottom = `${weekday} - ${month} ${day}`;\n  return {\n    timeLeft,\n    timeRight,\n    dateBottom\n  };\n};\n\n/**\n * Emergency fallback when all time formatting fails\n */\nconst getEmergencyTimeDisplay = () => {\n  const now = Date.now();\n  const date = new Date(now);\n  return {\n    timeLeft: '00:00',\n    timeRight: 'AM 00',\n    dateBottom: `Error - ${date.toDateString()}`\n  };\n};\n\n/**\n * Validate if a time format is supported\n */\nexport const isValidTimeFormat = format => {\n  return format === '12h' || format === '24h';\n};\n\n/**\n * Get timezone offset for IST\n */\nexport const getISTOffset = () => {\n  const date = new Date();\n  const istTime = new Date(date.toLocaleString('en-US', {\n    timeZone: IST_TIMEZONE\n  }));\n  const utcTime = new Date(date.toLocaleString('en-US', {\n    timeZone: 'UTC'\n  }));\n  const offsetMs = istTime.getTime() - utcTime.getTime();\n  const offsetHours = offsetMs / (1000 * 60 * 60);\n  return offsetHours >= 0 ? `+${offsetHours}:30` : `${offsetHours}:30`;\n};\n\n/**\n * Check if current time is in IST timezone\n */\nexport const isISTTimezone = () => {\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return timeZone === IST_TIMEZONE;\n  } catch {\n    return false;\n  }\n};","map":{"version":3,"names":["IST_TIMEZONE","getCurrentISTTime","now","Date","isNaN","getTime","console","error","formatTimeForDisplay","date","timeFormat","isValidTimeFormat","warn","_parts$find","_parts$find2","_parts$find3","_parts$find4","_parts$find5","_parts$find6","_parts$find7","istOptions","timeZone","hour12","hour","minute","second","weekday","month","day","formatter","Intl","DateTimeFormat","parts","formatToParts","find","part","type","value","dayPeriod","Error","timeLeft","timeRight","toUpperCase","dateBottom","getFallbackTimeDisplay","fallbackError","getEmergencyTimeDisplay","hours","getHours","minutes","getMinutes","seconds","getSeconds","displayHours","ampm","toString","padStart","weekdays","months","getDay","getMonth","getDate","toDateString","format","getISTOffset","istTime","toLocaleString","utcTime","offsetMs","offsetHours","isISTTimezone","resolvedOptions"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/timeUtils.ts"],"sourcesContent":["import { ClockDisplay, TimeFormat } from '../types';\nimport { IST_TIMEZONE } from './constants';\n\n/**\n * Utility functions for time formatting and IST conversion\n */\n\n/**\n * Get current IST time as Date object with error handling\n */\nexport const getCurrentISTTime = (): Date => {\n  try {\n    const now = new Date();\n    \n    // Validate that we got a valid date\n    if (isNaN(now.getTime())) {\n      console.error('Invalid date object created, using fallback');\n      return new Date(Date.now()); // Fallback to current timestamp\n    }\n    \n    return now;\n  } catch (error) {\n    console.error('Error getting current time:', error);\n    // Ultimate fallback - create date from timestamp\n    return new Date(Date.now());\n  }\n};\n\n/**\n * Format time for display according to the specified format with comprehensive error handling\n */\nexport const formatTimeForDisplay = (date: Date, timeFormat: TimeFormat): ClockDisplay => {\n  // Validate input date\n  if (!date || isNaN(date.getTime())) {\n    console.error('Invalid date provided to formatTimeForDisplay, using current time');\n    date = getCurrentISTTime();\n  }\n\n  // Validate time format\n  if (!isValidTimeFormat(timeFormat)) {\n    console.warn(`Invalid time format: ${timeFormat}, defaulting to 12h`);\n    timeFormat = '12h';\n  }\n\n  try {\n    // Get IST time components\n    const istOptions: Intl.DateTimeFormatOptions = {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    const formatter = new Intl.DateTimeFormat('en-IN', istOptions);\n    const parts = formatter.formatToParts(date);\n\n    // Extract parts with fallbacks\n    const hour = parts.find(part => part.type === 'hour')?.value || '00';\n    const minute = parts.find(part => part.type === 'minute')?.value || '00';\n    const second = parts.find(part => part.type === 'second')?.value || '00';\n    const dayPeriod = parts.find(part => part.type === 'dayPeriod')?.value || '';\n    const weekday = parts.find(part => part.type === 'weekday')?.value || 'Unknown';\n    const month = parts.find(part => part.type === 'month')?.value || 'Unknown';\n    const day = parts.find(part => part.type === 'day')?.value || '1';\n\n    // Validate extracted values\n    if (!hour || !minute || !second) {\n      throw new Error('Failed to extract time components');\n    }\n\n    // Format according to the design: \"10:03\" \"AM\\n24\" \"Friday - September 12\"\n    const timeLeft = `${hour}:${minute}`;\n    const timeRight = timeFormat === '12h' ? `${dayPeriod.toUpperCase()}\\n${second}` : second;\n    const dateBottom = `${weekday} - ${month} ${day}`;\n\n    return {\n      timeLeft,\n      timeRight,\n      dateBottom,\n    };\n  } catch (error) {\n    console.error('Error formatting time with Intl.DateTimeFormat:', error);\n    \n    // Enhanced fallback formatting\n    try {\n      return getFallbackTimeDisplay(date, timeFormat);\n    } catch (fallbackError) {\n      console.error('Fallback time formatting also failed:', fallbackError);\n      return getEmergencyTimeDisplay();\n    }\n  }\n};\n\n/**\n * Fallback time formatting using basic Date methods\n */\nconst getFallbackTimeDisplay = (date: Date, timeFormat: TimeFormat): ClockDisplay => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  \n  let timeLeft: string;\n  let timeRight: string;\n  \n  if (timeFormat === '12h') {\n    const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    timeLeft = `${displayHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    timeRight = `${ampm}\\n${seconds.toString().padStart(2, '0')}`;\n  } else {\n    timeLeft = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    timeRight = seconds.toString().padStart(2, '0');\n  }\n  \n  // Basic date formatting\n  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', \n                  'July', 'August', 'September', 'October', 'November', 'December'];\n  \n  const weekday = weekdays[date.getDay()] || 'Unknown';\n  const month = months[date.getMonth()] || 'Unknown';\n  const day = date.getDate();\n  \n  const dateBottom = `${weekday} - ${month} ${day}`;\n  \n  return { timeLeft, timeRight, dateBottom };\n};\n\n/**\n * Emergency fallback when all time formatting fails\n */\nconst getEmergencyTimeDisplay = (): ClockDisplay => {\n  const now = Date.now();\n  const date = new Date(now);\n  \n  return {\n    timeLeft: '00:00',\n    timeRight: 'AM 00',\n    dateBottom: `Error - ${date.toDateString()}`,\n  };\n};\n\n/**\n * Validate if a time format is supported\n */\nexport const isValidTimeFormat = (format: string): format is TimeFormat => {\n  return format === '12h' || format === '24h';\n};\n\n/**\n * Get timezone offset for IST\n */\nexport const getISTOffset = (): string => {\n  const date = new Date();\n  const istTime = new Date(date.toLocaleString('en-US', { timeZone: IST_TIMEZONE }));\n  const utcTime = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }));\n  const offsetMs = istTime.getTime() - utcTime.getTime();\n  const offsetHours = offsetMs / (1000 * 60 * 60);\n  \n  return offsetHours >= 0 ? `+${offsetHours}:30` : `${offsetHours}:30`;\n};\n\n/**\n * Check if current time is in IST timezone\n */\nexport const isISTTimezone = (): boolean => {\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return timeZone === IST_TIMEZONE;\n  } catch {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}