{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { getImagesForCategories, preloadImages, getNextImage } from '../utils/imageLoader';\n\n/**\n * Custom hook for managing wallpaper rotation\n */\nexport const useWallpaperRotation = (categories, rotationInterval, wallpaperSize, enabled) => {\n  _s();\n  const [availableImages, setAvailableImages] = useState([]);\n  const [currentImage, setCurrentImage] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load images for selected categories\n  const loadImages = useCallback(async () => {\n    if (categories.length === 0) {\n      setAvailableImages([]);\n      setCurrentImage(null);\n      setCurrentIndex(0);\n      setIsLoading(false);\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n      const images = await getImagesForCategories(categories);\n      if (images.length === 0) {\n        console.warn('No images found for selected categories:', categories);\n        setAvailableImages([]);\n        setCurrentImage(null);\n        setCurrentIndex(0);\n      } else {\n        setAvailableImages(images);\n        setCurrentImage(images[0]);\n        setCurrentIndex(0);\n\n        // Preload images for smooth transitions\n        preloadImages(images.slice(0, 3)); // Preload first 3 images\n      }\n    } catch (err) {\n      console.error('Error loading wallpaper images:', err);\n      setError('Failed to load wallpaper images');\n      setAvailableImages([]);\n      setCurrentImage(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [categories]);\n\n  // Move to next image\n  const nextImage = useCallback(() => {\n    if (availableImages.length === 0) return;\n    const {\n      image,\n      nextIndex\n    } = getNextImage(availableImages, currentIndex);\n    setCurrentImage(image);\n    setCurrentIndex(nextIndex);\n\n    // Preload next few images\n    const preloadStart = (nextIndex + 1) % availableImages.length;\n    const imagesToPreload = [];\n    for (let i = 0; i < 2; i++) {\n      const preloadIndex = (preloadStart + i) % availableImages.length;\n      imagesToPreload.push(availableImages[preloadIndex]);\n    }\n    preloadImages(imagesToPreload);\n  }, [availableImages, currentIndex]);\n\n  // Set up rotation interval\n  useEffect(() => {\n    if (!enabled || availableImages.length <= 1) return;\n    const interval = setInterval(nextImage, rotationInterval);\n    return () => clearInterval(interval);\n  }, [enabled, availableImages.length, rotationInterval, nextImage]);\n\n  // Load images when categories change\n  useEffect(() => {\n    loadImages();\n  }, [loadImages]);\n\n  // Get CSS scale value based on wallpaper size\n  const getScaleValue = useCallback(() => {\n    switch (wallpaperSize) {\n      case 'small':\n        return 0.8;\n      case 'large':\n        return 1.2;\n      case 'medium':\n      default:\n        return 1.0;\n    }\n  }, [wallpaperSize]);\n  return {\n    currentImage,\n    availableImages,\n    currentIndex,\n    isLoading,\n    error,\n    nextImage,\n    scaleValue: getScaleValue(),\n    hasImages: availableImages.length > 0\n  };\n};\n_s(useWallpaperRotation, \"BzYwEZm5+Hf1jPli+iVW5GoZKuU=\");","map":{"version":3,"names":["useState","useEffect","useCallback","getImagesForCategories","preloadImages","getNextImage","useWallpaperRotation","categories","rotationInterval","wallpaperSize","enabled","_s","availableImages","setAvailableImages","currentImage","setCurrentImage","currentIndex","setCurrentIndex","isLoading","setIsLoading","error","setError","loadImages","length","images","console","warn","slice","err","nextImage","image","nextIndex","preloadStart","imagesToPreload","i","preloadIndex","push","interval","setInterval","clearInterval","getScaleValue","scaleValue","hasImages"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/hooks/useWallpaperRotation.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { WallpaperImage, WallpaperSize } from '../types';\nimport { getImagesForCategories, preloadImages, getNextImage } from '../utils/imageLoader';\n\n/**\n * Custom hook for managing wallpaper rotation\n */\nexport const useWallpaperRotation = (\n  categories: string[],\n  rotationInterval: number,\n  wallpaperSize: WallpaperSize,\n  enabled: boolean\n) => {\n  const [availableImages, setAvailableImages] = useState<WallpaperImage[]>([]);\n  const [currentImage, setCurrentImage] = useState<WallpaperImage | null>(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load images for selected categories\n  const loadImages = useCallback(async () => {\n    if (categories.length === 0) {\n      setAvailableImages([]);\n      setCurrentImage(null);\n      setCurrentIndex(0);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const images = await getImagesForCategories(categories);\n      \n      if (images.length === 0) {\n        console.warn('No images found for selected categories:', categories);\n        setAvailableImages([]);\n        setCurrentImage(null);\n        setCurrentIndex(0);\n      } else {\n        setAvailableImages(images);\n        setCurrentImage(images[0]);\n        setCurrentIndex(0);\n        \n        // Preload images for smooth transitions\n        preloadImages(images.slice(0, 3)); // Preload first 3 images\n      }\n    } catch (err) {\n      console.error('Error loading wallpaper images:', err);\n      setError('Failed to load wallpaper images');\n      setAvailableImages([]);\n      setCurrentImage(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [categories]);\n\n  // Move to next image\n  const nextImage = useCallback(() => {\n    if (availableImages.length === 0) return;\n    \n    const { image, nextIndex } = getNextImage(availableImages, currentIndex);\n    setCurrentImage(image);\n    setCurrentIndex(nextIndex);\n    \n    // Preload next few images\n    const preloadStart = (nextIndex + 1) % availableImages.length;\n    const imagesToPreload = [];\n    for (let i = 0; i < 2; i++) {\n      const preloadIndex = (preloadStart + i) % availableImages.length;\n      imagesToPreload.push(availableImages[preloadIndex]);\n    }\n    preloadImages(imagesToPreload);\n  }, [availableImages, currentIndex]);\n\n  // Set up rotation interval\n  useEffect(() => {\n    if (!enabled || availableImages.length <= 1) return;\n\n    const interval = setInterval(nextImage, rotationInterval);\n    return () => clearInterval(interval);\n  }, [enabled, availableImages.length, rotationInterval, nextImage]);\n\n  // Load images when categories change\n  useEffect(() => {\n    loadImages();\n  }, [loadImages]);\n\n  // Get CSS scale value based on wallpaper size\n  const getScaleValue = useCallback((): number => {\n    switch (wallpaperSize) {\n      case 'small':\n        return 0.8;\n      case 'large':\n        return 1.2;\n      case 'medium':\n      default:\n        return 1.0;\n    }\n  }, [wallpaperSize]);\n\n  return {\n    currentImage,\n    availableImages,\n    currentIndex,\n    isLoading,\n    error,\n    nextImage,\n    scaleValue: getScaleValue(),\n    hasImages: availableImages.length > 0,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}