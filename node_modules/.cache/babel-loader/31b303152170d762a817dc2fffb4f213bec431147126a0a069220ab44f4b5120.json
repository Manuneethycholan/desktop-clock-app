{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{getImagesWithFallback,preloadImages,getNextImage}from'../utils/imageLoader';/**\n * Custom hook for managing wallpaper rotation\n */export const useWallpaperRotation=(categories,rotationInterval,wallpaperSize,enabled)=>{const[availableImages,setAvailableImages]=useState([]);const[currentImage,setCurrentImage]=useState(null);const[currentIndex,setCurrentIndex]=useState(0);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);// Load images for selected categories\nconst loadImages=useCallback(async()=>{if(categories.length===0){setAvailableImages([]);setCurrentImage(null);setCurrentIndex(0);setIsLoading(false);setError(null);return;}try{setIsLoading(true);setError(null);const{images,errors}=await getImagesWithFallback(categories);if(errors.length>0){console.warn('Image loading errors:',errors);}if(images.length===0){const errorMessage=errors.length>0?\"No valid images found: \".concat(errors.join(', ')):'No images found for selected categories';console.warn(errorMessage);setError(errorMessage);setAvailableImages([]);setCurrentImage(null);setCurrentIndex(0);}else{setAvailableImages(images);setCurrentImage(images[0]);setCurrentIndex(0);// Preload images for smooth transitions with error handling\ntry{const validImages=await preloadImages(images.slice(0,3));if(validImages.length<3&&validImages.length<images.length){console.warn('Some images failed to preload, but continuing with available images');}}catch(preloadError){console.warn('Image preloading failed, but continuing with basic loading:',preloadError);}}}catch(err){console.error('Error loading wallpaper images:',err);setError(\"Failed to load wallpaper images: \".concat(err instanceof Error?err.message:'Unknown error'));setAvailableImages([]);setCurrentImage(null);setCurrentIndex(0);}finally{setIsLoading(false);}},[categories]);// Move to next image with error handling\nconst nextImage=useCallback(()=>{if(availableImages.length===0)return;try{const{image,nextIndex}=getNextImage(availableImages,currentIndex);setCurrentImage(image);setCurrentIndex(nextIndex);// Preload next few images with error handling\nconst preloadStart=(nextIndex+1)%availableImages.length;const imagesToPreload=[];for(let i=0;i<2;i++){const preloadIndex=(preloadStart+i)%availableImages.length;imagesToPreload.push(availableImages[preloadIndex]);}// Preload in background without blocking UI\npreloadImages(imagesToPreload).catch(error=>{console.warn('Background image preloading failed:',error);});}catch(error){console.error('Error switching to next image:',error);// Don't update state if there's an error, keep current image\n}},[availableImages,currentIndex]);// Set up rotation interval\nuseEffect(()=>{if(!enabled||availableImages.length<=1)return;const interval=setInterval(nextImage,rotationInterval);return()=>clearInterval(interval);},[enabled,availableImages.length,rotationInterval,nextImage]);// Load images when categories change\nuseEffect(()=>{loadImages();},[loadImages]);// Get CSS scale value based on wallpaper size\nconst getScaleValue=useCallback(()=>{switch(wallpaperSize){case'enlarged':return 1.3;case'normal':default:return 1.0;}},[wallpaperSize]);return{currentImage,availableImages,currentIndex,isLoading,error,nextImage,scaleValue:getScaleValue(),hasImages:availableImages.length>0};};","map":{"version":3,"names":["useState","useEffect","useCallback","getImagesWithFallback","preloadImages","getNextImage","useWallpaperRotation","categories","rotationInterval","wallpaperSize","enabled","availableImages","setAvailableImages","currentImage","setCurrentImage","currentIndex","setCurrentIndex","isLoading","setIsLoading","error","setError","loadImages","length","images","errors","console","warn","errorMessage","concat","join","validImages","slice","preloadError","err","Error","message","nextImage","image","nextIndex","preloadStart","imagesToPreload","i","preloadIndex","push","catch","interval","setInterval","clearInterval","getScaleValue","scaleValue","hasImages"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/hooks/useWallpaperRotation.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { WallpaperImage, WallpaperSize } from '../types';\nimport { getImagesWithFallback, preloadImages, getNextImage } from '../utils/imageLoader';\n\n/**\n * Custom hook for managing wallpaper rotation\n */\nexport const useWallpaperRotation = (\n  categories: string[],\n  rotationInterval: number,\n  wallpaperSize: WallpaperSize,\n  enabled: boolean\n) => {\n  const [availableImages, setAvailableImages] = useState<WallpaperImage[]>([]);\n  const [currentImage, setCurrentImage] = useState<WallpaperImage | null>(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load images for selected categories\n  const loadImages = useCallback(async () => {\n    if (categories.length === 0) {\n      setAvailableImages([]);\n      setCurrentImage(null);\n      setCurrentIndex(0);\n      setIsLoading(false);\n      setError(null);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const { images, errors } = await getImagesWithFallback(categories);\n      \n      if (errors.length > 0) {\n        console.warn('Image loading errors:', errors);\n      }\n      \n      if (images.length === 0) {\n        const errorMessage = errors.length > 0 \n          ? `No valid images found: ${errors.join(', ')}`\n          : 'No images found for selected categories';\n        console.warn(errorMessage);\n        setError(errorMessage);\n        setAvailableImages([]);\n        setCurrentImage(null);\n        setCurrentIndex(0);\n      } else {\n        setAvailableImages(images);\n        setCurrentImage(images[0]);\n        setCurrentIndex(0);\n        \n        // Preload images for smooth transitions with error handling\n        try {\n          const validImages = await preloadImages(images.slice(0, 3));\n          if (validImages.length < 3 && validImages.length < images.length) {\n            console.warn('Some images failed to preload, but continuing with available images');\n          }\n        } catch (preloadError) {\n          console.warn('Image preloading failed, but continuing with basic loading:', preloadError);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading wallpaper images:', err);\n      setError(`Failed to load wallpaper images: ${err instanceof Error ? err.message : 'Unknown error'}`);\n      setAvailableImages([]);\n      setCurrentImage(null);\n      setCurrentIndex(0);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [categories]);\n\n  // Move to next image with error handling\n  const nextImage = useCallback(() => {\n    if (availableImages.length === 0) return;\n    \n    try {\n      const { image, nextIndex } = getNextImage(availableImages, currentIndex);\n      setCurrentImage(image);\n      setCurrentIndex(nextIndex);\n      \n      // Preload next few images with error handling\n      const preloadStart = (nextIndex + 1) % availableImages.length;\n      const imagesToPreload = [];\n      for (let i = 0; i < 2; i++) {\n        const preloadIndex = (preloadStart + i) % availableImages.length;\n        imagesToPreload.push(availableImages[preloadIndex]);\n      }\n      \n      // Preload in background without blocking UI\n      preloadImages(imagesToPreload).catch(error => {\n        console.warn('Background image preloading failed:', error);\n      });\n    } catch (error) {\n      console.error('Error switching to next image:', error);\n      // Don't update state if there's an error, keep current image\n    }\n  }, [availableImages, currentIndex]);\n\n  // Set up rotation interval\n  useEffect(() => {\n    if (!enabled || availableImages.length <= 1) return;\n\n    const interval = setInterval(nextImage, rotationInterval);\n    return () => clearInterval(interval);\n  }, [enabled, availableImages.length, rotationInterval, nextImage]);\n\n  // Load images when categories change\n  useEffect(() => {\n    loadImages();\n  }, [loadImages]);\n\n  // Get CSS scale value based on wallpaper size\n  const getScaleValue = useCallback((): number => {\n    switch (wallpaperSize) {\n      case 'enlarged':\n        return 1.3;\n      case 'normal':\n      default:\n        return 1.0;\n    }\n  }, [wallpaperSize]);\n\n  return {\n    currentImage,\n    availableImages,\n    currentIndex,\n    isLoading,\n    error,\n    nextImage,\n    scaleValue: getScaleValue(),\n    hasImages: availableImages.length > 0,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}