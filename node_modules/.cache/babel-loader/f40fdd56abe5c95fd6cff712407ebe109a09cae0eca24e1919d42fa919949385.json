{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Clock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { formatTimeForDisplay, getCurrentISTTime } from '../utils/timeUtils';\nimport { TIME_UPDATE_INTERVAL, CSS_CLASSES } from '../utils/constants';\nimport '../styles/Clock.css';\n\n/**\n * Clock component that displays IST time in the specified two-line format\n * Line 1: \"HH:MM\" on left, \"AM/PM SS\" on right\n * Line 2: \"Day - Month Date\"\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Clock = ({\n  isFullScreen,\n  position,\n  timeFormat,\n  fontColor,\n  fontFamily\n}) => {\n  _s();\n  const [currentTime, setCurrentTime] = useState(() => {\n    try {\n      return getCurrentISTTime();\n    } catch (error) {\n      console.error('Error initializing clock time:', error);\n      return new Date();\n    }\n  });\n  const [clockDisplay, setClockDisplay] = useState(() => {\n    try {\n      return formatTimeForDisplay(getCurrentISTTime(), timeFormat);\n    } catch (error) {\n      console.error('Error initializing clock display:', error);\n      return {\n        timeLeft: '00:00',\n        timeRight: 'AM 00',\n        dateBottom: 'Error - Loading...'\n      };\n    }\n  });\n  const [hasError, setHasError] = useState(false);\n\n  // Update time display with error handling\n  const updateTime = useCallback(() => {\n    try {\n      const newTime = getCurrentISTTime();\n      const newDisplay = formatTimeForDisplay(newTime, timeFormat);\n      setCurrentTime(newTime);\n      setClockDisplay(newDisplay);\n\n      // Clear error state if update succeeds\n      if (hasError) {\n        setHasError(false);\n      }\n    } catch (error) {\n      console.error('Error updating clock time:', error);\n      setHasError(true);\n\n      // Set error display\n      setClockDisplay({\n        timeLeft: 'ERROR',\n        timeRight: '00',\n        dateBottom: 'Time Update Failed'\n      });\n    }\n  }, [timeFormat, hasError]);\n\n  // Set up time update interval with error recovery\n  useEffect(() => {\n    let interval;\n    try {\n      interval = setInterval(updateTime, TIME_UPDATE_INTERVAL);\n\n      // Update immediately on mount\n      updateTime();\n    } catch (error) {\n      console.error('Error setting up clock interval:', error);\n      setHasError(true);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [updateTime]);\n\n  // Update display when time format changes\n  useEffect(() => {\n    try {\n      const newDisplay = formatTimeForDisplay(currentTime, timeFormat);\n      setClockDisplay(newDisplay);\n    } catch (error) {\n      console.error('Error updating time format:', error);\n      setHasError(true);\n    }\n  }, [timeFormat, currentTime]);\n\n  // Determine CSS classes based on props\n  const getClockClasses = () => {\n    const baseClass = CSS_CLASSES.CLOCK_CONTAINER;\n    const positionClass = isFullScreen ? CSS_CLASSES.CLOCK_FULLSCREEN : CSS_CLASSES.CLOCK_BOTTOM_LEFT;\n    return `${baseClass} ${positionClass}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${getClockClasses()} ${hasError ? 'clock-error' : ''}`,\n    style: {\n      color: fontColor,\n      fontFamily: fontFamily\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-time-line\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"clock-time-left\",\n        children: clockDisplay.timeLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"clock-time-right\",\n        children: clockDisplay.timeRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-date-line\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"clock-date\",\n        children: clockDisplay.dateBottom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-error-indicator\",\n      title: \"Clock update error - check console\",\n      children: \"\\u26A0\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Clock, \"H84ZHk2AVkNyEIISLom0eGDaG6I=\");\n_c = Clock;\nexport default Clock;\nvar _c;\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","formatTimeForDisplay","getCurrentISTTime","TIME_UPDATE_INTERVAL","CSS_CLASSES","jsxDEV","_jsxDEV","Clock","isFullScreen","position","timeFormat","fontColor","fontFamily","_s","currentTime","setCurrentTime","error","console","Date","clockDisplay","setClockDisplay","timeLeft","timeRight","dateBottom","hasError","setHasError","updateTime","newTime","newDisplay","interval","setInterval","clearInterval","getClockClasses","baseClass","CLOCK_CONTAINER","positionClass","CLOCK_FULLSCREEN","CLOCK_BOTTOM_LEFT","className","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/Clock.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ClockProps, ClockDisplay } from '../types';\nimport { formatTimeForDisplay, getCurrentISTTime } from '../utils/timeUtils';\nimport { TIME_UPDATE_INTERVAL, CSS_CLASSES } from '../utils/constants';\nimport '../styles/Clock.css';\n\n/**\n * Clock component that displays IST time in the specified two-line format\n * Line 1: \"HH:MM\" on left, \"AM/PM SS\" on right\n * Line 2: \"Day - Month Date\"\n */\nconst Clock: React.FC<ClockProps> = ({ \n  isFullScreen, \n  position, \n  timeFormat,\n  fontColor,\n  fontFamily\n}) => {\n  const [currentTime, setCurrentTime] = useState<Date>(() => {\n    try {\n      return getCurrentISTTime();\n    } catch (error) {\n      console.error('Error initializing clock time:', error);\n      return new Date();\n    }\n  });\n  \n  const [clockDisplay, setClockDisplay] = useState<ClockDisplay>(() => {\n    try {\n      return formatTimeForDisplay(getCurrentISTTime(), timeFormat);\n    } catch (error) {\n      console.error('Error initializing clock display:', error);\n      return {\n        timeLeft: '00:00',\n        timeRight: 'AM 00',\n        dateBottom: 'Error - Loading...',\n      };\n    }\n  });\n\n  const [hasError, setHasError] = useState(false);\n\n  // Update time display with error handling\n  const updateTime = useCallback(() => {\n    try {\n      const newTime = getCurrentISTTime();\n      const newDisplay = formatTimeForDisplay(newTime, timeFormat);\n      \n      setCurrentTime(newTime);\n      setClockDisplay(newDisplay);\n      \n      // Clear error state if update succeeds\n      if (hasError) {\n        setHasError(false);\n      }\n    } catch (error) {\n      console.error('Error updating clock time:', error);\n      setHasError(true);\n      \n      // Set error display\n      setClockDisplay({\n        timeLeft: 'ERROR',\n        timeRight: '00',\n        dateBottom: 'Time Update Failed',\n      });\n    }\n  }, [timeFormat, hasError]);\n\n  // Set up time update interval with error recovery\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    try {\n      interval = setInterval(updateTime, TIME_UPDATE_INTERVAL);\n      \n      // Update immediately on mount\n      updateTime();\n    } catch (error) {\n      console.error('Error setting up clock interval:', error);\n      setHasError(true);\n    }\n    \n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [updateTime]);\n\n  // Update display when time format changes\n  useEffect(() => {\n    try {\n      const newDisplay = formatTimeForDisplay(currentTime, timeFormat);\n      setClockDisplay(newDisplay);\n    } catch (error) {\n      console.error('Error updating time format:', error);\n      setHasError(true);\n    }\n  }, [timeFormat, currentTime]);\n\n  // Determine CSS classes based on props\n  const getClockClasses = (): string => {\n    const baseClass = CSS_CLASSES.CLOCK_CONTAINER;\n    const positionClass = isFullScreen \n      ? CSS_CLASSES.CLOCK_FULLSCREEN \n      : CSS_CLASSES.CLOCK_BOTTOM_LEFT;\n    \n    return `${baseClass} ${positionClass}`;\n  };\n\n  return (\n    <div \n      className={`${getClockClasses()} ${hasError ? 'clock-error' : ''}`}\n      style={{\n        color: fontColor,\n        fontFamily: fontFamily\n      }}\n    >\n      <div className=\"clock-time-line\">\n        <span className=\"clock-time-left\">{clockDisplay.timeLeft}</span>\n        <span className=\"clock-time-right\">{clockDisplay.timeRight}</span>\n      </div>\n      <div className=\"clock-date-line\">\n        <span className=\"clock-date\">{clockDisplay.dateBottom}</span>\n      </div>\n      {hasError && (\n        <div className=\"clock-error-indicator\" title=\"Clock update error - check console\">\n          ⚠️\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Clock;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAE/D,SAASC,oBAAoB,EAAEC,iBAAiB,QAAQ,oBAAoB;AAC5E,SAASC,oBAAoB,EAAEC,WAAW,QAAQ,oBAAoB;AACtE,OAAO,qBAAqB;;AAE5B;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,KAA2B,GAAGA,CAAC;EACnCC,YAAY;EACZC,QAAQ;EACRC,UAAU;EACVC,SAAS;EACTC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAO,MAAM;IACzD,IAAI;MACF,OAAOI,iBAAiB,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,IAAIE,IAAI,CAAC,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAe,MAAM;IACnE,IAAI;MACF,OAAOG,oBAAoB,CAACC,iBAAiB,CAAC,CAAC,EAAEQ,UAAU,CAAC;IAC9D,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO;QACLK,QAAQ,EAAE,OAAO;QACjBC,SAAS,EAAE,OAAO;QAClBC,UAAU,EAAE;MACd,CAAC;IACH;EACF,CAAC,CAAC;EAEF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAM4B,UAAU,GAAG1B,WAAW,CAAC,MAAM;IACnC,IAAI;MACF,MAAM2B,OAAO,GAAGzB,iBAAiB,CAAC,CAAC;MACnC,MAAM0B,UAAU,GAAG3B,oBAAoB,CAAC0B,OAAO,EAAEjB,UAAU,CAAC;MAE5DK,cAAc,CAACY,OAAO,CAAC;MACvBP,eAAe,CAACQ,UAAU,CAAC;;MAE3B;MACA,IAAIJ,QAAQ,EAAE;QACZC,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDS,WAAW,CAAC,IAAI,CAAC;;MAEjB;MACAL,eAAe,CAAC;QACdC,QAAQ,EAAE,OAAO;QACjBC,SAAS,EAAE,IAAI;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACb,UAAU,EAAEc,QAAQ,CAAC,CAAC;;EAE1B;EACAzB,SAAS,CAAC,MAAM;IACd,IAAI8B,QAAwB;IAE5B,IAAI;MACFA,QAAQ,GAAGC,WAAW,CAACJ,UAAU,EAAEvB,oBAAoB,CAAC;;MAExD;MACAuB,UAAU,CAAC,CAAC;IACd,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDS,WAAW,CAAC,IAAI,CAAC;IACnB;IAEA,OAAO,MAAM;MACX,IAAII,QAAQ,EAAE;QACZE,aAAa,CAACF,QAAQ,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;;EAEhB;EACA3B,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAM6B,UAAU,GAAG3B,oBAAoB,CAACa,WAAW,EAAEJ,UAAU,CAAC;MAChEU,eAAe,CAACQ,UAAU,CAAC;IAC7B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDS,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACf,UAAU,EAAEI,WAAW,CAAC,CAAC;;EAE7B;EACA,MAAMkB,eAAe,GAAGA,CAAA,KAAc;IACpC,MAAMC,SAAS,GAAG7B,WAAW,CAAC8B,eAAe;IAC7C,MAAMC,aAAa,GAAG3B,YAAY,GAC9BJ,WAAW,CAACgC,gBAAgB,GAC5BhC,WAAW,CAACiC,iBAAiB;IAEjC,OAAO,GAAGJ,SAAS,IAAIE,aAAa,EAAE;EACxC,CAAC;EAED,oBACE7B,OAAA;IACEgC,SAAS,EAAE,GAAGN,eAAe,CAAC,CAAC,IAAIR,QAAQ,GAAG,aAAa,GAAG,EAAE,EAAG;IACnEe,KAAK,EAAE;MACLC,KAAK,EAAE7B,SAAS;MAChBC,UAAU,EAAEA;IACd,CAAE;IAAA6B,QAAA,gBAEFnC,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAG,QAAA,gBAC9BnC,OAAA;QAAMgC,SAAS,EAAC,iBAAiB;QAAAG,QAAA,EAAEtB,YAAY,CAACE;MAAQ;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAChEvC,OAAA;QAAMgC,SAAS,EAAC,kBAAkB;QAAAG,QAAA,EAAEtB,YAAY,CAACG;MAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,eACNvC,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAG,QAAA,eAC9BnC,OAAA;QAAMgC,SAAS,EAAC,YAAY;QAAAG,QAAA,EAAEtB,YAAY,CAACI;MAAU;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,EACLrB,QAAQ,iBACPlB,OAAA;MAAKgC,SAAS,EAAC,uBAAuB;MAACQ,KAAK,EAAC,oCAAoC;MAAAL,QAAA,EAAC;IAElF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CAzHIN,KAA2B;AAAAwC,EAAA,GAA3BxC,KAA2B;AA2HjC,eAAeA,KAAK;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}