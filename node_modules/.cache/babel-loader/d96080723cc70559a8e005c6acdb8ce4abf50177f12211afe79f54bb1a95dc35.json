{"ast":null,"code":"import { IST_TIMEZONE } from './constants';\n\n/**\n * Utility functions for time formatting and IST conversion\n */\n\n/**\n * Get current IST time as Date object\n */\nexport const getCurrentISTTime = () => {\n  return new Date();\n};\n\n/**\n * Format time for display according to the specified format\n */\nexport const formatTimeForDisplay = (date, timeFormat) => {\n  try {\n    var _parts$find, _parts$find2, _parts$find3, _parts$find4, _parts$find5, _parts$find6, _parts$find7;\n    // Get IST time components\n    const istOptions = {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric'\n    };\n    const formatter = new Intl.DateTimeFormat('en-IN', istOptions);\n    const parts = formatter.formatToParts(date);\n\n    // Extract parts\n    const hour = ((_parts$find = parts.find(part => part.type === 'hour')) === null || _parts$find === void 0 ? void 0 : _parts$find.value) || '00';\n    const minute = ((_parts$find2 = parts.find(part => part.type === 'minute')) === null || _parts$find2 === void 0 ? void 0 : _parts$find2.value) || '00';\n    const second = ((_parts$find3 = parts.find(part => part.type === 'second')) === null || _parts$find3 === void 0 ? void 0 : _parts$find3.value) || '00';\n    const dayPeriod = ((_parts$find4 = parts.find(part => part.type === 'dayPeriod')) === null || _parts$find4 === void 0 ? void 0 : _parts$find4.value) || '';\n    const weekday = ((_parts$find5 = parts.find(part => part.type === 'weekday')) === null || _parts$find5 === void 0 ? void 0 : _parts$find5.value) || '';\n    const month = ((_parts$find6 = parts.find(part => part.type === 'month')) === null || _parts$find6 === void 0 ? void 0 : _parts$find6.value) || '';\n    const day = ((_parts$find7 = parts.find(part => part.type === 'day')) === null || _parts$find7 === void 0 ? void 0 : _parts$find7.value) || '';\n\n    // Format according to the design: \"10:03\" \"PM 24\" \"Friday - September 12\"\n    const timeLeft = `${hour}:${minute}`;\n    const timeRight = timeFormat === '12h' ? `${dayPeriod} ${second}` : second;\n    const dateBottom = `${weekday} - ${month} ${day}`;\n    return {\n      timeLeft,\n      timeRight,\n      dateBottom\n    };\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    // Fallback formatting\n    const fallbackTime = date.toLocaleTimeString('en-IN', {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h'\n    });\n    return {\n      timeLeft: fallbackTime.split(' ')[0] || '00:00',\n      timeRight: timeFormat === '12h' ? fallbackTime.split(' ')[1] || 'AM' : '00',\n      dateBottom: date.toLocaleDateString('en-IN', {\n        timeZone: IST_TIMEZONE,\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric'\n      })\n    };\n  }\n};\n\n/**\n * Validate if a time format is supported\n */\nexport const isValidTimeFormat = format => {\n  return format === '12h' || format === '24h';\n};\n\n/**\n * Get timezone offset for IST\n */\nexport const getISTOffset = () => {\n  const date = new Date();\n  const istTime = new Date(date.toLocaleString('en-US', {\n    timeZone: IST_TIMEZONE\n  }));\n  const utcTime = new Date(date.toLocaleString('en-US', {\n    timeZone: 'UTC'\n  }));\n  const offsetMs = istTime.getTime() - utcTime.getTime();\n  const offsetHours = offsetMs / (1000 * 60 * 60);\n  return offsetHours >= 0 ? `+${offsetHours}:30` : `${offsetHours}:30`;\n};\n\n/**\n * Check if current time is in IST timezone\n */\nexport const isISTTimezone = () => {\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return timeZone === IST_TIMEZONE;\n  } catch {\n    return false;\n  }\n};","map":{"version":3,"names":["IST_TIMEZONE","getCurrentISTTime","Date","formatTimeForDisplay","date","timeFormat","_parts$find","_parts$find2","_parts$find3","_parts$find4","_parts$find5","_parts$find6","_parts$find7","istOptions","timeZone","hour12","hour","minute","second","weekday","month","day","formatter","Intl","DateTimeFormat","parts","formatToParts","find","part","type","value","dayPeriod","timeLeft","timeRight","dateBottom","error","console","fallbackTime","toLocaleTimeString","split","toLocaleDateString","isValidTimeFormat","format","getISTOffset","istTime","toLocaleString","utcTime","offsetMs","getTime","offsetHours","isISTTimezone","resolvedOptions"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/timeUtils.ts"],"sourcesContent":["import { ClockDisplay, TimeFormat } from '../types';\nimport { IST_TIMEZONE } from './constants';\n\n/**\n * Utility functions for time formatting and IST conversion\n */\n\n/**\n * Get current IST time as Date object\n */\nexport const getCurrentISTTime = (): Date => {\n  return new Date();\n};\n\n/**\n * Format time for display according to the specified format\n */\nexport const formatTimeForDisplay = (date: Date, timeFormat: TimeFormat): ClockDisplay => {\n  try {\n    // Get IST time components\n    const istOptions: Intl.DateTimeFormatOptions = {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    const formatter = new Intl.DateTimeFormat('en-IN', istOptions);\n    const parts = formatter.formatToParts(date);\n\n    // Extract parts\n    const hour = parts.find(part => part.type === 'hour')?.value || '00';\n    const minute = parts.find(part => part.type === 'minute')?.value || '00';\n    const second = parts.find(part => part.type === 'second')?.value || '00';\n    const dayPeriod = parts.find(part => part.type === 'dayPeriod')?.value || '';\n    const weekday = parts.find(part => part.type === 'weekday')?.value || '';\n    const month = parts.find(part => part.type === 'month')?.value || '';\n    const day = parts.find(part => part.type === 'day')?.value || '';\n\n    // Format according to the design: \"10:03\" \"PM 24\" \"Friday - September 12\"\n    const timeLeft = `${hour}:${minute}`;\n    const timeRight = timeFormat === '12h' ? `${dayPeriod} ${second}` : second;\n    const dateBottom = `${weekday} - ${month} ${day}`;\n\n    return {\n      timeLeft,\n      timeRight,\n      dateBottom,\n    };\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    // Fallback formatting\n    const fallbackTime = date.toLocaleTimeString('en-IN', {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n    });\n    \n    return {\n      timeLeft: fallbackTime.split(' ')[0] || '00:00',\n      timeRight: timeFormat === '12h' ? fallbackTime.split(' ')[1] || 'AM' : '00',\n      dateBottom: date.toLocaleDateString('en-IN', {\n        timeZone: IST_TIMEZONE,\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n      }),\n    };\n  }\n};\n\n/**\n * Validate if a time format is supported\n */\nexport const isValidTimeFormat = (format: string): format is TimeFormat => {\n  return format === '12h' || format === '24h';\n};\n\n/**\n * Get timezone offset for IST\n */\nexport const getISTOffset = (): string => {\n  const date = new Date();\n  const istTime = new Date(date.toLocaleString('en-US', { timeZone: IST_TIMEZONE }));\n  const utcTime = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }));\n  const offsetMs = istTime.getTime() - utcTime.getTime();\n  const offsetHours = offsetMs / (1000 * 60 * 60);\n  \n  return offsetHours >= 0 ? `+${offsetHours}:30` : `${offsetHours}:30`;\n};\n\n/**\n * Check if current time is in IST timezone\n */\nexport const isISTTimezone = (): boolean => {\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return timeZone === IST_TIMEZONE;\n  } catch {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}