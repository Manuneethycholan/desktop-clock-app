{"ast":null,"code":"import _objectSpread from\"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useCallback,useEffect}from'react';import Clock from'./Clock';import Wallpaper from'./Wallpaper';import Settings from'./Settings';import{useLocalStorage}from'../hooks/useLocalStorage';import{useMouseActivity}from'../hooks/useMouseActivity';import{DEFAULT_SETTINGS}from'../utils/constants';import'../styles/App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Load settings from localStorage\nconst{settings:storedSettings,isLoaded,saveSettings}=useLocalStorage();// Application state - initialize with defaults, will be updated when settings load\nconst[appState,setAppState]=useState({clockEnabled:DEFAULT_SETTINGS.clockEnabled,wallpaperEnabled:DEFAULT_SETTINGS.wallpaperEnabled,selectedCategories:DEFAULT_SETTINGS.selectedCategories,displayMode:getDisplayMode(DEFAULT_SETTINGS.clockEnabled,DEFAULT_SETTINGS.wallpaperEnabled),settingsVisible:false,wallpaperSize:DEFAULT_SETTINGS.wallpaperSize,rotationInterval:DEFAULT_SETTINGS.rotationInterval,timeFormat:DEFAULT_SETTINGS.timeFormat});// Mouse activity detection for settings panel\nconst{isActive}=useMouseActivity();// Update app state when stored settings are loaded\nuseEffect(()=>{if(isLoaded){setAppState(prev=>_objectSpread(_objectSpread({},prev),{},{clockEnabled:storedSettings.clockEnabled,wallpaperEnabled:storedSettings.wallpaperEnabled,selectedCategories:storedSettings.selectedCategories,displayMode:getDisplayMode(storedSettings.clockEnabled,storedSettings.wallpaperEnabled),wallpaperSize:storedSettings.wallpaperSize,rotationInterval:storedSettings.rotationInterval,timeFormat:storedSettings.timeFormat}));}},[isLoaded,storedSettings]);// Update settings visible state based on mouse activity\nuseEffect(()=>{setAppState(prev=>_objectSpread(_objectSpread({},prev),{},{settingsVisible:isActive}));},[isActive]);// Handle settings changes\nconst handleSettingsChange=useCallback(newSettings=>{const updatedSettings=_objectSpread(_objectSpread({},storedSettings),newSettings);// Update stored settings\nsaveSettings(updatedSettings);// Update app state immediately for responsive UI\nsetAppState(prev=>_objectSpread(_objectSpread({},prev),{},{clockEnabled:updatedSettings.clockEnabled,wallpaperEnabled:updatedSettings.wallpaperEnabled,selectedCategories:updatedSettings.selectedCategories,displayMode:getDisplayMode(updatedSettings.clockEnabled,updatedSettings.wallpaperEnabled),wallpaperSize:updatedSettings.wallpaperSize,rotationInterval:updatedSettings.rotationInterval,timeFormat:updatedSettings.timeFormat}));},[storedSettings,saveSettings]);// Determine if clock should be rendered\nconst shouldRenderClock=appState.displayMode==='clock-only'||appState.displayMode==='both';// Determine if wallpaper should be rendered\nconst shouldRenderWallpaper=appState.displayMode==='wallpaper-only'||appState.displayMode==='both';// Determine clock positioning and sizing\nconst isClockFullScreen=appState.displayMode==='clock-only';const clockPosition=isClockFullScreen?'center':'bottom-left';// Don't render until settings are loaded to prevent flash of default content\nif(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{className:\"app app-loading\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading-message\",children:\"Loading...\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"app \".concat(getAppModeClass(appState.displayMode)),children:[shouldRenderWallpaper&&/*#__PURE__*/_jsx(Wallpaper,{categories:appState.selectedCategories,rotationInterval:appState.rotationInterval,wallpaperSize:appState.wallpaperSize,enabled:appState.wallpaperEnabled}),shouldRenderClock&&/*#__PURE__*/_jsx(Clock,{isFullScreen:isClockFullScreen,position:clockPosition,timeFormat:appState.timeFormat}),/*#__PURE__*/_jsx(Settings,{isVisible:appState.settingsVisible,onSettingsChange:handleSettingsChange,currentSettings:storedSettings})]});}/**\n * Determine display mode based on clock and wallpaper enabled states\n */function getDisplayMode(clockEnabled,wallpaperEnabled){if(clockEnabled&&wallpaperEnabled){return'both';}else if(clockEnabled&&!wallpaperEnabled){return'clock-only';}else if(!clockEnabled&&wallpaperEnabled){return'wallpaper-only';}else{// Default to clock-only if both are disabled\nreturn'clock-only';}}/**\n * Get CSS class for app container based on display mode\n */function getAppModeClass(displayMode){return\"app-mode-\".concat(displayMode);}export default App;","map":{"version":3,"names":["React","useState","useCallback","useEffect","Clock","Wallpaper","Settings","useLocalStorage","useMouseActivity","DEFAULT_SETTINGS","jsx","_jsx","jsxs","_jsxs","App","settings","storedSettings","isLoaded","saveSettings","appState","setAppState","clockEnabled","wallpaperEnabled","selectedCategories","displayMode","getDisplayMode","settingsVisible","wallpaperSize","rotationInterval","timeFormat","isActive","prev","_objectSpread","handleSettingsChange","newSettings","updatedSettings","shouldRenderClock","shouldRenderWallpaper","isClockFullScreen","clockPosition","className","children","concat","getAppModeClass","categories","enabled","isFullScreen","position","isVisible","onSettingsChange","currentSettings"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\nimport { AppState, AppSettings, DisplayMode } from '../types';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport '../styles/App.css';\n\nfunction App() {\n  // Load settings from localStorage\n  const { settings: storedSettings, isLoaded, saveSettings } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState<AppState>({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: getDisplayMode(DEFAULT_SETTINGS.clockEnabled, DEFAULT_SETTINGS.wallpaperEnabled),\n    settingsVisible: false,\n    wallpaperSize: DEFAULT_SETTINGS.wallpaperSize,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat,\n  });\n\n  // Mouse activity detection for settings panel\n  const { isActive } = useMouseActivity();\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: getDisplayMode(storedSettings.clockEnabled, storedSettings.wallpaperEnabled),\n        wallpaperSize: storedSettings.wallpaperSize,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat,\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback((newSettings: Partial<AppSettings>) => {\n    const updatedSettings = { ...storedSettings, ...newSettings };\n    \n    // Update stored settings\n    saveSettings(updatedSettings);\n    \n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: getDisplayMode(updatedSettings.clockEnabled, updatedSettings.wallpaperEnabled),\n      wallpaperSize: updatedSettings.wallpaperSize,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat,\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine if clock should be rendered\n  const shouldRenderClock = appState.displayMode === 'clock-only' || appState.displayMode === 'both';\n  \n  // Determine if wallpaper should be rendered\n  const shouldRenderWallpaper = appState.displayMode === 'wallpaper-only' || appState.displayMode === 'both';\n  \n  // Determine clock positioning and sizing\n  const isClockFullScreen = appState.displayMode === 'clock-only';\n  const clockPosition = isClockFullScreen ? 'center' : 'bottom-left';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return (\n      <div className=\"app app-loading\">\n        <div className=\"loading-message\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${getAppModeClass(appState.displayMode)}`}>\n      {/* Wallpaper component - renders behind everything */}\n      {shouldRenderWallpaper && (\n        <Wallpaper\n          categories={appState.selectedCategories}\n          rotationInterval={appState.rotationInterval}\n          wallpaperSize={appState.wallpaperSize}\n          enabled={appState.wallpaperEnabled}\n        />\n      )}\n\n      {/* Clock component - positioned based on display mode */}\n      {shouldRenderClock && (\n        <Clock\n          isFullScreen={isClockFullScreen}\n          position={clockPosition}\n          timeFormat={appState.timeFormat}\n        />\n      )}\n\n      {/* Settings panel - shows on mouse activity */}\n      <Settings\n        isVisible={appState.settingsVisible}\n        onSettingsChange={handleSettingsChange}\n        currentSettings={storedSettings}\n      />\n    </div>\n  );\n}\n\n/**\n * Determine display mode based on clock and wallpaper enabled states\n */\nfunction getDisplayMode(clockEnabled: boolean, wallpaperEnabled: boolean): DisplayMode {\n  if (clockEnabled && wallpaperEnabled) {\n    return 'both';\n  } else if (clockEnabled && !wallpaperEnabled) {\n    return 'clock-only';\n  } else if (!clockEnabled && wallpaperEnabled) {\n    return 'wallpaper-only';\n  } else {\n    // Default to clock-only if both are disabled\n    return 'clock-only';\n  }\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\nfunction getAppModeClass(displayMode: DisplayMode): string {\n  return `app-mode-${displayMode}`;\n}\n\nexport default App;"],"mappings":"wJAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAC/D,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,OAASC,eAAe,KAAQ,0BAA0B,CAC1D,OAASC,gBAAgB,KAAQ,2BAA2B,CAE5D,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,MAAO,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA,KAAM,CAAEC,QAAQ,CAAEC,cAAc,CAAEC,QAAQ,CAAEC,YAAa,CAAC,CAAGX,eAAe,CAAC,CAAC,CAE9E;AACA,KAAM,CAACY,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAAW,CACjDoB,YAAY,CAAEZ,gBAAgB,CAACY,YAAY,CAC3CC,gBAAgB,CAAEb,gBAAgB,CAACa,gBAAgB,CACnDC,kBAAkB,CAAEd,gBAAgB,CAACc,kBAAkB,CACvDC,WAAW,CAAEC,cAAc,CAAChB,gBAAgB,CAACY,YAAY,CAAEZ,gBAAgB,CAACa,gBAAgB,CAAC,CAC7FI,eAAe,CAAE,KAAK,CACtBC,aAAa,CAAElB,gBAAgB,CAACkB,aAAa,CAC7CC,gBAAgB,CAAEnB,gBAAgB,CAACmB,gBAAgB,CACnDC,UAAU,CAAEpB,gBAAgB,CAACoB,UAC/B,CAAC,CAAC,CAEF;AACA,KAAM,CAAEC,QAAS,CAAC,CAAGtB,gBAAgB,CAAC,CAAC,CAEvC;AACAL,SAAS,CAAC,IAAM,CACd,GAAIc,QAAQ,CAAE,CACZG,WAAW,CAACW,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPV,YAAY,CAAEL,cAAc,CAACK,YAAY,CACzCC,gBAAgB,CAAEN,cAAc,CAACM,gBAAgB,CACjDC,kBAAkB,CAAEP,cAAc,CAACO,kBAAkB,CACrDC,WAAW,CAAEC,cAAc,CAACT,cAAc,CAACK,YAAY,CAAEL,cAAc,CAACM,gBAAgB,CAAC,CACzFK,aAAa,CAAEX,cAAc,CAACW,aAAa,CAC3CC,gBAAgB,CAAEZ,cAAc,CAACY,gBAAgB,CACjDC,UAAU,CAAEb,cAAc,CAACa,UAAU,EACrC,CAAC,CACL,CACF,CAAC,CAAE,CAACZ,QAAQ,CAAED,cAAc,CAAC,CAAC,CAE9B;AACAb,SAAS,CAAC,IAAM,CACdiB,WAAW,CAACW,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPL,eAAe,CAAEI,QAAQ,EACzB,CAAC,CACL,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAG,oBAAoB,CAAG/B,WAAW,CAAEgC,WAAiC,EAAK,CAC9E,KAAM,CAAAC,eAAe,CAAAH,aAAA,CAAAA,aAAA,IAAQhB,cAAc,EAAKkB,WAAW,CAAE,CAE7D;AACAhB,YAAY,CAACiB,eAAe,CAAC,CAE7B;AACAf,WAAW,CAACW,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPV,YAAY,CAAEc,eAAe,CAACd,YAAY,CAC1CC,gBAAgB,CAAEa,eAAe,CAACb,gBAAgB,CAClDC,kBAAkB,CAAEY,eAAe,CAACZ,kBAAkB,CACtDC,WAAW,CAAEC,cAAc,CAACU,eAAe,CAACd,YAAY,CAAEc,eAAe,CAACb,gBAAgB,CAAC,CAC3FK,aAAa,CAAEQ,eAAe,CAACR,aAAa,CAC5CC,gBAAgB,CAAEO,eAAe,CAACP,gBAAgB,CAClDC,UAAU,CAAEM,eAAe,CAACN,UAAU,EACtC,CAAC,CACL,CAAC,CAAE,CAACb,cAAc,CAAEE,YAAY,CAAC,CAAC,CAElC;AACA,KAAM,CAAAkB,iBAAiB,CAAGjB,QAAQ,CAACK,WAAW,GAAK,YAAY,EAAIL,QAAQ,CAACK,WAAW,GAAK,MAAM,CAElG;AACA,KAAM,CAAAa,qBAAqB,CAAGlB,QAAQ,CAACK,WAAW,GAAK,gBAAgB,EAAIL,QAAQ,CAACK,WAAW,GAAK,MAAM,CAE1G;AACA,KAAM,CAAAc,iBAAiB,CAAGnB,QAAQ,CAACK,WAAW,GAAK,YAAY,CAC/D,KAAM,CAAAe,aAAa,CAAGD,iBAAiB,CAAG,QAAQ,CAAG,aAAa,CAElE;AACA,GAAI,CAACrB,QAAQ,CAAE,CACb,mBACEN,IAAA,QAAK6B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9B9B,IAAA,QAAK6B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,YAAU,CAAK,CAAC,CAC9C,CAAC,CAEV,CAEA,mBACE5B,KAAA,QAAK2B,SAAS,QAAAE,MAAA,CAASC,eAAe,CAACxB,QAAQ,CAACK,WAAW,CAAC,CAAG,CAAAiB,QAAA,EAE5DJ,qBAAqB,eACpB1B,IAAA,CAACN,SAAS,EACRuC,UAAU,CAAEzB,QAAQ,CAACI,kBAAmB,CACxCK,gBAAgB,CAAET,QAAQ,CAACS,gBAAiB,CAC5CD,aAAa,CAAER,QAAQ,CAACQ,aAAc,CACtCkB,OAAO,CAAE1B,QAAQ,CAACG,gBAAiB,CACpC,CACF,CAGAc,iBAAiB,eAChBzB,IAAA,CAACP,KAAK,EACJ0C,YAAY,CAAER,iBAAkB,CAChCS,QAAQ,CAAER,aAAc,CACxBV,UAAU,CAAEV,QAAQ,CAACU,UAAW,CACjC,CACF,cAGDlB,IAAA,CAACL,QAAQ,EACP0C,SAAS,CAAE7B,QAAQ,CAACO,eAAgB,CACpCuB,gBAAgB,CAAEhB,oBAAqB,CACvCiB,eAAe,CAAElC,cAAe,CACjC,CAAC,EACC,CAAC,CAEV,CAEA;AACA;AACA,GACA,QAAS,CAAAS,cAAcA,CAACJ,YAAqB,CAAEC,gBAAyB,CAAe,CACrF,GAAID,YAAY,EAAIC,gBAAgB,CAAE,CACpC,MAAO,MAAM,CACf,CAAC,IAAM,IAAID,YAAY,EAAI,CAACC,gBAAgB,CAAE,CAC5C,MAAO,YAAY,CACrB,CAAC,IAAM,IAAI,CAACD,YAAY,EAAIC,gBAAgB,CAAE,CAC5C,MAAO,gBAAgB,CACzB,CAAC,IAAM,CACL;AACA,MAAO,YAAY,CACrB,CACF,CAEA;AACA;AACA,GACA,QAAS,CAAAqB,eAAeA,CAACnB,WAAwB,CAAU,CACzD,kBAAAkB,MAAA,CAAmBlB,WAAW,EAChC,CAEA,cAAe,CAAAV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}