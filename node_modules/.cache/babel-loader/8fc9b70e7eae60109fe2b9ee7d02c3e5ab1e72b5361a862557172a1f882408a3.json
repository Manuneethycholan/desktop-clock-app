{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\n * Service Worker registration and management utilities\n */\n\n/**\n * Register service worker for offline functionality\n */\nexport const registerServiceWorker = (config = {}) => {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/sw.js').then(registration => {\n        console.log('Service Worker registered successfully:', registration);\n\n        // Check for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  var _config$onUpdate;\n                  // New content available\n                  console.log('New content available, please refresh');\n                  (_config$onUpdate = config.onUpdate) === null || _config$onUpdate === void 0 ? void 0 : _config$onUpdate.call(config, registration);\n                } else {\n                  var _config$onSuccess;\n                  // Content cached for first time\n                  console.log('Content cached for offline use');\n                  (_config$onSuccess = config.onSuccess) === null || _config$onSuccess === void 0 ? void 0 : _config$onSuccess.call(config, registration);\n                }\n              }\n            });\n          }\n        });\n      }).catch(error => {\n        console.error('Service Worker registration failed:', error);\n      });\n    });\n\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      var _config$onOnline;\n      console.log('App is online');\n      (_config$onOnline = config.onOnline) === null || _config$onOnline === void 0 ? void 0 : _config$onOnline.call(config);\n    });\n    window.addEventListener('offline', () => {\n      var _config$onOffline;\n      console.log('App is offline');\n      (_config$onOffline = config.onOffline) === null || _config$onOffline === void 0 ? void 0 : _config$onOffline.call(config);\n    });\n  } else {\n    console.log('Service Worker not supported');\n  }\n};\n\n/**\n * Unregister service worker\n */\nexport const unregisterServiceWorker = async () => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const result = await registration.unregister();\n      console.log('Service Worker unregistered:', result);\n      return result;\n    } catch (error) {\n      console.error('Service Worker unregistration failed:', error);\n      return false;\n    }\n  }\n  return false;\n};\n\n/**\n * Update service worker\n */\nexport const updateServiceWorker = async () => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.update();\n      console.log('Service Worker update check completed');\n    } catch (error) {\n      console.error('Service Worker update failed:', error);\n    }\n  }\n};\n\n/**\n * Send message to service worker\n */\nexport const sendMessageToServiceWorker = message => {\n  return new Promise((resolve, reject) => {\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      const messageChannel = new MessageChannel();\n      messageChannel.port1.onmessage = event => {\n        resolve(event.data);\n      };\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n\n      // Timeout after 5 seconds\n      setTimeout(() => {\n        reject(new Error('Service Worker message timeout'));\n      }, 5000);\n    } else {\n      reject(new Error('Service Worker not available'));\n    }\n  });\n};\n\n/**\n * Cache wallpapers using service worker\n */\nexport const cacheWallpapers = async images => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CACHE_WALLPAPERS',\n      payload: {\n        images\n      }\n    });\n    console.log('Wallpapers cached successfully');\n  } catch (error) {\n    console.error('Failed to cache wallpapers:', error);\n  }\n};\n\n/**\n * Clear all caches\n */\nexport const clearServiceWorkerCache = async () => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CLEAR_CACHE'\n    });\n    console.log('Service Worker cache cleared');\n  } catch (error) {\n    console.error('Failed to clear cache:', error);\n  }\n};\n\n/**\n * Get cache status\n */\nexport const getCacheStatus = async () => {\n  try {\n    const status = await sendMessageToServiceWorker({\n      type: 'GET_CACHE_STATUS'\n    });\n    return status;\n  } catch (error) {\n    console.error('Failed to get cache status:', error);\n    return {};\n  }\n};\n\n/**\n * Check if app is running offline\n */\nexport const isOffline = () => {\n  return !navigator.onLine;\n};\n\n/**\n * Check if service worker is supported\n */\nexport const isServiceWorkerSupported = () => {\n  return 'serviceWorker' in navigator;\n};\n\n/**\n * Get service worker registration\n */\nexport const getServiceWorkerRegistration = async () => {\n  if ('serviceWorker' in navigator) {\n    try {\n      return await navigator.serviceWorker.ready;\n    } catch (error) {\n      console.error('Failed to get service worker registration:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\n * Hook for service worker status\n */\nexport const useServiceWorkerStatus = () => {\n  _s();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isServiceWorkerReady, setIsServiceWorkerReady] = useState(false);\n  const [cacheStatus, setCacheStatus] = useState({});\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check service worker status\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        setIsServiceWorkerReady(true);\n        // Get initial cache status\n        getCacheStatus().then(setCacheStatus);\n      });\n    }\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  const refreshCacheStatus = async () => {\n    const status = await getCacheStatus();\n    setCacheStatus(status);\n  };\n  return {\n    isOnline,\n    isServiceWorkerReady,\n    cacheStatus,\n    refreshCacheStatus\n  };\n};\n_s(useServiceWorkerStatus, \"hJiYtwSWW8eh+YMEmMhqKE0A2r8=\");","map":{"version":3,"names":["useState","useEffect","registerServiceWorker","config","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","newWorker","installing","state","controller","_config$onUpdate","onUpdate","call","_config$onSuccess","onSuccess","catch","error","_config$onOnline","onOnline","_config$onOffline","onOffline","unregisterServiceWorker","ready","result","unregister","updateServiceWorker","update","sendMessageToServiceWorker","message","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","event","data","postMessage","port2","setTimeout","Error","cacheWallpapers","images","type","payload","clearServiceWorkerCache","getCacheStatus","status","isOffline","onLine","isServiceWorkerSupported","getServiceWorkerRegistration","useServiceWorkerStatus","_s","isOnline","setIsOnline","isServiceWorkerReady","setIsServiceWorkerReady","cacheStatus","setCacheStatus","handleOnline","handleOffline","removeEventListener","refreshCacheStatus"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/serviceWorker.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Service Worker registration and management utilities\n */\n\ninterface ServiceWorkerConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  onOffline?: () => void;\n  onOnline?: () => void;\n}\n\n/**\n * Register service worker for offline functionality\n */\nexport const registerServiceWorker = (config: ServiceWorkerConfig = {}) => {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/sw.js')\n        .then((registration) => {\n          console.log('Service Worker registered successfully:', registration);\n          \n          // Check for updates\n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                    // New content available\n                    console.log('New content available, please refresh');\n                    config.onUpdate?.(registration);\n                  } else {\n                    // Content cached for first time\n                    console.log('Content cached for offline use');\n                    config.onSuccess?.(registration);\n                  }\n                }\n              });\n            }\n          });\n        })\n        .catch((error) => {\n          console.error('Service Worker registration failed:', error);\n        });\n    });\n\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      console.log('App is online');\n      config.onOnline?.();\n    });\n\n    window.addEventListener('offline', () => {\n      console.log('App is offline');\n      config.onOffline?.();\n    });\n  } else {\n    console.log('Service Worker not supported');\n  }\n};\n\n/**\n * Unregister service worker\n */\nexport const unregisterServiceWorker = async (): Promise<boolean> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const result = await registration.unregister();\n      console.log('Service Worker unregistered:', result);\n      return result;\n    } catch (error) {\n      console.error('Service Worker unregistration failed:', error);\n      return false;\n    }\n  }\n  return false;\n};\n\n/**\n * Update service worker\n */\nexport const updateServiceWorker = async (): Promise<void> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      await registration.update();\n      console.log('Service Worker update check completed');\n    } catch (error) {\n      console.error('Service Worker update failed:', error);\n    }\n  }\n};\n\n/**\n * Send message to service worker\n */\nexport const sendMessageToServiceWorker = (message: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      const messageChannel = new MessageChannel();\n      \n      messageChannel.port1.onmessage = (event) => {\n        resolve(event.data);\n      };\n      \n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n      \n      // Timeout after 5 seconds\n      setTimeout(() => {\n        reject(new Error('Service Worker message timeout'));\n      }, 5000);\n    } else {\n      reject(new Error('Service Worker not available'));\n    }\n  });\n};\n\n/**\n * Cache wallpapers using service worker\n */\nexport const cacheWallpapers = async (images: Array<{ src: string }>): Promise<void> => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CACHE_WALLPAPERS',\n      payload: { images }\n    });\n    console.log('Wallpapers cached successfully');\n  } catch (error) {\n    console.error('Failed to cache wallpapers:', error);\n  }\n};\n\n/**\n * Clear all caches\n */\nexport const clearServiceWorkerCache = async (): Promise<void> => {\n  try {\n    await sendMessageToServiceWorker({\n      type: 'CLEAR_CACHE'\n    });\n    console.log('Service Worker cache cleared');\n  } catch (error) {\n    console.error('Failed to clear cache:', error);\n  }\n};\n\n/**\n * Get cache status\n */\nexport const getCacheStatus = async (): Promise<Record<string, number>> => {\n  try {\n    const status = await sendMessageToServiceWorker({\n      type: 'GET_CACHE_STATUS'\n    });\n    return status;\n  } catch (error) {\n    console.error('Failed to get cache status:', error);\n    return {};\n  }\n};\n\n/**\n * Check if app is running offline\n */\nexport const isOffline = (): boolean => {\n  return !navigator.onLine;\n};\n\n/**\n * Check if service worker is supported\n */\nexport const isServiceWorkerSupported = (): boolean => {\n  return 'serviceWorker' in navigator;\n};\n\n/**\n * Get service worker registration\n */\nexport const getServiceWorkerRegistration = async (): Promise<ServiceWorkerRegistration | null> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      return await navigator.serviceWorker.ready;\n    } catch (error) {\n      console.error('Failed to get service worker registration:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\n * Hook for service worker status\n */\nexport const useServiceWorkerStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isServiceWorkerReady, setIsServiceWorkerReady] = useState(false);\n  const [cacheStatus, setCacheStatus] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check service worker status\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        setIsServiceWorkerReady(true);\n        // Get initial cache status\n        getCacheStatus().then(setCacheStatus);\n      });\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const refreshCacheStatus = async () => {\n    const status = await getCacheStatus();\n    setCacheStatus(status);\n  };\n\n  return {\n    isOnline,\n    isServiceWorkerReady,\n    cacheStatus,\n    refreshCacheStatus\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}