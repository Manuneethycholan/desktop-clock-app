{"ast":null,"code":"var _jsxFileName = \"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport '../styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Load settings from localStorage\n  const {\n    settings: storedSettings,\n    isLoaded,\n    saveSettings\n  } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: getDisplayMode(DEFAULT_SETTINGS.clockEnabled, DEFAULT_SETTINGS.wallpaperEnabled),\n    settingsVisible: false,\n    wallpaperSize: DEFAULT_SETTINGS.wallpaperSize,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat\n  });\n\n  // Mouse activity detection for settings panel\n  const {\n    isActive\n  } = useMouseActivity();\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: getDisplayMode(storedSettings.clockEnabled, storedSettings.wallpaperEnabled),\n        wallpaperSize: storedSettings.wallpaperSize,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback(newSettings => {\n    const updatedSettings = {\n      ...storedSettings,\n      ...newSettings\n    };\n\n    // Update stored settings\n    saveSettings(updatedSettings);\n\n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: getDisplayMode(updatedSettings.clockEnabled, updatedSettings.wallpaperEnabled),\n      wallpaperSize: updatedSettings.wallpaperSize,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine if clock should be rendered\n  const shouldRenderClock = appState.displayMode === 'clock-only' || appState.displayMode === 'both';\n\n  // Determine if wallpaper should be rendered\n  const shouldRenderWallpaper = appState.displayMode === 'wallpaper-only' || appState.displayMode === 'both';\n\n  // Determine clock positioning and sizing\n  const isClockFullScreen = appState.displayMode === 'clock-only';\n  const clockPosition = isClockFullScreen ? 'center' : 'bottom-left';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app app-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${getAppModeClass(appState.displayMode)}`,\n    children: [shouldRenderWallpaper && /*#__PURE__*/_jsxDEV(Wallpaper, {\n      categories: appState.selectedCategories,\n      rotationInterval: appState.rotationInterval,\n      wallpaperSize: appState.wallpaperSize,\n      enabled: appState.wallpaperEnabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), shouldRenderClock && /*#__PURE__*/_jsxDEV(Clock, {\n      isFullScreen: isClockFullScreen,\n      position: clockPosition,\n      timeFormat: appState.timeFormat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Settings, {\n      isVisible: appState.settingsVisible,\n      onSettingsChange: handleSettingsChange,\n      currentSettings: storedSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * Determine display mode based on clock and wallpaper enabled states\n */\n_s(App, \"VxX+CF+PQ9g+lHQw3V/PluBJIOE=\", false, function () {\n  return [useLocalStorage, useMouseActivity];\n});\n_c = App;\nfunction getDisplayMode(clockEnabled, wallpaperEnabled) {\n  if (clockEnabled && wallpaperEnabled) {\n    return 'both';\n  } else if (clockEnabled && !wallpaperEnabled) {\n    return 'clock-only';\n  } else if (!clockEnabled && wallpaperEnabled) {\n    return 'wallpaper-only';\n  } else {\n    // Default to clock-only if both are disabled\n    return 'clock-only';\n  }\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\nfunction getAppModeClass(displayMode) {\n  return `app-mode-${displayMode}`;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Clock","Wallpaper","Settings","useLocalStorage","useMouseActivity","DEFAULT_SETTINGS","jsxDEV","_jsxDEV","App","_s","settings","storedSettings","isLoaded","saveSettings","appState","setAppState","clockEnabled","wallpaperEnabled","selectedCategories","displayMode","getDisplayMode","settingsVisible","wallpaperSize","rotationInterval","timeFormat","isActive","prev","handleSettingsChange","newSettings","updatedSettings","shouldRenderClock","shouldRenderWallpaper","isClockFullScreen","clockPosition","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getAppModeClass","categories","enabled","isFullScreen","position","isVisible","onSettingsChange","currentSettings","_c","$RefreshReg$"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\nimport { AppState, AppSettings, DisplayMode } from '../types';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport '../styles/App.css';\n\nfunction App() {\n  // Load settings from localStorage\n  const { settings: storedSettings, isLoaded, saveSettings } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState<AppState>({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: getDisplayMode(DEFAULT_SETTINGS.clockEnabled, DEFAULT_SETTINGS.wallpaperEnabled),\n    settingsVisible: false,\n    wallpaperSize: DEFAULT_SETTINGS.wallpaperSize,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat,\n  });\n\n  // Mouse activity detection for settings panel\n  const { isActive } = useMouseActivity();\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: getDisplayMode(storedSettings.clockEnabled, storedSettings.wallpaperEnabled),\n        wallpaperSize: storedSettings.wallpaperSize,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat,\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback((newSettings: Partial<AppSettings>) => {\n    const updatedSettings = { ...storedSettings, ...newSettings };\n    \n    // Update stored settings\n    saveSettings(updatedSettings);\n    \n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: getDisplayMode(updatedSettings.clockEnabled, updatedSettings.wallpaperEnabled),\n      wallpaperSize: updatedSettings.wallpaperSize,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat,\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine if clock should be rendered\n  const shouldRenderClock = appState.displayMode === 'clock-only' || appState.displayMode === 'both';\n  \n  // Determine if wallpaper should be rendered\n  const shouldRenderWallpaper = appState.displayMode === 'wallpaper-only' || appState.displayMode === 'both';\n  \n  // Determine clock positioning and sizing\n  const isClockFullScreen = appState.displayMode === 'clock-only';\n  const clockPosition = isClockFullScreen ? 'center' : 'bottom-left';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return (\n      <div className=\"app app-loading\">\n        <div className=\"loading-message\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${getAppModeClass(appState.displayMode)}`}>\n      {/* Wallpaper component - renders behind everything */}\n      {shouldRenderWallpaper && (\n        <Wallpaper\n          categories={appState.selectedCategories}\n          rotationInterval={appState.rotationInterval}\n          wallpaperSize={appState.wallpaperSize}\n          enabled={appState.wallpaperEnabled}\n        />\n      )}\n\n      {/* Clock component - positioned based on display mode */}\n      {shouldRenderClock && (\n        <Clock\n          isFullScreen={isClockFullScreen}\n          position={clockPosition}\n          timeFormat={appState.timeFormat}\n        />\n      )}\n\n      {/* Settings panel - shows on mouse activity */}\n      <Settings\n        isVisible={appState.settingsVisible}\n        onSettingsChange={handleSettingsChange}\n        currentSettings={storedSettings}\n      />\n    </div>\n  );\n}\n\n/**\n * Determine display mode based on clock and wallpaper enabled states\n */\nfunction getDisplayMode(clockEnabled: boolean, wallpaperEnabled: boolean): DisplayMode {\n  if (clockEnabled && wallpaperEnabled) {\n    return 'both';\n  } else if (clockEnabled && !wallpaperEnabled) {\n    return 'clock-only';\n  } else if (!clockEnabled && wallpaperEnabled) {\n    return 'wallpaper-only';\n  } else {\n    // Default to clock-only if both are disabled\n    return 'clock-only';\n  }\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\nfunction getAppModeClass(displayMode: DisplayMode): string {\n  return `app-mode-${displayMode}`;\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}