{"ast":null,"code":"import{IST_TIMEZONE}from'./constants';/**\n * Utility functions for time formatting and IST conversion\n *//**\n * Get current IST time as Date object\n */export const getCurrentISTTime=()=>{return new Date();};/**\n * Format time for display according to the specified format\n */export const formatTimeForDisplay=(date,timeFormat)=>{try{var _parts$find,_parts$find2,_parts$find3,_parts$find4,_parts$find5,_parts$find6,_parts$find7;// Get IST time components\nconst istOptions={timeZone:IST_TIMEZONE,hour12:timeFormat==='12h',hour:'2-digit',minute:'2-digit',second:'2-digit',weekday:'long',month:'long',day:'numeric'};const formatter=new Intl.DateTimeFormat('en-IN',istOptions);const parts=formatter.formatToParts(date);// Extract parts\nconst hour=((_parts$find=parts.find(part=>part.type==='hour'))===null||_parts$find===void 0?void 0:_parts$find.value)||'00';const minute=((_parts$find2=parts.find(part=>part.type==='minute'))===null||_parts$find2===void 0?void 0:_parts$find2.value)||'00';const second=((_parts$find3=parts.find(part=>part.type==='second'))===null||_parts$find3===void 0?void 0:_parts$find3.value)||'00';const dayPeriod=((_parts$find4=parts.find(part=>part.type==='dayPeriod'))===null||_parts$find4===void 0?void 0:_parts$find4.value)||'';const weekday=((_parts$find5=parts.find(part=>part.type==='weekday'))===null||_parts$find5===void 0?void 0:_parts$find5.value)||'';const month=((_parts$find6=parts.find(part=>part.type==='month'))===null||_parts$find6===void 0?void 0:_parts$find6.value)||'';const day=((_parts$find7=parts.find(part=>part.type==='day'))===null||_parts$find7===void 0?void 0:_parts$find7.value)||'';// Format according to the design: \"10:03\" \"PM 24\" \"Friday - September 12\"\nconst timeLeft=\"\".concat(hour,\":\").concat(minute);const timeRight=timeFormat==='12h'?\"\".concat(dayPeriod,\" \").concat(second):second;const dateBottom=\"\".concat(weekday,\" - \").concat(month,\" \").concat(day);return{timeLeft,timeRight,dateBottom};}catch(error){console.error('Error formatting time:',error);// Fallback formatting\nconst fallbackTime=date.toLocaleTimeString('en-IN',{timeZone:IST_TIMEZONE,hour12:timeFormat==='12h'});return{timeLeft:fallbackTime.split(' ')[0]||'00:00',timeRight:timeFormat==='12h'?fallbackTime.split(' ')[1]||'AM':'00',dateBottom:date.toLocaleDateString('en-IN',{timeZone:IST_TIMEZONE,weekday:'long',month:'long',day:'numeric'})};}};/**\n * Validate if a time format is supported\n */export const isValidTimeFormat=format=>{return format==='12h'||format==='24h';};/**\n * Get timezone offset for IST\n */export const getISTOffset=()=>{const date=new Date();const istTime=new Date(date.toLocaleString('en-US',{timeZone:IST_TIMEZONE}));const utcTime=new Date(date.toLocaleString('en-US',{timeZone:'UTC'}));const offsetMs=istTime.getTime()-utcTime.getTime();const offsetHours=offsetMs/(1000*60*60);return offsetHours>=0?\"+\".concat(offsetHours,\":30\"):\"\".concat(offsetHours,\":30\");};/**\n * Check if current time is in IST timezone\n */export const isISTTimezone=()=>{try{const timeZone=Intl.DateTimeFormat().resolvedOptions().timeZone;return timeZone===IST_TIMEZONE;}catch(_unused){return false;}};","map":{"version":3,"names":["IST_TIMEZONE","getCurrentISTTime","Date","formatTimeForDisplay","date","timeFormat","_parts$find","_parts$find2","_parts$find3","_parts$find4","_parts$find5","_parts$find6","_parts$find7","istOptions","timeZone","hour12","hour","minute","second","weekday","month","day","formatter","Intl","DateTimeFormat","parts","formatToParts","find","part","type","value","dayPeriod","timeLeft","concat","timeRight","dateBottom","error","console","fallbackTime","toLocaleTimeString","split","toLocaleDateString","isValidTimeFormat","format","getISTOffset","istTime","toLocaleString","utcTime","offsetMs","getTime","offsetHours","isISTTimezone","resolvedOptions","_unused"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/timeUtils.ts"],"sourcesContent":["import { ClockDisplay, TimeFormat } from '../types';\nimport { IST_TIMEZONE } from './constants';\n\n/**\n * Utility functions for time formatting and IST conversion\n */\n\n/**\n * Get current IST time as Date object\n */\nexport const getCurrentISTTime = (): Date => {\n  return new Date();\n};\n\n/**\n * Format time for display according to the specified format\n */\nexport const formatTimeForDisplay = (date: Date, timeFormat: TimeFormat): ClockDisplay => {\n  try {\n    // Get IST time components\n    const istOptions: Intl.DateTimeFormatOptions = {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    const formatter = new Intl.DateTimeFormat('en-IN', istOptions);\n    const parts = formatter.formatToParts(date);\n\n    // Extract parts\n    const hour = parts.find(part => part.type === 'hour')?.value || '00';\n    const minute = parts.find(part => part.type === 'minute')?.value || '00';\n    const second = parts.find(part => part.type === 'second')?.value || '00';\n    const dayPeriod = parts.find(part => part.type === 'dayPeriod')?.value || '';\n    const weekday = parts.find(part => part.type === 'weekday')?.value || '';\n    const month = parts.find(part => part.type === 'month')?.value || '';\n    const day = parts.find(part => part.type === 'day')?.value || '';\n\n    // Format according to the design: \"10:03\" \"PM 24\" \"Friday - September 12\"\n    const timeLeft = `${hour}:${minute}`;\n    const timeRight = timeFormat === '12h' ? `${dayPeriod} ${second}` : second;\n    const dateBottom = `${weekday} - ${month} ${day}`;\n\n    return {\n      timeLeft,\n      timeRight,\n      dateBottom,\n    };\n  } catch (error) {\n    console.error('Error formatting time:', error);\n    // Fallback formatting\n    const fallbackTime = date.toLocaleTimeString('en-IN', {\n      timeZone: IST_TIMEZONE,\n      hour12: timeFormat === '12h',\n    });\n    \n    return {\n      timeLeft: fallbackTime.split(' ')[0] || '00:00',\n      timeRight: timeFormat === '12h' ? fallbackTime.split(' ')[1] || 'AM' : '00',\n      dateBottom: date.toLocaleDateString('en-IN', {\n        timeZone: IST_TIMEZONE,\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n      }),\n    };\n  }\n};\n\n/**\n * Validate if a time format is supported\n */\nexport const isValidTimeFormat = (format: string): format is TimeFormat => {\n  return format === '12h' || format === '24h';\n};\n\n/**\n * Get timezone offset for IST\n */\nexport const getISTOffset = (): string => {\n  const date = new Date();\n  const istTime = new Date(date.toLocaleString('en-US', { timeZone: IST_TIMEZONE }));\n  const utcTime = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }));\n  const offsetMs = istTime.getTime() - utcTime.getTime();\n  const offsetHours = offsetMs / (1000 * 60 * 60);\n  \n  return offsetHours >= 0 ? `+${offsetHours}:30` : `${offsetHours}:30`;\n};\n\n/**\n * Check if current time is in IST timezone\n */\nexport const isISTTimezone = (): boolean => {\n  try {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return timeZone === IST_TIMEZONE;\n  } catch {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}