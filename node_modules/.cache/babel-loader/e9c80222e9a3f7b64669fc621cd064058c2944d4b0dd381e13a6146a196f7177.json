{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { DEFAULT_SETTINGS, STORAGE_KEYS } from '../utils/constants';\n\n/**\n * Custom hook for managing localStorage with settings persistence\n * Handles validation, migration, and error recovery\n */\nexport const useLocalStorage = () => {\n  _s();\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Validate stored settings structure\n  const validateSettings = data => {\n    if (!data || typeof data !== 'object') return false;\n    const requiredFields = ['version', 'clockEnabled', 'wallpaperEnabled', 'selectedCategories', 'rotationInterval', 'timeFormat', 'wallpaperSize', 'fontColor', 'fontFamily', 'lastUpdated'];\n    return requiredFields.every(field => field in data);\n  };\n\n  // Convert stored settings to app settings\n  const convertStoredToAppSettings = stored => {\n    return {\n      clockEnabled: stored.clockEnabled,\n      wallpaperEnabled: stored.wallpaperEnabled,\n      selectedCategories: stored.selectedCategories,\n      rotationInterval: stored.rotationInterval,\n      timeFormat: stored.timeFormat,\n      wallpaperSize: stored.wallpaperSize,\n      fontColor: stored.fontColor || DEFAULT_SETTINGS.fontColor,\n      fontFamily: stored.fontFamily || DEFAULT_SETTINGS.fontFamily\n    };\n  };\n\n  // Convert app settings to stored settings\n  const convertAppToStoredSettings = appSettings => {\n    return {\n      version: STORAGE_KEYS.VERSION,\n      clockEnabled: appSettings.clockEnabled,\n      wallpaperEnabled: appSettings.wallpaperEnabled,\n      selectedCategories: appSettings.selectedCategories,\n      rotationInterval: appSettings.rotationInterval,\n      timeFormat: appSettings.timeFormat,\n      wallpaperSize: appSettings.wallpaperSize,\n      lastUpdated: new Date().toISOString()\n    };\n  };\n\n  // Load settings from localStorage\n  const loadSettings = useCallback(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n      if (!stored) {\n        console.log('No stored settings found, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n      const parsedData = JSON.parse(stored);\n      if (!validateSettings(parsedData)) {\n        console.warn('Invalid stored settings format, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      // Check version for potential migration\n      if (parsedData.version !== STORAGE_KEYS.VERSION) {\n        console.log('Settings version mismatch, migrating...');\n        // For now, just use defaults. Future versions can implement migration logic\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n      const appSettings = convertStoredToAppSettings(parsedData);\n      setSettings(appSettings);\n      setIsLoaded(true);\n      console.log('Settings loaded successfully');\n    } catch (error) {\n      console.error('Error loading settings from localStorage:', error);\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n    }\n  }, []);\n\n  // Save settings to localStorage\n  const saveSettings = useCallback(newSettings => {\n    try {\n      const storedSettings = convertAppToStoredSettings(newSettings);\n      localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(storedSettings));\n      setSettings(newSettings);\n      console.log('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings to localStorage:', error);\n      // Still update in-memory settings even if localStorage fails\n      setSettings(newSettings);\n    }\n  }, []);\n\n  // Update specific setting\n  const updateSetting = useCallback((key, value) => {\n    const newSettings = {\n      ...settings,\n      [key]: value\n    };\n    saveSettings(newSettings);\n  }, [settings, saveSettings]);\n\n  // Reset to default settings\n  const resetSettings = useCallback(() => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.SETTINGS);\n      setSettings(DEFAULT_SETTINGS);\n      console.log('Settings reset to defaults');\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, []);\n\n  // Check if localStorage is available\n  const isLocalStorageAvailable = useCallback(() => {\n    try {\n      const test = '__localStorage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }, []);\n\n  // Load settings on mount\n  useEffect(() => {\n    if (!isLocalStorageAvailable()) {\n      console.warn('localStorage not available, using in-memory settings');\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n      return;\n    }\n    loadSettings();\n  }, [loadSettings, isLocalStorageAvailable]);\n  return {\n    settings,\n    isLoaded,\n    saveSettings,\n    updateSetting,\n    resetSettings,\n    isLocalStorageAvailable: isLocalStorageAvailable()\n  };\n};\n_s(useLocalStorage, \"DzFYRxPbMTqEL4VStLe1tKX7im0=\");","map":{"version":3,"names":["useState","useEffect","useCallback","DEFAULT_SETTINGS","STORAGE_KEYS","useLocalStorage","_s","settings","setSettings","isLoaded","setIsLoaded","validateSettings","data","requiredFields","every","field","convertStoredToAppSettings","stored","clockEnabled","wallpaperEnabled","selectedCategories","rotationInterval","timeFormat","wallpaperSize","fontColor","fontFamily","convertAppToStoredSettings","appSettings","version","VERSION","lastUpdated","Date","toISOString","loadSettings","localStorage","getItem","SETTINGS","console","log","parsedData","JSON","parse","warn","error","saveSettings","newSettings","storedSettings","setItem","stringify","updateSetting","key","value","resetSettings","removeItem","isLocalStorageAvailable","test"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/hooks/useLocalStorage.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { StoredSettings, AppSettings } from '../types';\nimport { DEFAULT_SETTINGS, STORAGE_KEYS } from '../utils/constants';\n\n/**\n * Custom hook for managing localStorage with settings persistence\n * Handles validation, migration, and error recovery\n */\nexport const useLocalStorage = () => {\n  const [settings, setSettings] = useState<AppSettings>(DEFAULT_SETTINGS);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Validate stored settings structure\n  const validateSettings = (data: any): data is StoredSettings => {\n    if (!data || typeof data !== 'object') return false;\n    \n    const requiredFields = [\n      'version',\n      'clockEnabled',\n      'wallpaperEnabled',\n      'selectedCategories',\n      'rotationInterval',\n      'timeFormat',\n      'wallpaperSize',\n      'fontColor',\n      'fontFamily',\n      'lastUpdated'\n    ];\n\n    return requiredFields.every(field => field in data);\n  };\n\n  // Convert stored settings to app settings\n  const convertStoredToAppSettings = (stored: StoredSettings): AppSettings => {\n    return {\n      clockEnabled: stored.clockEnabled,\n      wallpaperEnabled: stored.wallpaperEnabled,\n      selectedCategories: stored.selectedCategories,\n      rotationInterval: stored.rotationInterval,\n      timeFormat: stored.timeFormat,\n      wallpaperSize: stored.wallpaperSize,\n      fontColor: stored.fontColor || DEFAULT_SETTINGS.fontColor,\n      fontFamily: stored.fontFamily || DEFAULT_SETTINGS.fontFamily,\n    };\n  };\n\n  // Convert app settings to stored settings\n  const convertAppToStoredSettings = (appSettings: AppSettings): StoredSettings => {\n    return {\n      version: STORAGE_KEYS.VERSION,\n      clockEnabled: appSettings.clockEnabled,\n      wallpaperEnabled: appSettings.wallpaperEnabled,\n      selectedCategories: appSettings.selectedCategories,\n      rotationInterval: appSettings.rotationInterval,\n      timeFormat: appSettings.timeFormat,\n      wallpaperSize: appSettings.wallpaperSize,\n      lastUpdated: new Date().toISOString(),\n    };\n  };\n\n  // Load settings from localStorage\n  const loadSettings = useCallback(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n      \n      if (!stored) {\n        console.log('No stored settings found, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      const parsedData = JSON.parse(stored);\n      \n      if (!validateSettings(parsedData)) {\n        console.warn('Invalid stored settings format, using defaults');\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      // Check version for potential migration\n      if (parsedData.version !== STORAGE_KEYS.VERSION) {\n        console.log('Settings version mismatch, migrating...');\n        // For now, just use defaults. Future versions can implement migration logic\n        setSettings(DEFAULT_SETTINGS);\n        setIsLoaded(true);\n        return;\n      }\n\n      const appSettings = convertStoredToAppSettings(parsedData);\n      setSettings(appSettings);\n      setIsLoaded(true);\n      console.log('Settings loaded successfully');\n      \n    } catch (error) {\n      console.error('Error loading settings from localStorage:', error);\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n    }\n  }, []);\n\n  // Save settings to localStorage\n  const saveSettings = useCallback((newSettings: AppSettings) => {\n    try {\n      const storedSettings = convertAppToStoredSettings(newSettings);\n      localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(storedSettings));\n      setSettings(newSettings);\n      console.log('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings to localStorage:', error);\n      // Still update in-memory settings even if localStorage fails\n      setSettings(newSettings);\n    }\n  }, []);\n\n  // Update specific setting\n  const updateSetting = useCallback(<K extends keyof AppSettings>(\n    key: K,\n    value: AppSettings[K]\n  ) => {\n    const newSettings = { ...settings, [key]: value };\n    saveSettings(newSettings);\n  }, [settings, saveSettings]);\n\n  // Reset to default settings\n  const resetSettings = useCallback(() => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.SETTINGS);\n      setSettings(DEFAULT_SETTINGS);\n      console.log('Settings reset to defaults');\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, []);\n\n  // Check if localStorage is available\n  const isLocalStorageAvailable = useCallback(() => {\n    try {\n      const test = '__localStorage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }, []);\n\n  // Load settings on mount\n  useEffect(() => {\n    if (!isLocalStorageAvailable()) {\n      console.warn('localStorage not available, using in-memory settings');\n      setSettings(DEFAULT_SETTINGS);\n      setIsLoaded(true);\n      return;\n    }\n\n    loadSettings();\n  }, [loadSettings, isLocalStorageAvailable]);\n\n  return {\n    settings,\n    isLoaded,\n    saveSettings,\n    updateSetting,\n    resetSettings,\n    isLocalStorageAvailable: isLocalStorageAvailable(),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}