{"ast":null,"code":"import{WALLPAPER_CATEGORIES}from'./constants';// Import the generated image manifest (will be created by build script)\nlet imageManifest={};// Try to load the manifest, fallback to hardcoded list if not available\ntry{// This will be generated by the build script\nimageManifest=require('../data/imageManifest.json');console.log('Loaded image manifest:',imageManifest);}catch(error){console.warn('Failed to load image manifest, using fallback:',error);// Fallback to current known images\nimageManifest={rajini:['183160b768465b686cdb7aafa99cccc5.jpg','2a54a5f5b7a844923311411a2d68da3c.jpg','9215ed34ce4c841ef307d148339f6515.jpg','b2fc0dfa57b17254d4ded63993b3917b.jpg','bf424df0eca803526cee028a9ef419c8.jpg','c192692294a5f6a269794a1f7cc738cf.jpg','efc647edaadddc9b8d2084ec3a0d0436.jpg','Thalapathy Movie Rajinikanth.jpeg'],kamal:['6a6408be15cd1e70a5df0f9848b6a5af (1).jpg','6a6408be15cd1e70a5df0f9848b6a5af.jpg','8b707f8aaae421c1138c4ffb5f7628bb.jpg'],common_mass:['2300fee19837861494641861116980ee.jpg','2e534c614c562634f7f74034f9a503c9.jpg','3d62aaf3d09f8b00c03685cc308b92fa.jpg','4082b1e37ffdfcc9fa38159dadaccb17.jpg','618084c21a00942335d5ca3dac51ed17.jpg','7c3f344a162c03516a2d213d05bd14eb.jpg','9c743a378ac5901ee040ecd272933634.jpg','9f6c2a08e9c7432add440ce2f1f434a1.jpg','c6d3c282ac356d2bf0b64ae221a06dcb.jpg','download (1).png','download.png'],automobile:['0719eeee4fe543a5cd59d74093fd1a60.jpg','0c34d4a4678aaa278ca3bd3667b938ad.jpg','10c59d3a4300d7088c1c55639a168d72.jpg','18c0fd619f647cc105998012c9f4501f.jpg','1f637ed40710da202bed91cf0ee7c842.jpg','2161839ec94977ef06a68b69f988e182.jpg','230af357c9506065da9ef612f3f9c2c8.jpg','3daab7279174ca42705cdfcb006d89f5.jpg','455e53819c86ae83ded135bf63471290.jpg','6adbc9db1fb793c6514290bb9a7cbf0b.jpg','6c24758749d20503e526e47eb4f35c56.jpg','736d1fc83f95cfbe0e668a50f28279c7.jpg','904bc157166d2a58b389d85eef963ef6.jpg','99f17ccf47325726cd9d396138e0fb09.jpg','c8084ab3a075a0a58406b893e6d80792.jpg','d0b14a7bad86fa2a40436404b25a4dfe.jpg','d68340f29151017b75c3cb8856577f48.jpg','e15aa58261b0c253a1d82b332d453e38.jpg','e79d844f37d4b8137277a2f5d04ab1d1.jpg','ebbaba49e0acdf2ef594c5c8b5721a5c.jpg','ebf148c7fea44ed9da4446d6bb9b5b23.jpg','f1e0409b472b64fa0b79b3e131c708e2.jpg','f41f77cdd2bb2accfcacb1663b14baf4.jpg'],motivational:['241c0b8f3e23e36b03f54cef3abfaf59.jpg','2f4a623e29593aaf308c810360fd4f49.jpg','3a198aec4dd0bff0ec7324c6fb6d402f.jpg','42d9f55012b192fdd413f8ff30953cbc.jpg','585b4f26a6b03cad75926197a2898e5b.jpg','8053b96c0e62bb7253751f9b59674ced.jpg','8504805b1ba2e15fd0717c1d6c2ac1fc.jpg','90a2feda1b37fe424413d6dffee584ff.jpg','a9018dd554e4db3ccfdbfa5ac2d77057.jpg','b3a7dea905bfa34cd14e8b3a5d381817.jpg','ccbf76c869ce67d930278852888dc997.jpg','db7eab4fc2ada5526a1d99e3e0f3e1eb.jpg','download.png','e60ec0b722db2be60df0639d28b790e1.jpg','e7f9b22cb6764147a9f65b3302831c0b.jpg','f148553000afbafdcfaa83bec722b4f3.jpg','f6843555658beba42b8c5808bd813079.jpg','fa8b202e2a1f020abe41b823e4bf30cc.jpg'],nature:['13863e5a80feecfa438c88e460288d46.jpg','f44afe81b880a53100049c031c8afd93.jpg'],spiritual:['25c5e21914cb7b07a01805aa72f91a59.jpg','download (1).png','download.png','ec809e7b3d96a4c287d0a1117ecc17c0.jpg'],random:['0ab0b205f9985c50142e719c97e47b0d.jpg','9681a53211c39a18f1c46132fb89c2e9.jpg'],anime:['characters/44a72ef96d0cb141b5a25519344ba4e0.jpg','characters/8e901f7e4827cac9073ae2c3131d90fa.jpg','places/11b9bc76763e9e07b3af0353c8c4edfb.jpg','places/42e18fcd2b236e57c0b8517bea6bd979.jpg','places/6176222d555e0023f9bcd1a50bab374c.jpg','places/75c62e19a9bc9136f17968ab7b9d2ac6.jpg','places/7632d32062dd523d9d7efedbc84f06f9.jpg','places/a1b6382df31b01e04742d8a48183afba.jpg','places/d59cd9027b79f5b5d3fb128257b8c890.jpg','places/f29ac662ef580ee016aff1d92ac3e2f7.jpg'],bikes:[],ai:[],tech:[]};}/**\n * Utility functions for loading and managing wallpaper images\n *//**\n * Get all available images for specified categories (USER SELECTED CATEGORIES)\n * This is where the filtering happens based on user's category selection\n */export const getImagesForCategories=async selectedCategories=>{// Handle edge case: no categories selected\nif(selectedCategories.length===0){console.log('No categories selected - returning empty array for black background');return[];}const allImages=[];const failedCategories=[];// Only process the categories that the user has selected\nfor(const category of selectedCategories){// Validate category name\nif(!isValidCategory(category)){console.warn(\"Invalid category name: \".concat(category));failedCategories.push(category);continue;}try{const categoryImages=await getImagesForCategory(category);if(categoryImages.length>0){allImages.push(...categoryImages);console.log(\"Successfully loaded \".concat(categoryImages.length,\" images from category: \").concat(category));}else{console.warn(\"No images found for category: \".concat(category));failedCategories.push(category);}}catch(error){console.warn(\"Failed to load images for category: \".concat(category),error);failedCategories.push(category);}}// Log results for debugging\nconst successfulCategories=selectedCategories.filter(cat=>!failedCategories.includes(cat));console.log(\"Category filtering results:\",{selectedCategories,successfulCategories,failedCategories,totalImages:allImages.length});return allImages;};/**\n * Get all images for a specific category from the manifest\n */export const getImagesForCategory=async category=>{const filenames=imageManifest[category]||[];console.log(\"Getting images for category \".concat(category,\":\"),filenames);const images=filenames.map(filename=>({src:\"\".concat(process.env.PUBLIC_URL,\"/wallpapers/\").concat(category,\"/\").concat(filename),category,filename}));console.log(\"Created \".concat(images.length,\" image objects for category \").concat(category));return images;};/**\n * Preload an image to ensure smooth transitions\n */export const preloadImage=src=>{return new Promise((resolve,reject)=>{const img=new Image();// Set timeout to prevent hanging on slow/broken images\nconst timeout=setTimeout(()=>{reject(new Error(\"Image load timeout: \".concat(src)));},10000);// 10 second timeout\nimg.onload=()=>{clearTimeout(timeout);resolve();};img.onerror=()=>{clearTimeout(timeout);reject(new Error(\"Failed to load image: \".concat(src)));};img.src=src;});};/**\n * Lazy load image with Intersection Observer API\n */export const lazyLoadImage=function(src){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return new Promise((resolve,reject)=>{const img=new Image();// Default options for lazy loading\nconst{rootMargin='50px',threshold=0.1}=options;// Set timeout for loading\nconst timeout=setTimeout(()=>{reject(new Error(\"Lazy load timeout: \".concat(src)));},15000);// 15 second timeout for lazy loading\nimg.onload=()=>{clearTimeout(timeout);resolve(img);};img.onerror=()=>{clearTimeout(timeout);reject(new Error(\"Failed to lazy load image: \".concat(src)));};// Use Intersection Observer for lazy loading if supported\nif('IntersectionObserver'in window){const observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(entry.isIntersecting){img.src=src;observer.unobserve(img);}});},{rootMargin,threshold});// Create a placeholder element to observe\nconst placeholder=document.createElement('div');placeholder.style.width='1px';placeholder.style.height='1px';placeholder.style.position='absolute';placeholder.style.top='0';placeholder.style.left='0';document.body.appendChild(placeholder);observer.observe(placeholder);// Clean up placeholder after loading\nimg.onload=()=>{clearTimeout(timeout);document.body.removeChild(placeholder);resolve(img);};}else{// Fallback: load immediately if Intersection Observer not supported\nimg.src=src;}});};/**\n * Preload multiple images with error tolerance\n */export const preloadImages=async images=>{const preloadPromises=images.map(async image=>{try{await preloadImage(image.src);return{success:true,image};}catch(error){console.warn(\"Failed to preload image: \".concat(image.src),error);return{success:false,image,error};}});const results=await Promise.all(preloadPromises);const successfulImages=results.filter(result=>result.success).map(result=>result.image);const failedCount=results.length-successfulImages.length;if(failedCount>0){console.warn(\"\".concat(failedCount,\" out of \").concat(images.length,\" images failed to preload\"));}else{console.log(\"Successfully preloaded \".concat(images.length,\" images\"));}return successfulImages;};/**\n * Lazy load multiple images with priority system\n */export const lazyLoadImages=async function(images){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{priority='normal',batchSize=3,delay=100}=options;// Adjust loading strategy based on priority\nconst loadingDelay=priority==='high'?0:priority==='normal'?delay:delay*2;const currentBatchSize=priority==='high'?batchSize*2:batchSize;const successfulImages=[];// Process images in batches to avoid overwhelming the browser\nfor(let i=0;i<images.length;i+=currentBatchSize){const batch=images.slice(i,i+currentBatchSize);const batchPromises=batch.map(async image=>{try{await lazyLoadImage(image.src);return{success:true,image};}catch(error){console.warn(\"Failed to lazy load image: \".concat(image.src),error);return{success:false,image,error};}});const batchResults=await Promise.all(batchPromises);const batchSuccessful=batchResults.filter(result=>result.success).map(result=>result.image);successfulImages.push(...batchSuccessful);// Add delay between batches (except for high priority)\nif(loadingDelay>0&&i+currentBatchSize<images.length){await new Promise(resolve=>setTimeout(resolve,loadingDelay));}}console.log(\"Lazy loaded \".concat(successfulImages.length,\" out of \").concat(images.length,\" images (priority: \").concat(priority,\")\"));return successfulImages;};/**\n * Check if an image exists and can be loaded\n */export const checkImageExists=async src=>{try{await preloadImage(src);return true;}catch(_unused){return false;}};/**\n * Get a random image from the available images\n */export const getRandomImage=images=>{if(images.length===0)return null;const randomIndex=Math.floor(Math.random()*images.length);return images[randomIndex];};/**\n * Get the next image in sequence\n */export const getNextImage=(images,currentIndex)=>{if(images.length===0)return{image:null,nextIndex:0};const nextIndex=(currentIndex+1)%images.length;return{image:images[nextIndex],nextIndex};};/**\n * Validate category name\n */export const isValidCategory=category=>{return WALLPAPER_CATEGORIES.some(cat=>cat.name===category);};/**\n * Get display name for category\n */export const getCategoryDisplayName=category=>{const categoryConfig=WALLPAPER_CATEGORIES.find(cat=>cat.name===category);return(categoryConfig===null||categoryConfig===void 0?void 0:categoryConfig.displayName)||category;};/**\n * Validate and filter working images from a list\n */export const validateImages=async images=>{if(images.length===0)return[];const validationPromises=images.map(async image=>{try{const exists=await checkImageExists(image.src);return exists?image:null;}catch(_unused2){return null;}});const results=await Promise.all(validationPromises);const validImages=results.filter(image=>image!==null);if(validImages.length<images.length){console.warn(\"\".concat(images.length-validImages.length,\" images failed validation\"));}return validImages;};/**\n * Get images with fallback handling for missing files\n */export const getImagesWithFallback=async selectedCategories=>{const allImages=[];const errors=[];if(selectedCategories.length===0){return{images:[],errors:[]};}for(const category of selectedCategories){try{const categoryImages=await getImagesForCategory(category);if(categoryImages.length>0){// Skip validation for now - just add all images from manifest\nallImages.push(...categoryImages);console.log(\"Added \".concat(categoryImages.length,\" images from category: \").concat(category));}else{errors.push(\"No images configured for category: \".concat(category));}}catch(error){errors.push(\"Failed to load category \".concat(category,\": \").concat(error));}}return{images:allImages,errors};};/**\n * Get statistics for category filtering\n */export const getCategoryFilteringStats=async selectedCategories=>{const categoriesWithImages=[];const categoriesWithoutImages=[];let totalImages=0;for(const category of selectedCategories){try{const images=await getImagesForCategory(category);if(images.length>0){categoriesWithImages.push(category);totalImages+=images.length;}else{categoriesWithoutImages.push(category);}}catch(_unused3){categoriesWithoutImages.push(category);}}return{totalCategories:WALLPAPER_CATEGORIES.length,selectedCategories:selectedCategories.length,totalImages,categoriesWithImages,categoriesWithoutImages};};/**\n * Update category image counts dynamically\n */export const updateCategoryImageCounts=async()=>{const updatedCategories=[...WALLPAPER_CATEGORIES];for(const category of updatedCategories){try{const images=await getImagesForCategory(category.name);category.imageCount=images.length;}catch(error){console.warn(\"Failed to count images for category \".concat(category.name,\":\"),error);category.imageCount=0;}}return updatedCategories;};/**\n * Get filtered categories with immediate effect\n * This function provides real-time filtering results for the UI\n */export const getFilteredCategoriesWithEffect=async selectedCategories=>{const{images:filteredImages}=await getImagesWithFallback(selectedCategories);const categoryStats={};// Get stats for all categories\nfor(const category of WALLPAPER_CATEGORIES){const isSelected=selectedCategories.includes(category.name);const categoryImages=await getImagesForCategory(category.name);categoryStats[category.name]={selected:isSelected,imageCount:categoryImages.length,hasImages:categoryImages.length>0};}return{filteredImages,categoryStats,totalSelectedImages:filteredImages.length,hasAnyImages:filteredImages.length>0};};","map":{"version":3,"names":["WALLPAPER_CATEGORIES","imageManifest","require","console","log","error","warn","rajini","kamal","common_mass","automobile","motivational","nature","spiritual","random","anime","bikes","ai","tech","getImagesForCategories","selectedCategories","length","allImages","failedCategories","category","isValidCategory","concat","push","categoryImages","getImagesForCategory","successfulCategories","filter","cat","includes","totalImages","filenames","images","map","filename","src","process","env","PUBLIC_URL","preloadImage","Promise","resolve","reject","img","Image","timeout","setTimeout","Error","onload","clearTimeout","onerror","lazyLoadImage","options","arguments","undefined","rootMargin","threshold","window","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","placeholder","document","createElement","style","width","height","position","top","left","body","appendChild","observe","removeChild","preloadImages","preloadPromises","image","success","results","all","successfulImages","result","failedCount","lazyLoadImages","priority","batchSize","delay","loadingDelay","currentBatchSize","i","batch","slice","batchPromises","batchResults","batchSuccessful","checkImageExists","_unused","getRandomImage","randomIndex","Math","floor","getNextImage","currentIndex","nextIndex","some","name","getCategoryDisplayName","categoryConfig","find","displayName","validateImages","validationPromises","exists","_unused2","validImages","getImagesWithFallback","errors","getCategoryFilteringStats","categoriesWithImages","categoriesWithoutImages","_unused3","totalCategories","updateCategoryImageCounts","updatedCategories","imageCount","getFilteredCategoriesWithEffect","filteredImages","categoryStats","isSelected","selected","hasImages","totalSelectedImages","hasAnyImages"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/imageLoader.ts"],"sourcesContent":["import { WallpaperImage, CategoryConfig } from '../types';\nimport { WALLPAPER_CATEGORIES } from './constants';\n\n// Import the generated image manifest (will be created by build script)\nlet imageManifest: Record<string, string[]> = {};\n\n// Try to load the manifest, fallback to hardcoded list if not available\ntry {\n  // This will be generated by the build script\n  imageManifest = require('../data/imageManifest.json');\n  console.log('Loaded image manifest:', imageManifest);\n} catch (error) {\n  console.warn('Failed to load image manifest, using fallback:', error);\n  // Fallback to current known images\n  imageManifest = {\n    rajini: [\n      '183160b768465b686cdb7aafa99cccc5.jpg',\n      '2a54a5f5b7a844923311411a2d68da3c.jpg',\n      '9215ed34ce4c841ef307d148339f6515.jpg',\n      'b2fc0dfa57b17254d4ded63993b3917b.jpg',\n      'bf424df0eca803526cee028a9ef419c8.jpg',\n      'c192692294a5f6a269794a1f7cc738cf.jpg',\n      'efc647edaadddc9b8d2084ec3a0d0436.jpg',\n      'Thalapathy Movie Rajinikanth.jpeg'\n    ],\n    kamal: [\n      '6a6408be15cd1e70a5df0f9848b6a5af (1).jpg',\n      '6a6408be15cd1e70a5df0f9848b6a5af.jpg',\n      '8b707f8aaae421c1138c4ffb5f7628bb.jpg'\n    ],\n    common_mass: [\n      '2300fee19837861494641861116980ee.jpg',\n      '2e534c614c562634f7f74034f9a503c9.jpg',\n      '3d62aaf3d09f8b00c03685cc308b92fa.jpg',\n      '4082b1e37ffdfcc9fa38159dadaccb17.jpg',\n      '618084c21a00942335d5ca3dac51ed17.jpg',\n      '7c3f344a162c03516a2d213d05bd14eb.jpg',\n      '9c743a378ac5901ee040ecd272933634.jpg',\n      '9f6c2a08e9c7432add440ce2f1f434a1.jpg',\n      'c6d3c282ac356d2bf0b64ae221a06dcb.jpg',\n      'download (1).png',\n      'download.png'\n    ],\n    automobile: [\n      '0719eeee4fe543a5cd59d74093fd1a60.jpg',\n      '0c34d4a4678aaa278ca3bd3667b938ad.jpg',\n      '10c59d3a4300d7088c1c55639a168d72.jpg',\n      '18c0fd619f647cc105998012c9f4501f.jpg',\n      '1f637ed40710da202bed91cf0ee7c842.jpg',\n      '2161839ec94977ef06a68b69f988e182.jpg',\n      '230af357c9506065da9ef612f3f9c2c8.jpg',\n      '3daab7279174ca42705cdfcb006d89f5.jpg',\n      '455e53819c86ae83ded135bf63471290.jpg',\n      '6adbc9db1fb793c6514290bb9a7cbf0b.jpg',\n      '6c24758749d20503e526e47eb4f35c56.jpg',\n      '736d1fc83f95cfbe0e668a50f28279c7.jpg',\n      '904bc157166d2a58b389d85eef963ef6.jpg',\n      '99f17ccf47325726cd9d396138e0fb09.jpg',\n      'c8084ab3a075a0a58406b893e6d80792.jpg',\n      'd0b14a7bad86fa2a40436404b25a4dfe.jpg',\n      'd68340f29151017b75c3cb8856577f48.jpg',\n      'e15aa58261b0c253a1d82b332d453e38.jpg',\n      'e79d844f37d4b8137277a2f5d04ab1d1.jpg',\n      'ebbaba49e0acdf2ef594c5c8b5721a5c.jpg',\n      'ebf148c7fea44ed9da4446d6bb9b5b23.jpg',\n      'f1e0409b472b64fa0b79b3e131c708e2.jpg',\n      'f41f77cdd2bb2accfcacb1663b14baf4.jpg'\n    ],\n    motivational: [\n      '241c0b8f3e23e36b03f54cef3abfaf59.jpg',\n      '2f4a623e29593aaf308c810360fd4f49.jpg',\n      '3a198aec4dd0bff0ec7324c6fb6d402f.jpg',\n      '42d9f55012b192fdd413f8ff30953cbc.jpg',\n      '585b4f26a6b03cad75926197a2898e5b.jpg',\n      '8053b96c0e62bb7253751f9b59674ced.jpg',\n      '8504805b1ba2e15fd0717c1d6c2ac1fc.jpg',\n      '90a2feda1b37fe424413d6dffee584ff.jpg',\n      'a9018dd554e4db3ccfdbfa5ac2d77057.jpg',\n      'b3a7dea905bfa34cd14e8b3a5d381817.jpg',\n      'ccbf76c869ce67d930278852888dc997.jpg',\n      'db7eab4fc2ada5526a1d99e3e0f3e1eb.jpg',\n      'download.png',\n      'e60ec0b722db2be60df0639d28b790e1.jpg',\n      'e7f9b22cb6764147a9f65b3302831c0b.jpg',\n      'f148553000afbafdcfaa83bec722b4f3.jpg',\n      'f6843555658beba42b8c5808bd813079.jpg',\n      'fa8b202e2a1f020abe41b823e4bf30cc.jpg'\n    ],\n    nature: [\n      '13863e5a80feecfa438c88e460288d46.jpg',\n      'f44afe81b880a53100049c031c8afd93.jpg'\n    ],\n    spiritual: [\n      '25c5e21914cb7b07a01805aa72f91a59.jpg',\n      'download (1).png',\n      'download.png',\n      'ec809e7b3d96a4c287d0a1117ecc17c0.jpg'\n    ],\n    random: [\n      '0ab0b205f9985c50142e719c97e47b0d.jpg',\n      '9681a53211c39a18f1c46132fb89c2e9.jpg'\n    ],\n    anime: [\n      'characters/44a72ef96d0cb141b5a25519344ba4e0.jpg',\n      'characters/8e901f7e4827cac9073ae2c3131d90fa.jpg',\n      'places/11b9bc76763e9e07b3af0353c8c4edfb.jpg',\n      'places/42e18fcd2b236e57c0b8517bea6bd979.jpg',\n      'places/6176222d555e0023f9bcd1a50bab374c.jpg',\n      'places/75c62e19a9bc9136f17968ab7b9d2ac6.jpg',\n      'places/7632d32062dd523d9d7efedbc84f06f9.jpg',\n      'places/a1b6382df31b01e04742d8a48183afba.jpg',\n      'places/d59cd9027b79f5b5d3fb128257b8c890.jpg',\n      'places/f29ac662ef580ee016aff1d92ac3e2f7.jpg'\n    ],\n    bikes: [],\n    ai: [],\n    tech: []\n  };\n}\n\n/**\n * Utility functions for loading and managing wallpaper images\n */\n\n/**\n * Get all available images for specified categories (USER SELECTED CATEGORIES)\n * This is where the filtering happens based on user's category selection\n */\nexport const getImagesForCategories = async (selectedCategories: string[]): Promise<WallpaperImage[]> => {\n  // Handle edge case: no categories selected\n  if (selectedCategories.length === 0) {\n    console.log('No categories selected - returning empty array for black background');\n    return [];\n  }\n\n  const allImages: WallpaperImage[] = [];\n  const failedCategories: string[] = [];\n  \n  // Only process the categories that the user has selected\n  for (const category of selectedCategories) {\n    // Validate category name\n    if (!isValidCategory(category)) {\n      console.warn(`Invalid category name: ${category}`);\n      failedCategories.push(category);\n      continue;\n    }\n\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        allImages.push(...categoryImages);\n        console.log(`Successfully loaded ${categoryImages.length} images from category: ${category}`);\n      } else {\n        console.warn(`No images found for category: ${category}`);\n        failedCategories.push(category);\n      }\n    } catch (error) {\n      console.warn(`Failed to load images for category: ${category}`, error);\n      failedCategories.push(category);\n    }\n  }\n  \n  // Log results for debugging\n  const successfulCategories = selectedCategories.filter(cat => !failedCategories.includes(cat));\n  console.log(`Category filtering results:`, {\n    selectedCategories,\n    successfulCategories,\n    failedCategories,\n    totalImages: allImages.length\n  });\n  \n  return allImages;\n};\n\n/**\n * Get all images for a specific category from the manifest\n */\nexport const getImagesForCategory = async (category: string): Promise<WallpaperImage[]> => {\n  const filenames = imageManifest[category] || [];\n  console.log(`Getting images for category ${category}:`, filenames);\n  \n  const images = filenames.map(filename => ({\n    src: `${process.env.PUBLIC_URL}/wallpapers/${category}/${filename}`,\n    category,\n    filename\n  }));\n  \n  console.log(`Created ${images.length} image objects for category ${category}`);\n  return images;\n};\n\n/**\n * Preload an image to ensure smooth transitions\n */\nexport const preloadImage = (src: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    // Set timeout to prevent hanging on slow/broken images\n    const timeout = setTimeout(() => {\n      reject(new Error(`Image load timeout: ${src}`));\n    }, 10000); // 10 second timeout\n    \n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve();\n    };\n    \n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    \n    img.src = src;\n  });\n};\n\n/**\n * Lazy load image with Intersection Observer API\n */\nexport const lazyLoadImage = (src: string, options: {\n  rootMargin?: string;\n  threshold?: number;\n} = {}): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    // Default options for lazy loading\n    const { rootMargin = '50px', threshold = 0.1 } = options;\n    \n    // Set timeout for loading\n    const timeout = setTimeout(() => {\n      reject(new Error(`Lazy load timeout: ${src}`));\n    }, 15000); // 15 second timeout for lazy loading\n    \n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve(img);\n    };\n    \n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to lazy load image: ${src}`));\n    };\n    \n    // Use Intersection Observer for lazy loading if supported\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            img.src = src;\n            observer.unobserve(img);\n          }\n        });\n      }, { rootMargin, threshold });\n      \n      // Create a placeholder element to observe\n      const placeholder = document.createElement('div');\n      placeholder.style.width = '1px';\n      placeholder.style.height = '1px';\n      placeholder.style.position = 'absolute';\n      placeholder.style.top = '0';\n      placeholder.style.left = '0';\n      document.body.appendChild(placeholder);\n      \n      observer.observe(placeholder);\n      \n      // Clean up placeholder after loading\n      img.onload = () => {\n        clearTimeout(timeout);\n        document.body.removeChild(placeholder);\n        resolve(img);\n      };\n    } else {\n      // Fallback: load immediately if Intersection Observer not supported\n      img.src = src;\n    }\n  });\n};\n\n/**\n * Preload multiple images with error tolerance\n */\nexport const preloadImages = async (images: WallpaperImage[]): Promise<WallpaperImage[]> => {\n  const preloadPromises = images.map(async (image) => {\n    try {\n      await preloadImage(image.src);\n      return { success: true, image };\n    } catch (error) {\n      console.warn(`Failed to preload image: ${image.src}`, error);\n      return { success: false, image, error };\n    }\n  });\n  \n  const results = await Promise.all(preloadPromises);\n  const successfulImages = results\n    .filter(result => result.success)\n    .map(result => result.image);\n  \n  const failedCount = results.length - successfulImages.length;\n  \n  if (failedCount > 0) {\n    console.warn(`${failedCount} out of ${images.length} images failed to preload`);\n  } else {\n    console.log(`Successfully preloaded ${images.length} images`);\n  }\n  \n  return successfulImages;\n};\n\n/**\n * Lazy load multiple images with priority system\n */\nexport const lazyLoadImages = async (\n  images: WallpaperImage[], \n  options: {\n    priority?: 'high' | 'normal' | 'low';\n    batchSize?: number;\n    delay?: number;\n  } = {}\n): Promise<WallpaperImage[]> => {\n  const { priority = 'normal', batchSize = 3, delay = 100 } = options;\n  \n  // Adjust loading strategy based on priority\n  const loadingDelay = priority === 'high' ? 0 : priority === 'normal' ? delay : delay * 2;\n  const currentBatchSize = priority === 'high' ? batchSize * 2 : batchSize;\n  \n  const successfulImages: WallpaperImage[] = [];\n  \n  // Process images in batches to avoid overwhelming the browser\n  for (let i = 0; i < images.length; i += currentBatchSize) {\n    const batch = images.slice(i, i + currentBatchSize);\n    \n    const batchPromises = batch.map(async (image) => {\n      try {\n        await lazyLoadImage(image.src);\n        return { success: true, image };\n      } catch (error) {\n        console.warn(`Failed to lazy load image: ${image.src}`, error);\n        return { success: false, image, error };\n      }\n    });\n    \n    const batchResults = await Promise.all(batchPromises);\n    const batchSuccessful = batchResults\n      .filter(result => result.success)\n      .map(result => result.image);\n    \n    successfulImages.push(...batchSuccessful);\n    \n    // Add delay between batches (except for high priority)\n    if (loadingDelay > 0 && i + currentBatchSize < images.length) {\n      await new Promise(resolve => setTimeout(resolve, loadingDelay));\n    }\n  }\n  \n  console.log(`Lazy loaded ${successfulImages.length} out of ${images.length} images (priority: ${priority})`);\n  return successfulImages;\n};\n\n/**\n * Check if an image exists and can be loaded\n */\nexport const checkImageExists = async (src: string): Promise<boolean> => {\n  try {\n    await preloadImage(src);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Get a random image from the available images\n */\nexport const getRandomImage = (images: WallpaperImage[]): WallpaperImage | null => {\n  if (images.length === 0) return null;\n  \n  const randomIndex = Math.floor(Math.random() * images.length);\n  return images[randomIndex];\n};\n\n/**\n * Get the next image in sequence\n */\nexport const getNextImage = (images: WallpaperImage[], currentIndex: number): { image: WallpaperImage | null; nextIndex: number } => {\n  if (images.length === 0) return { image: null, nextIndex: 0 };\n  \n  const nextIndex = (currentIndex + 1) % images.length;\n  return {\n    image: images[nextIndex],\n    nextIndex\n  };\n};\n\n/**\n * Validate category name\n */\nexport const isValidCategory = (category: string): boolean => {\n  return WALLPAPER_CATEGORIES.some(cat => cat.name === category);\n};\n\n/**\n * Get display name for category\n */\nexport const getCategoryDisplayName = (category: string): string => {\n  const categoryConfig = WALLPAPER_CATEGORIES.find(cat => cat.name === category);\n  return categoryConfig?.displayName || category;\n};\n\n/**\n * Validate and filter working images from a list\n */\nexport const validateImages = async (images: WallpaperImage[]): Promise<WallpaperImage[]> => {\n  if (images.length === 0) return [];\n  \n  const validationPromises = images.map(async (image) => {\n    try {\n      const exists = await checkImageExists(image.src);\n      return exists ? image : null;\n    } catch {\n      return null;\n    }\n  });\n  \n  const results = await Promise.all(validationPromises);\n  const validImages = results.filter((image): image is WallpaperImage => image !== null);\n  \n  if (validImages.length < images.length) {\n    console.warn(`${images.length - validImages.length} images failed validation`);\n  }\n  \n  return validImages;\n};\n\n/**\n * Get images with fallback handling for missing files\n */\nexport const getImagesWithFallback = async (selectedCategories: string[]): Promise<{\n  images: WallpaperImage[];\n  errors: string[];\n}> => {\n  const allImages: WallpaperImage[] = [];\n  const errors: string[] = [];\n  \n  if (selectedCategories.length === 0) {\n    return { images: [], errors: [] };\n  }\n  \n  for (const category of selectedCategories) {\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        // Skip validation for now - just add all images from manifest\n        allImages.push(...categoryImages);\n        console.log(`Added ${categoryImages.length} images from category: ${category}`);\n      } else {\n        errors.push(`No images configured for category: ${category}`);\n      }\n    } catch (error) {\n      errors.push(`Failed to load category ${category}: ${error}`);\n    }\n  }\n  \n  return { images: allImages, errors };\n};\n\n/**\n * Get statistics for category filtering\n */\nexport const getCategoryFilteringStats = async (selectedCategories: string[]): Promise<{\n  totalCategories: number;\n  selectedCategories: number;\n  totalImages: number;\n  categoriesWithImages: string[];\n  categoriesWithoutImages: string[];\n}> => {\n  const categoriesWithImages: string[] = [];\n  const categoriesWithoutImages: string[] = [];\n  let totalImages = 0;\n\n  for (const category of selectedCategories) {\n    try {\n      const images = await getImagesForCategory(category);\n      if (images.length > 0) {\n        categoriesWithImages.push(category);\n        totalImages += images.length;\n      } else {\n        categoriesWithoutImages.push(category);\n      }\n    } catch {\n      categoriesWithoutImages.push(category);\n    }\n  }\n\n  return {\n    totalCategories: WALLPAPER_CATEGORIES.length,\n    selectedCategories: selectedCategories.length,\n    totalImages,\n    categoriesWithImages,\n    categoriesWithoutImages\n  };\n};\n\n/**\n * Update category image counts dynamically\n */\nexport const updateCategoryImageCounts = async (): Promise<CategoryConfig[]> => {\n  const updatedCategories = [...WALLPAPER_CATEGORIES];\n  \n  for (const category of updatedCategories) {\n    try {\n      const images = await getImagesForCategory(category.name);\n      category.imageCount = images.length;\n    } catch (error) {\n      console.warn(`Failed to count images for category ${category.name}:`, error);\n      category.imageCount = 0;\n    }\n  }\n  \n  return updatedCategories;\n};\n\n/**\n * Get filtered categories with immediate effect\n * This function provides real-time filtering results for the UI\n */\nexport const getFilteredCategoriesWithEffect = async (selectedCategories: string[]): Promise<{\n  filteredImages: WallpaperImage[];\n  categoryStats: {\n    [categoryName: string]: {\n      selected: boolean;\n      imageCount: number;\n      hasImages: boolean;\n    };\n  };\n  totalSelectedImages: number;\n  hasAnyImages: boolean;\n}> => {\n  const { images: filteredImages } = await getImagesWithFallback(selectedCategories);\n  const categoryStats: { [categoryName: string]: { selected: boolean; imageCount: number; hasImages: boolean } } = {};\n  \n  // Get stats for all categories\n  for (const category of WALLPAPER_CATEGORIES) {\n    const isSelected = selectedCategories.includes(category.name);\n    const categoryImages = await getImagesForCategory(category.name);\n    \n    categoryStats[category.name] = {\n      selected: isSelected,\n      imageCount: categoryImages.length,\n      hasImages: categoryImages.length > 0\n    };\n  }\n  \n  return {\n    filteredImages,\n    categoryStats,\n    totalSelectedImages: filteredImages.length,\n    hasAnyImages: filteredImages.length > 0\n  };\n};"],"mappings":"AACA,OAASA,oBAAoB,KAAQ,aAAa,CAElD;AACA,GAAI,CAAAC,aAAuC,CAAG,CAAC,CAAC,CAEhD;AACA,GAAI,CACF;AACAA,aAAa,CAAGC,OAAO,CAAC,4BAA4B,CAAC,CACrDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEH,aAAa,CAAC,CACtD,CAAE,MAAOI,KAAK,CAAE,CACdF,OAAO,CAACG,IAAI,CAAC,gDAAgD,CAAED,KAAK,CAAC,CACrE;AACAJ,aAAa,CAAG,CACdM,MAAM,CAAE,CACN,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,mCAAmC,CACpC,CACDC,KAAK,CAAE,CACL,0CAA0C,CAC1C,sCAAsC,CACtC,sCAAsC,CACvC,CACDC,WAAW,CAAE,CACX,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,kBAAkB,CAClB,cAAc,CACf,CACDC,UAAU,CAAE,CACV,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACvC,CACDC,YAAY,CAAE,CACZ,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,cAAc,CACd,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACtC,sCAAsC,CACvC,CACDC,MAAM,CAAE,CACN,sCAAsC,CACtC,sCAAsC,CACvC,CACDC,SAAS,CAAE,CACT,sCAAsC,CACtC,kBAAkB,CAClB,cAAc,CACd,sCAAsC,CACvC,CACDC,MAAM,CAAE,CACN,sCAAsC,CACtC,sCAAsC,CACvC,CACDC,KAAK,CAAE,CACL,iDAAiD,CACjD,iDAAiD,CACjD,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC7C,6CAA6C,CAC9C,CACDC,KAAK,CAAE,EAAE,CACTC,EAAE,CAAE,EAAE,CACNC,IAAI,CAAE,EACR,CAAC,CACH,CAEA;AACA;AACA,GAEA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,sBAAsB,CAAG,KAAO,CAAAC,kBAA4B,EAAgC,CACvG;AACA,GAAIA,kBAAkB,CAACC,MAAM,GAAK,CAAC,CAAE,CACnClB,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC,CAClF,MAAO,EAAE,CACX,CAEA,KAAM,CAAAkB,SAA2B,CAAG,EAAE,CACtC,KAAM,CAAAC,gBAA0B,CAAG,EAAE,CAErC;AACA,IAAK,KAAM,CAAAC,QAAQ,GAAI,CAAAJ,kBAAkB,CAAE,CACzC;AACA,GAAI,CAACK,eAAe,CAACD,QAAQ,CAAC,CAAE,CAC9BrB,OAAO,CAACG,IAAI,2BAAAoB,MAAA,CAA2BF,QAAQ,CAAE,CAAC,CAClDD,gBAAgB,CAACI,IAAI,CAACH,QAAQ,CAAC,CAC/B,SACF,CAEA,GAAI,CACF,KAAM,CAAAI,cAAc,CAAG,KAAM,CAAAC,oBAAoB,CAACL,QAAQ,CAAC,CAC3D,GAAII,cAAc,CAACP,MAAM,CAAG,CAAC,CAAE,CAC7BC,SAAS,CAACK,IAAI,CAAC,GAAGC,cAAc,CAAC,CACjCzB,OAAO,CAACC,GAAG,wBAAAsB,MAAA,CAAwBE,cAAc,CAACP,MAAM,4BAAAK,MAAA,CAA0BF,QAAQ,CAAE,CAAC,CAC/F,CAAC,IAAM,CACLrB,OAAO,CAACG,IAAI,kCAAAoB,MAAA,CAAkCF,QAAQ,CAAE,CAAC,CACzDD,gBAAgB,CAACI,IAAI,CAACH,QAAQ,CAAC,CACjC,CACF,CAAE,MAAOnB,KAAK,CAAE,CACdF,OAAO,CAACG,IAAI,wCAAAoB,MAAA,CAAwCF,QAAQ,EAAInB,KAAK,CAAC,CACtEkB,gBAAgB,CAACI,IAAI,CAACH,QAAQ,CAAC,CACjC,CACF,CAEA;AACA,KAAM,CAAAM,oBAAoB,CAAGV,kBAAkB,CAACW,MAAM,CAACC,GAAG,EAAI,CAACT,gBAAgB,CAACU,QAAQ,CAACD,GAAG,CAAC,CAAC,CAC9F7B,OAAO,CAACC,GAAG,+BAAgC,CACzCgB,kBAAkB,CAClBU,oBAAoB,CACpBP,gBAAgB,CAChBW,WAAW,CAAEZ,SAAS,CAACD,MACzB,CAAC,CAAC,CAEF,MAAO,CAAAC,SAAS,CAClB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAO,oBAAoB,CAAG,KAAO,CAAAL,QAAgB,EAAgC,CACzF,KAAM,CAAAW,SAAS,CAAGlC,aAAa,CAACuB,QAAQ,CAAC,EAAI,EAAE,CAC/CrB,OAAO,CAACC,GAAG,gCAAAsB,MAAA,CAAgCF,QAAQ,MAAKW,SAAS,CAAC,CAElE,KAAM,CAAAC,MAAM,CAAGD,SAAS,CAACE,GAAG,CAACC,QAAQ,GAAK,CACxCC,GAAG,IAAAb,MAAA,CAAKc,OAAO,CAACC,GAAG,CAACC,UAAU,iBAAAhB,MAAA,CAAeF,QAAQ,MAAAE,MAAA,CAAIY,QAAQ,CAAE,CACnEd,QAAQ,CACRc,QACF,CAAC,CAAC,CAAC,CAEHnC,OAAO,CAACC,GAAG,YAAAsB,MAAA,CAAYU,MAAM,CAACf,MAAM,iCAAAK,MAAA,CAA+BF,QAAQ,CAAE,CAAC,CAC9E,MAAO,CAAAY,MAAM,CACf,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAO,YAAY,CAAIJ,GAAW,EAAoB,CAC1D,MAAO,IAAI,CAAAK,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CAEvB;AACA,KAAM,CAAAC,OAAO,CAAGC,UAAU,CAAC,IAAM,CAC/BJ,MAAM,CAAC,GAAI,CAAAK,KAAK,wBAAAzB,MAAA,CAAwBa,GAAG,CAAE,CAAC,CAAC,CACjD,CAAC,CAAE,KAAK,CAAC,CAAE;AAEXQ,GAAG,CAACK,MAAM,CAAG,IAAM,CACjBC,YAAY,CAACJ,OAAO,CAAC,CACrBJ,OAAO,CAAC,CAAC,CACX,CAAC,CAEDE,GAAG,CAACO,OAAO,CAAG,IAAM,CAClBD,YAAY,CAACJ,OAAO,CAAC,CACrBH,MAAM,CAAC,GAAI,CAAAK,KAAK,0BAAAzB,MAAA,CAA0Ba,GAAG,CAAE,CAAC,CAAC,CACnD,CAAC,CAEDQ,GAAG,CAACR,GAAG,CAAGA,GAAG,CACf,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAgB,aAAa,CAAG,QAAAA,CAAChB,GAAW,CAGH,IAHK,CAAAiB,OAG1C,CAAAC,SAAA,CAAApC,MAAA,IAAAoC,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CAAC,CACJ,MAAO,IAAI,CAAAb,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CAEvB;AACA,KAAM,CAAEW,UAAU,CAAG,MAAM,CAAEC,SAAS,CAAG,GAAI,CAAC,CAAGJ,OAAO,CAExD;AACA,KAAM,CAAAP,OAAO,CAAGC,UAAU,CAAC,IAAM,CAC/BJ,MAAM,CAAC,GAAI,CAAAK,KAAK,uBAAAzB,MAAA,CAAuBa,GAAG,CAAE,CAAC,CAAC,CAChD,CAAC,CAAE,KAAK,CAAC,CAAE;AAEXQ,GAAG,CAACK,MAAM,CAAG,IAAM,CACjBC,YAAY,CAACJ,OAAO,CAAC,CACrBJ,OAAO,CAACE,GAAG,CAAC,CACd,CAAC,CAEDA,GAAG,CAACO,OAAO,CAAG,IAAM,CAClBD,YAAY,CAACJ,OAAO,CAAC,CACrBH,MAAM,CAAC,GAAI,CAAAK,KAAK,+BAAAzB,MAAA,CAA+Ba,GAAG,CAAE,CAAC,CAAC,CACxD,CAAC,CAED;AACA,GAAI,sBAAsB,EAAI,CAAAsB,MAAM,CAAE,CACpC,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CAAEC,OAAO,EAAK,CACrDA,OAAO,CAACC,OAAO,CAACC,KAAK,EAAI,CACvB,GAAIA,KAAK,CAACC,cAAc,CAAE,CACxBpB,GAAG,CAACR,GAAG,CAAGA,GAAG,CACbuB,QAAQ,CAACM,SAAS,CAACrB,GAAG,CAAC,CACzB,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAAEY,UAAU,CAAEC,SAAU,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAS,WAAW,CAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CACjDF,WAAW,CAACG,KAAK,CAACC,KAAK,CAAG,KAAK,CAC/BJ,WAAW,CAACG,KAAK,CAACE,MAAM,CAAG,KAAK,CAChCL,WAAW,CAACG,KAAK,CAACG,QAAQ,CAAG,UAAU,CACvCN,WAAW,CAACG,KAAK,CAACI,GAAG,CAAG,GAAG,CAC3BP,WAAW,CAACG,KAAK,CAACK,IAAI,CAAG,GAAG,CAC5BP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,WAAW,CAAC,CAEtCP,QAAQ,CAACkB,OAAO,CAACX,WAAW,CAAC,CAE7B;AACAtB,GAAG,CAACK,MAAM,CAAG,IAAM,CACjBC,YAAY,CAACJ,OAAO,CAAC,CACrBqB,QAAQ,CAACQ,IAAI,CAACG,WAAW,CAACZ,WAAW,CAAC,CACtCxB,OAAO,CAACE,GAAG,CAAC,CACd,CAAC,CACH,CAAC,IAAM,CACL;AACAA,GAAG,CAACR,GAAG,CAAGA,GAAG,CACf,CACF,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAA2C,aAAa,CAAG,KAAO,CAAA9C,MAAwB,EAAgC,CAC1F,KAAM,CAAA+C,eAAe,CAAG/C,MAAM,CAACC,GAAG,CAAC,KAAO,CAAA+C,KAAK,EAAK,CAClD,GAAI,CACF,KAAM,CAAAzC,YAAY,CAACyC,KAAK,CAAC7C,GAAG,CAAC,CAC7B,MAAO,CAAE8C,OAAO,CAAE,IAAI,CAAED,KAAM,CAAC,CACjC,CAAE,MAAO/E,KAAK,CAAE,CACdF,OAAO,CAACG,IAAI,6BAAAoB,MAAA,CAA6B0D,KAAK,CAAC7C,GAAG,EAAIlC,KAAK,CAAC,CAC5D,MAAO,CAAEgF,OAAO,CAAE,KAAK,CAAED,KAAK,CAAE/E,KAAM,CAAC,CACzC,CACF,CAAC,CAAC,CAEF,KAAM,CAAAiF,OAAO,CAAG,KAAM,CAAA1C,OAAO,CAAC2C,GAAG,CAACJ,eAAe,CAAC,CAClD,KAAM,CAAAK,gBAAgB,CAAGF,OAAO,CAC7BvD,MAAM,CAAC0D,MAAM,EAAIA,MAAM,CAACJ,OAAO,CAAC,CAChChD,GAAG,CAACoD,MAAM,EAAIA,MAAM,CAACL,KAAK,CAAC,CAE9B,KAAM,CAAAM,WAAW,CAAGJ,OAAO,CAACjE,MAAM,CAAGmE,gBAAgB,CAACnE,MAAM,CAE5D,GAAIqE,WAAW,CAAG,CAAC,CAAE,CACnBvF,OAAO,CAACG,IAAI,IAAAoB,MAAA,CAAIgE,WAAW,aAAAhE,MAAA,CAAWU,MAAM,CAACf,MAAM,6BAA2B,CAAC,CACjF,CAAC,IAAM,CACLlB,OAAO,CAACC,GAAG,2BAAAsB,MAAA,CAA2BU,MAAM,CAACf,MAAM,WAAS,CAAC,CAC/D,CAEA,MAAO,CAAAmE,gBAAgB,CACzB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAG,cAAc,CAAG,cAAAA,CAC5BvD,MAAwB,CAMM,IAL9B,CAAAoB,OAIC,CAAAC,SAAA,CAAApC,MAAA,IAAAoC,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CAAC,CAEN,KAAM,CAAEmC,QAAQ,CAAG,QAAQ,CAAEC,SAAS,CAAG,CAAC,CAAEC,KAAK,CAAG,GAAI,CAAC,CAAGtC,OAAO,CAEnE;AACA,KAAM,CAAAuC,YAAY,CAAGH,QAAQ,GAAK,MAAM,CAAG,CAAC,CAAGA,QAAQ,GAAK,QAAQ,CAAGE,KAAK,CAAGA,KAAK,CAAG,CAAC,CACxF,KAAM,CAAAE,gBAAgB,CAAGJ,QAAQ,GAAK,MAAM,CAAGC,SAAS,CAAG,CAAC,CAAGA,SAAS,CAExE,KAAM,CAAAL,gBAAkC,CAAG,EAAE,CAE7C;AACA,IAAK,GAAI,CAAAS,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG7D,MAAM,CAACf,MAAM,CAAE4E,CAAC,EAAID,gBAAgB,CAAE,CACxD,KAAM,CAAAE,KAAK,CAAG9D,MAAM,CAAC+D,KAAK,CAACF,CAAC,CAAEA,CAAC,CAAGD,gBAAgB,CAAC,CAEnD,KAAM,CAAAI,aAAa,CAAGF,KAAK,CAAC7D,GAAG,CAAC,KAAO,CAAA+C,KAAK,EAAK,CAC/C,GAAI,CACF,KAAM,CAAA7B,aAAa,CAAC6B,KAAK,CAAC7C,GAAG,CAAC,CAC9B,MAAO,CAAE8C,OAAO,CAAE,IAAI,CAAED,KAAM,CAAC,CACjC,CAAE,MAAO/E,KAAK,CAAE,CACdF,OAAO,CAACG,IAAI,+BAAAoB,MAAA,CAA+B0D,KAAK,CAAC7C,GAAG,EAAIlC,KAAK,CAAC,CAC9D,MAAO,CAAEgF,OAAO,CAAE,KAAK,CAAED,KAAK,CAAE/E,KAAM,CAAC,CACzC,CACF,CAAC,CAAC,CAEF,KAAM,CAAAgG,YAAY,CAAG,KAAM,CAAAzD,OAAO,CAAC2C,GAAG,CAACa,aAAa,CAAC,CACrD,KAAM,CAAAE,eAAe,CAAGD,YAAY,CACjCtE,MAAM,CAAC0D,MAAM,EAAIA,MAAM,CAACJ,OAAO,CAAC,CAChChD,GAAG,CAACoD,MAAM,EAAIA,MAAM,CAACL,KAAK,CAAC,CAE9BI,gBAAgB,CAAC7D,IAAI,CAAC,GAAG2E,eAAe,CAAC,CAEzC;AACA,GAAIP,YAAY,CAAG,CAAC,EAAIE,CAAC,CAAGD,gBAAgB,CAAG5D,MAAM,CAACf,MAAM,CAAE,CAC5D,KAAM,IAAI,CAAAuB,OAAO,CAACC,OAAO,EAAIK,UAAU,CAACL,OAAO,CAAEkD,YAAY,CAAC,CAAC,CACjE,CACF,CAEA5F,OAAO,CAACC,GAAG,gBAAAsB,MAAA,CAAgB8D,gBAAgB,CAACnE,MAAM,aAAAK,MAAA,CAAWU,MAAM,CAACf,MAAM,wBAAAK,MAAA,CAAsBkE,QAAQ,KAAG,CAAC,CAC5G,MAAO,CAAAJ,gBAAgB,CACzB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAe,gBAAgB,CAAG,KAAO,CAAAhE,GAAW,EAAuB,CACvE,GAAI,CACF,KAAM,CAAAI,YAAY,CAACJ,GAAG,CAAC,CACvB,MAAO,KAAI,CACb,CAAE,MAAAiE,OAAA,CAAM,CACN,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAIrE,MAAwB,EAA4B,CACjF,GAAIA,MAAM,CAACf,MAAM,GAAK,CAAC,CAAE,MAAO,KAAI,CAEpC,KAAM,CAAAqF,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC7F,MAAM,CAAC,CAAC,CAAGsB,MAAM,CAACf,MAAM,CAAC,CAC7D,MAAO,CAAAe,MAAM,CAACsE,WAAW,CAAC,CAC5B,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAG,YAAY,CAAGA,CAACzE,MAAwB,CAAE0E,YAAoB,GAA0D,CACnI,GAAI1E,MAAM,CAACf,MAAM,GAAK,CAAC,CAAE,MAAO,CAAE+D,KAAK,CAAE,IAAI,CAAE2B,SAAS,CAAE,CAAE,CAAC,CAE7D,KAAM,CAAAA,SAAS,CAAG,CAACD,YAAY,CAAG,CAAC,EAAI1E,MAAM,CAACf,MAAM,CACpD,MAAO,CACL+D,KAAK,CAAEhD,MAAM,CAAC2E,SAAS,CAAC,CACxBA,SACF,CAAC,CACH,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAtF,eAAe,CAAID,QAAgB,EAAc,CAC5D,MAAO,CAAAxB,oBAAoB,CAACgH,IAAI,CAAChF,GAAG,EAAIA,GAAG,CAACiF,IAAI,GAAKzF,QAAQ,CAAC,CAChE,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAA0F,sBAAsB,CAAI1F,QAAgB,EAAa,CAClE,KAAM,CAAA2F,cAAc,CAAGnH,oBAAoB,CAACoH,IAAI,CAACpF,GAAG,EAAIA,GAAG,CAACiF,IAAI,GAAKzF,QAAQ,CAAC,CAC9E,MAAO,CAAA2F,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAEE,WAAW,GAAI7F,QAAQ,CAChD,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAA8F,cAAc,CAAG,KAAO,CAAAlF,MAAwB,EAAgC,CAC3F,GAAIA,MAAM,CAACf,MAAM,GAAK,CAAC,CAAE,MAAO,EAAE,CAElC,KAAM,CAAAkG,kBAAkB,CAAGnF,MAAM,CAACC,GAAG,CAAC,KAAO,CAAA+C,KAAK,EAAK,CACrD,GAAI,CACF,KAAM,CAAAoC,MAAM,CAAG,KAAM,CAAAjB,gBAAgB,CAACnB,KAAK,CAAC7C,GAAG,CAAC,CAChD,MAAO,CAAAiF,MAAM,CAAGpC,KAAK,CAAG,IAAI,CAC9B,CAAE,MAAAqC,QAAA,CAAM,CACN,MAAO,KAAI,CACb,CACF,CAAC,CAAC,CAEF,KAAM,CAAAnC,OAAO,CAAG,KAAM,CAAA1C,OAAO,CAAC2C,GAAG,CAACgC,kBAAkB,CAAC,CACrD,KAAM,CAAAG,WAAW,CAAGpC,OAAO,CAACvD,MAAM,CAAEqD,KAAK,EAA8BA,KAAK,GAAK,IAAI,CAAC,CAEtF,GAAIsC,WAAW,CAACrG,MAAM,CAAGe,MAAM,CAACf,MAAM,CAAE,CACtClB,OAAO,CAACG,IAAI,IAAAoB,MAAA,CAAIU,MAAM,CAACf,MAAM,CAAGqG,WAAW,CAACrG,MAAM,6BAA2B,CAAC,CAChF,CAEA,MAAO,CAAAqG,WAAW,CACpB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,qBAAqB,CAAG,KAAO,CAAAvG,kBAA4B,EAGlE,CACJ,KAAM,CAAAE,SAA2B,CAAG,EAAE,CACtC,KAAM,CAAAsG,MAAgB,CAAG,EAAE,CAE3B,GAAIxG,kBAAkB,CAACC,MAAM,GAAK,CAAC,CAAE,CACnC,MAAO,CAAEe,MAAM,CAAE,EAAE,CAAEwF,MAAM,CAAE,EAAG,CAAC,CACnC,CAEA,IAAK,KAAM,CAAApG,QAAQ,GAAI,CAAAJ,kBAAkB,CAAE,CACzC,GAAI,CACF,KAAM,CAAAQ,cAAc,CAAG,KAAM,CAAAC,oBAAoB,CAACL,QAAQ,CAAC,CAC3D,GAAII,cAAc,CAACP,MAAM,CAAG,CAAC,CAAE,CAC7B;AACAC,SAAS,CAACK,IAAI,CAAC,GAAGC,cAAc,CAAC,CACjCzB,OAAO,CAACC,GAAG,UAAAsB,MAAA,CAAUE,cAAc,CAACP,MAAM,4BAAAK,MAAA,CAA0BF,QAAQ,CAAE,CAAC,CACjF,CAAC,IAAM,CACLoG,MAAM,CAACjG,IAAI,uCAAAD,MAAA,CAAuCF,QAAQ,CAAE,CAAC,CAC/D,CACF,CAAE,MAAOnB,KAAK,CAAE,CACduH,MAAM,CAACjG,IAAI,4BAAAD,MAAA,CAA4BF,QAAQ,OAAAE,MAAA,CAAKrB,KAAK,CAAE,CAAC,CAC9D,CACF,CAEA,MAAO,CAAE+B,MAAM,CAAEd,SAAS,CAAEsG,MAAO,CAAC,CACtC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,yBAAyB,CAAG,KAAO,CAAAzG,kBAA4B,EAMtE,CACJ,KAAM,CAAA0G,oBAA8B,CAAG,EAAE,CACzC,KAAM,CAAAC,uBAAiC,CAAG,EAAE,CAC5C,GAAI,CAAA7F,WAAW,CAAG,CAAC,CAEnB,IAAK,KAAM,CAAAV,QAAQ,GAAI,CAAAJ,kBAAkB,CAAE,CACzC,GAAI,CACF,KAAM,CAAAgB,MAAM,CAAG,KAAM,CAAAP,oBAAoB,CAACL,QAAQ,CAAC,CACnD,GAAIY,MAAM,CAACf,MAAM,CAAG,CAAC,CAAE,CACrByG,oBAAoB,CAACnG,IAAI,CAACH,QAAQ,CAAC,CACnCU,WAAW,EAAIE,MAAM,CAACf,MAAM,CAC9B,CAAC,IAAM,CACL0G,uBAAuB,CAACpG,IAAI,CAACH,QAAQ,CAAC,CACxC,CACF,CAAE,MAAAwG,QAAA,CAAM,CACND,uBAAuB,CAACpG,IAAI,CAACH,QAAQ,CAAC,CACxC,CACF,CAEA,MAAO,CACLyG,eAAe,CAAEjI,oBAAoB,CAACqB,MAAM,CAC5CD,kBAAkB,CAAEA,kBAAkB,CAACC,MAAM,CAC7Ca,WAAW,CACX4F,oBAAoB,CACpBC,uBACF,CAAC,CACH,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAG,yBAAyB,CAAG,KAAAA,CAAA,GAAuC,CAC9E,KAAM,CAAAC,iBAAiB,CAAG,CAAC,GAAGnI,oBAAoB,CAAC,CAEnD,IAAK,KAAM,CAAAwB,QAAQ,GAAI,CAAA2G,iBAAiB,CAAE,CACxC,GAAI,CACF,KAAM,CAAA/F,MAAM,CAAG,KAAM,CAAAP,oBAAoB,CAACL,QAAQ,CAACyF,IAAI,CAAC,CACxDzF,QAAQ,CAAC4G,UAAU,CAAGhG,MAAM,CAACf,MAAM,CACrC,CAAE,MAAOhB,KAAK,CAAE,CACdF,OAAO,CAACG,IAAI,wCAAAoB,MAAA,CAAwCF,QAAQ,CAACyF,IAAI,MAAK5G,KAAK,CAAC,CAC5EmB,QAAQ,CAAC4G,UAAU,CAAG,CAAC,CACzB,CACF,CAEA,MAAO,CAAAD,iBAAiB,CAC1B,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,+BAA+B,CAAG,KAAO,CAAAjH,kBAA4B,EAW5E,CACJ,KAAM,CAAEgB,MAAM,CAAEkG,cAAe,CAAC,CAAG,KAAM,CAAAX,qBAAqB,CAACvG,kBAAkB,CAAC,CAClF,KAAM,CAAAmH,aAAwG,CAAG,CAAC,CAAC,CAEnH;AACA,IAAK,KAAM,CAAA/G,QAAQ,GAAI,CAAAxB,oBAAoB,CAAE,CAC3C,KAAM,CAAAwI,UAAU,CAAGpH,kBAAkB,CAACa,QAAQ,CAACT,QAAQ,CAACyF,IAAI,CAAC,CAC7D,KAAM,CAAArF,cAAc,CAAG,KAAM,CAAAC,oBAAoB,CAACL,QAAQ,CAACyF,IAAI,CAAC,CAEhEsB,aAAa,CAAC/G,QAAQ,CAACyF,IAAI,CAAC,CAAG,CAC7BwB,QAAQ,CAAED,UAAU,CACpBJ,UAAU,CAAExG,cAAc,CAACP,MAAM,CACjCqH,SAAS,CAAE9G,cAAc,CAACP,MAAM,CAAG,CACrC,CAAC,CACH,CAEA,MAAO,CACLiH,cAAc,CACdC,aAAa,CACbI,mBAAmB,CAAEL,cAAc,CAACjH,MAAM,CAC1CuH,YAAY,CAAEN,cAAc,CAACjH,MAAM,CAAG,CACxC,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}