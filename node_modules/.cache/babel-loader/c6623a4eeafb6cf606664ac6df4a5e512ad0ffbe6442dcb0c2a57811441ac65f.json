{"ast":null,"code":"import _objectSpread from\"/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useCallback,useEffect}from'react';import Clock from'./Clock';import Wallpaper from'./Wallpaper';import Settings from'./Settings';import SettingsButton from'./SettingsButton';import FocusTimer from'./FocusTimer';import ErrorBoundary from'./ErrorBoundary';import{useLocalStorage}from'../hooks/useLocalStorage';import{useMouseActivity}from'../hooks/useMouseActivity';import{DEFAULT_SETTINGS}from'../utils/constants';import{registerServiceWorker}from'../utils/serviceWorker';import'../styles/App.css';import'../styles/ErrorBoundary.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Load settings from localStorage\nconst{settings:storedSettings,isLoaded,saveSettings}=useLocalStorage();// Application state - initialize with defaults, will be updated when settings load\nconst[appState,setAppState]=useState({clockEnabled:DEFAULT_SETTINGS.clockEnabled,wallpaperEnabled:DEFAULT_SETTINGS.wallpaperEnabled,selectedCategories:DEFAULT_SETTINGS.selectedCategories,displayMode:DEFAULT_SETTINGS.displayMode,settingsVisible:false,rotationInterval:DEFAULT_SETTINGS.rotationInterval,timeFormat:DEFAULT_SETTINGS.timeFormat});// Settings panel state (separate from mouse activity)\nconst[settingsPanelOpen,setSettingsPanelOpen]=useState(false);// Mouse activity detection for settings panel\nconst{isActive}=useMouseActivity();// Register service worker for offline functionality\nuseEffect(()=>{registerServiceWorker({onSuccess:registration=>{console.log('Service Worker registered successfully');},onUpdate:registration=>{console.log('New content available, please refresh');// Could show a notification to user here\n},onOffline:()=>{console.log('App is now offline');// Could show offline indicator\n},onOnline:()=>{console.log('App is back online');// Could hide offline indicator\n}});},[]);// Update app state when stored settings are loaded\nuseEffect(()=>{if(isLoaded){setAppState(prev=>_objectSpread(_objectSpread({},prev),{},{clockEnabled:storedSettings.clockEnabled,wallpaperEnabled:storedSettings.wallpaperEnabled,selectedCategories:storedSettings.selectedCategories,displayMode:storedSettings.displayMode,rotationInterval:storedSettings.rotationInterval,timeFormat:storedSettings.timeFormat}));}},[isLoaded,storedSettings]);// Update settings button visible state based on mouse activity\nuseEffect(()=>{setAppState(prev=>_objectSpread(_objectSpread({},prev),{},{settingsVisible:isActive}));},[isActive]);// Handle settings button click\nconst handleSettingsButtonClick=useCallback(()=>{setSettingsPanelOpen(true);},[]);// Handle settings panel close\nconst handleSettingsPanelClose=useCallback(()=>{setSettingsPanelOpen(false);},[]);// Handle settings changes\nconst handleSettingsChange=useCallback(newSettings=>{const updatedSettings=_objectSpread(_objectSpread({},storedSettings),newSettings);// Update stored settings\nsaveSettings(updatedSettings);// Update app state immediately for responsive UI\nsetAppState(prev=>_objectSpread(_objectSpread({},prev),{},{clockEnabled:updatedSettings.clockEnabled,wallpaperEnabled:updatedSettings.wallpaperEnabled,selectedCategories:updatedSettings.selectedCategories,displayMode:updatedSettings.displayMode,rotationInterval:updatedSettings.rotationInterval,timeFormat:updatedSettings.timeFormat}));},[storedSettings,saveSettings]);// Determine what to render based on display mode\nconst shouldRenderClock=storedSettings.displayMode==='digital-clock';const shouldRenderWallpaper=storedSettings.displayMode==='wallpaper';const shouldRenderFocusTimer=storedSettings.displayMode==='focus-mode';// Clock is always full screen in digital-clock mode\nconst isClockFullScreen=true;const clockPosition='center';// Don't render until settings are loaded to prevent flash of default content\nif(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{className:\"app app-loading\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading-message\",children:\"Loading...\"})});}return/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"app app-error\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"app-error-content\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Desktop Clock Error\"}),/*#__PURE__*/_jsx(\"p\",{children:\"The application encountered an unexpected error and needs to be reloaded.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),children:\"Reload Application\"})]})}),onError:(error,errorInfo)=>{console.error('App Error Boundary caught error:',error,errorInfo);},children:/*#__PURE__*/_jsxs(\"div\",{className:\"app \".concat(getAppModeClass(storedSettings.displayMode)),children:[shouldRenderWallpaper&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"wallpaper-error-fallback\",children:/*#__PURE__*/_jsx(\"div\",{className:\"wallpaper-error-message\",children:\"Wallpaper component failed to load\"})}),children:/*#__PURE__*/_jsx(Wallpaper,{categories:storedSettings.selectedCategories,rotationInterval:storedSettings.rotationInterval,enabled:true})}),shouldRenderClock&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"clock-error-fallback\",children:/*#__PURE__*/_jsx(\"div\",{className:\"clock-error-message\",children:\"Clock component failed to load\"})}),children:/*#__PURE__*/_jsx(Clock,{isFullScreen:isClockFullScreen,position:clockPosition,timeFormat:storedSettings.timeFormat,fontColor:storedSettings.fontColor,fontFamily:storedSettings.fontFamily})}),shouldRenderFocusTimer&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"focus-timer-error-fallback\",children:/*#__PURE__*/_jsx(\"div\",{className:\"focus-timer-error-message\",children:\"Focus Timer component failed to load\"})}),children:/*#__PURE__*/_jsx(FocusTimer,{fontColor:storedSettings.fontColor,fontFamily:storedSettings.fontFamily,timeFormat:storedSettings.timeFormat})}),!shouldRenderFocusTimer&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"settings-error-fallback\",children:\"Settings button unavailable\"}),children:/*#__PURE__*/_jsx(SettingsButton,{isVisible:appState.settingsVisible,onClick:handleSettingsButtonClick})}),!shouldRenderFocusTimer&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{className:\"settings-error-fallback\",children:\"Settings panel unavailable\"}),children:/*#__PURE__*/_jsx(Settings,{isVisible:settingsPanelOpen,onSettingsChange:handleSettingsChange,currentSettings:storedSettings,onClose:handleSettingsPanelClose})})]})});}/**\n * Get CSS class for app container based on display mode\n */function getAppModeClass(displayMode){return\"app-mode-\".concat(displayMode);}export default App;","map":{"version":3,"names":["React","useState","useCallback","useEffect","Clock","Wallpaper","Settings","SettingsButton","FocusTimer","ErrorBoundary","useLocalStorage","useMouseActivity","DEFAULT_SETTINGS","registerServiceWorker","jsx","_jsx","jsxs","_jsxs","App","settings","storedSettings","isLoaded","saveSettings","appState","setAppState","clockEnabled","wallpaperEnabled","selectedCategories","displayMode","settingsVisible","rotationInterval","timeFormat","settingsPanelOpen","setSettingsPanelOpen","isActive","onSuccess","registration","console","log","onUpdate","onOffline","onOnline","prev","_objectSpread","handleSettingsButtonClick","handleSettingsPanelClose","handleSettingsChange","newSettings","updatedSettings","shouldRenderClock","shouldRenderWallpaper","shouldRenderFocusTimer","isClockFullScreen","clockPosition","className","children","fallback","onClick","window","location","reload","onError","error","errorInfo","concat","getAppModeClass","categories","enabled","isFullScreen","position","fontColor","fontFamily","isVisible","onSettingsChange","currentSettings","onClose"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/components/App.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Clock from './Clock';\nimport Wallpaper from './Wallpaper';\nimport Settings from './Settings';\nimport SettingsButton from './SettingsButton';\nimport FocusTimer from './FocusTimer';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useMouseActivity } from '../hooks/useMouseActivity';\n\nimport { AppState, AppSettings, DisplayMode } from '../types';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\nimport { registerServiceWorker } from '../utils/serviceWorker';\nimport '../styles/App.css';\nimport '../styles/ErrorBoundary.css';\n\nfunction App() {\n  // Load settings from localStorage\n  const { settings: storedSettings, isLoaded, saveSettings } = useLocalStorage();\n\n  // Application state - initialize with defaults, will be updated when settings load\n  const [appState, setAppState] = useState<AppState>({\n    clockEnabled: DEFAULT_SETTINGS.clockEnabled,\n    wallpaperEnabled: DEFAULT_SETTINGS.wallpaperEnabled,\n    selectedCategories: DEFAULT_SETTINGS.selectedCategories,\n    displayMode: DEFAULT_SETTINGS.displayMode,\n    settingsVisible: false,\n    rotationInterval: DEFAULT_SETTINGS.rotationInterval,\n    timeFormat: DEFAULT_SETTINGS.timeFormat,\n  });\n\n  // Settings panel state (separate from mouse activity)\n  const [settingsPanelOpen, setSettingsPanelOpen] = useState(false);\n\n  // Mouse activity detection for settings panel\n  const { isActive } = useMouseActivity();\n\n  // Register service worker for offline functionality\n  useEffect(() => {\n    registerServiceWorker({\n      onSuccess: (registration) => {\n        console.log('Service Worker registered successfully');\n      },\n      onUpdate: (registration) => {\n        console.log('New content available, please refresh');\n        // Could show a notification to user here\n      },\n      onOffline: () => {\n        console.log('App is now offline');\n        // Could show offline indicator\n      },\n      onOnline: () => {\n        console.log('App is back online');\n        // Could hide offline indicator\n      }\n    });\n  }, []);\n\n  // Update app state when stored settings are loaded\n  useEffect(() => {\n    if (isLoaded) {\n      setAppState(prev => ({\n        ...prev,\n        clockEnabled: storedSettings.clockEnabled,\n        wallpaperEnabled: storedSettings.wallpaperEnabled,\n        selectedCategories: storedSettings.selectedCategories,\n        displayMode: storedSettings.displayMode,\n        rotationInterval: storedSettings.rotationInterval,\n        timeFormat: storedSettings.timeFormat,\n      }));\n    }\n  }, [isLoaded, storedSettings]);\n\n  // Update settings button visible state based on mouse activity\n  useEffect(() => {\n    setAppState(prev => ({\n      ...prev,\n      settingsVisible: isActive\n    }));\n  }, [isActive]);\n\n  // Handle settings button click\n  const handleSettingsButtonClick = useCallback(() => {\n    setSettingsPanelOpen(true);\n  }, []);\n\n  // Handle settings panel close\n  const handleSettingsPanelClose = useCallback(() => {\n    setSettingsPanelOpen(false);\n  }, []);\n\n  // Handle settings changes\n  const handleSettingsChange = useCallback((newSettings: Partial<AppSettings>) => {\n    const updatedSettings = { ...storedSettings, ...newSettings };\n    \n    // Update stored settings\n    saveSettings(updatedSettings);\n    \n    // Update app state immediately for responsive UI\n    setAppState(prev => ({\n      ...prev,\n      clockEnabled: updatedSettings.clockEnabled,\n      wallpaperEnabled: updatedSettings.wallpaperEnabled,\n      selectedCategories: updatedSettings.selectedCategories,\n      displayMode: updatedSettings.displayMode,\n      rotationInterval: updatedSettings.rotationInterval,\n      timeFormat: updatedSettings.timeFormat,\n    }));\n  }, [storedSettings, saveSettings]);\n\n  // Determine what to render based on display mode\n  const shouldRenderClock = storedSettings.displayMode === 'digital-clock';\n  const shouldRenderWallpaper = storedSettings.displayMode === 'wallpaper';\n  const shouldRenderFocusTimer = storedSettings.displayMode === 'focus-mode';\n  \n  // Clock is always full screen in digital-clock mode\n  const isClockFullScreen = true;\n  const clockPosition = 'center';\n\n  // Don't render until settings are loaded to prevent flash of default content\n  if (!isLoaded) {\n    return (\n      <div className=\"app app-loading\">\n        <div className=\"loading-message\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <div className=\"app app-error\">\n          <div className=\"app-error-content\">\n            <h1>Desktop Clock Error</h1>\n            <p>The application encountered an unexpected error and needs to be reloaded.</p>\n            <button onClick={() => window.location.reload()}>\n              Reload Application\n            </button>\n          </div>\n        </div>\n      }\n      onError={(error, errorInfo) => {\n        console.error('App Error Boundary caught error:', error, errorInfo);\n      }}\n    >\n      <div className={`app ${getAppModeClass(storedSettings.displayMode)}`}>\n        {/* Wallpaper component - renders behind everything */}\n        {shouldRenderWallpaper && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"wallpaper-error-fallback\">\n                <div className=\"wallpaper-error-message\">\n                  Wallpaper component failed to load\n                </div>\n              </div>\n            }\n          >\n            <Wallpaper\n              categories={storedSettings.selectedCategories}\n              rotationInterval={storedSettings.rotationInterval}\n              enabled={true}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Clock component - positioned based on display mode */}\n        {shouldRenderClock && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"clock-error-fallback\">\n                <div className=\"clock-error-message\">\n                  Clock component failed to load\n                </div>\n              </div>\n            }\n          >\n            <Clock\n              isFullScreen={isClockFullScreen}\n              position={clockPosition}\n              timeFormat={storedSettings.timeFormat}\n              fontColor={storedSettings.fontColor}\n              fontFamily={storedSettings.fontFamily}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Focus Timer component - full screen mode */}\n        {shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"focus-timer-error-fallback\">\n                <div className=\"focus-timer-error-message\">\n                  Focus Timer component failed to load\n                </div>\n              </div>\n            }\n          >\n            <FocusTimer\n              fontColor={storedSettings.fontColor}\n              fontFamily={storedSettings.fontFamily}\n              timeFormat={storedSettings.timeFormat}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Settings button - shows on mouse activity (not in focus mode) */}\n        {!shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"settings-error-fallback\">\n                Settings button unavailable\n              </div>\n            }\n          >\n            <SettingsButton\n              isVisible={appState.settingsVisible}\n              onClick={handleSettingsButtonClick}\n            />\n          </ErrorBoundary>\n        )}\n\n        {/* Settings panel - shows when button is clicked (not in focus mode) */}\n        {!shouldRenderFocusTimer && (\n          <ErrorBoundary\n            fallback={\n              <div className=\"settings-error-fallback\">\n                Settings panel unavailable\n              </div>\n            }\n          >\n            <Settings\n              isVisible={settingsPanelOpen}\n              onSettingsChange={handleSettingsChange}\n              currentSettings={storedSettings}\n              onClose={handleSettingsPanelClose}\n            />\n          </ErrorBoundary>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Get CSS class for app container based on display mode\n */\nfunction getAppModeClass(displayMode: DisplayMode): string {\n  return `app-mode-${displayMode}`;\n}\n\nexport default App;"],"mappings":"wJAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAC/D,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAC7C,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,OAASC,eAAe,KAAQ,0BAA0B,CAC1D,OAASC,gBAAgB,KAAQ,2BAA2B,CAG5D,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,OAASC,qBAAqB,KAAQ,wBAAwB,CAC9D,MAAO,mBAAmB,CAC1B,MAAO,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA,KAAM,CAAEC,QAAQ,CAAEC,cAAc,CAAEC,QAAQ,CAAEC,YAAa,CAAC,CAAGZ,eAAe,CAAC,CAAC,CAE9E;AACA,KAAM,CAACa,QAAQ,CAAEC,WAAW,CAAC,CAAGvB,QAAQ,CAAW,CACjDwB,YAAY,CAAEb,gBAAgB,CAACa,YAAY,CAC3CC,gBAAgB,CAAEd,gBAAgB,CAACc,gBAAgB,CACnDC,kBAAkB,CAAEf,gBAAgB,CAACe,kBAAkB,CACvDC,WAAW,CAAEhB,gBAAgB,CAACgB,WAAW,CACzCC,eAAe,CAAE,KAAK,CACtBC,gBAAgB,CAAElB,gBAAgB,CAACkB,gBAAgB,CACnDC,UAAU,CAAEnB,gBAAgB,CAACmB,UAC/B,CAAC,CAAC,CAEF;AACA,KAAM,CAACC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGhC,QAAQ,CAAC,KAAK,CAAC,CAEjE;AACA,KAAM,CAAEiC,QAAS,CAAC,CAAGvB,gBAAgB,CAAC,CAAC,CAEvC;AACAR,SAAS,CAAC,IAAM,CACdU,qBAAqB,CAAC,CACpBsB,SAAS,CAAGC,YAAY,EAAK,CAC3BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CACvD,CAAC,CACDC,QAAQ,CAAGH,YAAY,EAAK,CAC1BC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACpD;AACF,CAAC,CACDE,SAAS,CAAEA,CAAA,GAAM,CACfH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjC;AACF,CAAC,CACDG,QAAQ,CAAEA,CAAA,GAAM,CACdJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjC;AACF,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACAnC,SAAS,CAAC,IAAM,CACd,GAAIkB,QAAQ,CAAE,CACZG,WAAW,CAACkB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPjB,YAAY,CAAEL,cAAc,CAACK,YAAY,CACzCC,gBAAgB,CAAEN,cAAc,CAACM,gBAAgB,CACjDC,kBAAkB,CAAEP,cAAc,CAACO,kBAAkB,CACrDC,WAAW,CAAER,cAAc,CAACQ,WAAW,CACvCE,gBAAgB,CAAEV,cAAc,CAACU,gBAAgB,CACjDC,UAAU,CAAEX,cAAc,CAACW,UAAU,EACrC,CAAC,CACL,CACF,CAAC,CAAE,CAACV,QAAQ,CAAED,cAAc,CAAC,CAAC,CAE9B;AACAjB,SAAS,CAAC,IAAM,CACdqB,WAAW,CAACkB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPb,eAAe,CAAEK,QAAQ,EACzB,CAAC,CACL,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAU,yBAAyB,CAAG1C,WAAW,CAAC,IAAM,CAClD+B,oBAAoB,CAAC,IAAI,CAAC,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAY,wBAAwB,CAAG3C,WAAW,CAAC,IAAM,CACjD+B,oBAAoB,CAAC,KAAK,CAAC,CAC7B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAa,oBAAoB,CAAG5C,WAAW,CAAE6C,WAAiC,EAAK,CAC9E,KAAM,CAAAC,eAAe,CAAAL,aAAA,CAAAA,aAAA,IAAQvB,cAAc,EAAK2B,WAAW,CAAE,CAE7D;AACAzB,YAAY,CAAC0B,eAAe,CAAC,CAE7B;AACAxB,WAAW,CAACkB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACXD,IAAI,MACPjB,YAAY,CAAEuB,eAAe,CAACvB,YAAY,CAC1CC,gBAAgB,CAAEsB,eAAe,CAACtB,gBAAgB,CAClDC,kBAAkB,CAAEqB,eAAe,CAACrB,kBAAkB,CACtDC,WAAW,CAAEoB,eAAe,CAACpB,WAAW,CACxCE,gBAAgB,CAAEkB,eAAe,CAAClB,gBAAgB,CAClDC,UAAU,CAAEiB,eAAe,CAACjB,UAAU,EACtC,CAAC,CACL,CAAC,CAAE,CAACX,cAAc,CAAEE,YAAY,CAAC,CAAC,CAElC;AACA,KAAM,CAAA2B,iBAAiB,CAAG7B,cAAc,CAACQ,WAAW,GAAK,eAAe,CACxE,KAAM,CAAAsB,qBAAqB,CAAG9B,cAAc,CAACQ,WAAW,GAAK,WAAW,CACxE,KAAM,CAAAuB,sBAAsB,CAAG/B,cAAc,CAACQ,WAAW,GAAK,YAAY,CAE1E;AACA,KAAM,CAAAwB,iBAAiB,CAAG,IAAI,CAC9B,KAAM,CAAAC,aAAa,CAAG,QAAQ,CAE9B;AACA,GAAI,CAAChC,QAAQ,CAAE,CACb,mBACEN,IAAA,QAAKuC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BxC,IAAA,QAAKuC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,YAAU,CAAK,CAAC,CAC9C,CAAC,CAEV,CAEA,mBACExC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5BtC,KAAA,QAAKqC,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCxC,IAAA,OAAAwC,QAAA,CAAI,qBAAmB,CAAI,CAAC,cAC5BxC,IAAA,MAAAwC,QAAA,CAAG,2EAAyE,CAAG,CAAC,cAChFxC,IAAA,WAAQ0C,OAAO,CAAEA,CAAA,GAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE,CAAAL,QAAA,CAAC,oBAEjD,CAAQ,CAAC,EACN,CAAC,CACH,CACN,CACDM,OAAO,CAAEA,CAACC,KAAK,CAAEC,SAAS,GAAK,CAC7B1B,OAAO,CAACyB,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAEC,SAAS,CAAC,CACrE,CAAE,CAAAR,QAAA,cAEFtC,KAAA,QAAKqC,SAAS,QAAAU,MAAA,CAASC,eAAe,CAAC7C,cAAc,CAACQ,WAAW,CAAC,CAAG,CAAA2B,QAAA,EAElEL,qBAAqB,eACpBnC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvCxC,IAAA,QAAKuC,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,oCAEzC,CAAK,CAAC,CACH,CACN,CAAAA,QAAA,cAEDxC,IAAA,CAACV,SAAS,EACR6D,UAAU,CAAE9C,cAAc,CAACO,kBAAmB,CAC9CG,gBAAgB,CAAEV,cAAc,CAACU,gBAAiB,CAClDqC,OAAO,CAAE,IAAK,CACf,CAAC,CACW,CAChB,CAGAlB,iBAAiB,eAChBlC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,sBAAsB,CAAAC,QAAA,cACnCxC,IAAA,QAAKuC,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAC,gCAErC,CAAK,CAAC,CACH,CACN,CAAAA,QAAA,cAEDxC,IAAA,CAACX,KAAK,EACJgE,YAAY,CAAEhB,iBAAkB,CAChCiB,QAAQ,CAAEhB,aAAc,CACxBtB,UAAU,CAAEX,cAAc,CAACW,UAAW,CACtCuC,SAAS,CAAElD,cAAc,CAACkD,SAAU,CACpCC,UAAU,CAAEnD,cAAc,CAACmD,UAAW,CACvC,CAAC,CACW,CAChB,CAGApB,sBAAsB,eACrBpC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,4BAA4B,CAAAC,QAAA,cACzCxC,IAAA,QAAKuC,SAAS,CAAC,2BAA2B,CAAAC,QAAA,CAAC,sCAE3C,CAAK,CAAC,CACH,CACN,CAAAA,QAAA,cAEDxC,IAAA,CAACP,UAAU,EACT8D,SAAS,CAAElD,cAAc,CAACkD,SAAU,CACpCC,UAAU,CAAEnD,cAAc,CAACmD,UAAW,CACtCxC,UAAU,CAAEX,cAAc,CAACW,UAAW,CACvC,CAAC,CACW,CAChB,CAGA,CAACoB,sBAAsB,eACtBpC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,6BAEzC,CAAK,CACN,CAAAA,QAAA,cAEDxC,IAAA,CAACR,cAAc,EACbiE,SAAS,CAAEjD,QAAQ,CAACM,eAAgB,CACpC4B,OAAO,CAAEb,yBAA0B,CACpC,CAAC,CACW,CAChB,CAGA,CAACO,sBAAsB,eACtBpC,IAAA,CAACN,aAAa,EACZ+C,QAAQ,cACNzC,IAAA,QAAKuC,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,4BAEzC,CAAK,CACN,CAAAA,QAAA,cAEDxC,IAAA,CAACT,QAAQ,EACPkE,SAAS,CAAExC,iBAAkB,CAC7ByC,gBAAgB,CAAE3B,oBAAqB,CACvC4B,eAAe,CAAEtD,cAAe,CAChCuD,OAAO,CAAE9B,wBAAyB,CACnC,CAAC,CACW,CAChB,EACE,CAAC,CACO,CAAC,CAEpB,CAEA;AACA;AACA,GACA,QAAS,CAAAoB,eAAeA,CAACrC,WAAwB,CAAU,CACzD,kBAAAoC,MAAA,CAAmBpC,WAAW,EAChC,CAEA,cAAe,CAAAV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}