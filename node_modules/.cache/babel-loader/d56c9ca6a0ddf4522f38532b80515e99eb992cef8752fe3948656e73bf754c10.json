{"ast":null,"code":"import { WALLPAPER_CATEGORIES } from './constants';\n\n// Import the generated image manifest (will be created by build script)\nlet imageManifest = {};\n\n// Try to load the manifest, fallback to hardcoded list if not available\ntry {\n  // This will be generated by the build script\n  imageManifest = require('../data/imageManifest.json');\n} catch {\n  // Fallback to current known images\n  imageManifest = {\n    rajini: ['183160b768465b686cdb7aafa99cccc5.jpg', '2a54a5f5b7a844923311411a2d68da3c.jpg', '9215ed34ce4c841ef307d148339f6515.jpg', 'b2fc0dfa57b17254d4ded63993b3917b.jpg', 'bf424df0eca803526cee028a9ef419c8.jpg', 'c192692294a5f6a269794a1f7cc738cf.jpg', 'efc647edaadddc9b8d2084ec3a0d0436.jpg', 'Thalapathy Movie Rajinikanth.jpeg'],\n    kamal: ['6a6408be15cd1e70a5df0f9848b6a5af (1).jpg', '6a6408be15cd1e70a5df0f9848b6a5af.jpg', '8b707f8aaae421c1138c4ffb5f7628bb.jpg'],\n    common_mass: ['2300fee19837861494641861116980ee.jpg', '2e534c614c562634f7f74034f9a503c9.jpg', '3d62aaf3d09f8b00c03685cc308b92fa.jpg', '4082b1e37ffdfcc9fa38159dadaccb17.jpg', '618084c21a00942335d5ca3dac51ed17.jpg', '7c3f344a162c03516a2d213d05bd14eb.jpg', '9c743a378ac5901ee040ecd272933634.jpg', '9f6c2a08e9c7432add440ce2f1f434a1.jpg', 'c6d3c282ac356d2bf0b64ae221a06dcb.jpg', 'download (1).png', 'download.png'],\n    automobile: ['0719eeee4fe543a5cd59d74093fd1a60.jpg', '0c34d4a4678aaa278ca3bd3667b938ad.jpg', '10c59d3a4300d7088c1c55639a168d72.jpg', '18c0fd619f647cc105998012c9f4501f.jpg', '1f637ed40710da202bed91cf0ee7c842.jpg', '2161839ec94977ef06a68b69f988e182.jpg', '230af357c9506065da9ef612f3f9c2c8.jpg', '3daab7279174ca42705cdfcb006d89f5.jpg', '455e53819c86ae83ded135bf63471290.jpg', '6adbc9db1fb793c6514290bb9a7cbf0b.jpg', '6c24758749d20503e526e47eb4f35c56.jpg', '736d1fc83f95cfbe0e668a50f28279c7.jpg', '904bc157166d2a58b389d85eef963ef6.jpg', '99f17ccf47325726cd9d396138e0fb09.jpg', 'c8084ab3a075a0a58406b893e6d80792.jpg', 'd0b14a7bad86fa2a40436404b25a4dfe.jpg', 'd68340f29151017b75c3cb8856577f48.jpg', 'e15aa58261b0c253a1d82b332d453e38.jpg', 'e79d844f37d4b8137277a2f5d04ab1d1.jpg', 'ebbaba49e0acdf2ef594c5c8b5721a5c.jpg', 'ebf148c7fea44ed9da4446d6bb9b5b23.jpg', 'f1e0409b472b64fa0b79b3e131c708e2.jpg', 'f41f77cdd2bb2accfcacb1663b14baf4.jpg'],\n    motivational: ['241c0b8f3e23e36b03f54cef3abfaf59.jpg', '2f4a623e29593aaf308c810360fd4f49.jpg', '3a198aec4dd0bff0ec7324c6fb6d402f.jpg', '42d9f55012b192fdd413f8ff30953cbc.jpg', '585b4f26a6b03cad75926197a2898e5b.jpg', '8053b96c0e62bb7253751f9b59674ced.jpg', '8504805b1ba2e15fd0717c1d6c2ac1fc.jpg', '90a2feda1b37fe424413d6dffee584ff.jpg', 'a9018dd554e4db3ccfdbfa5ac2d77057.jpg', 'b3a7dea905bfa34cd14e8b3a5d381817.jpg', 'ccbf76c869ce67d930278852888dc997.jpg', 'db7eab4fc2ada5526a1d99e3e0f3e1eb.jpg', 'download.png', 'e60ec0b722db2be60df0639d28b790e1.jpg', 'e7f9b22cb6764147a9f65b3302831c0b.jpg', 'f148553000afbafdcfaa83bec722b4f3.jpg', 'f6843555658beba42b8c5808bd813079.jpg', 'fa8b202e2a1f020abe41b823e4bf30cc.jpg'],\n    nature: ['13863e5a80feecfa438c88e460288d46.jpg', 'f44afe81b880a53100049c031c8afd93.jpg'],\n    spiritual: ['25c5e21914cb7b07a01805aa72f91a59.jpg', 'download (1).png', 'download.png', 'ec809e7b3d96a4c287d0a1117ecc17c0.jpg'],\n    random: ['0ab0b205f9985c50142e719c97e47b0d.jpg', '9681a53211c39a18f1c46132fb89c2e9.jpg'],\n    anime: ['characters/44a72ef96d0cb141b5a25519344ba4e0.jpg', 'characters/8e901f7e4827cac9073ae2c3131d90fa.jpg', 'places/11b9bc76763e9e07b3af0353c8c4edfb.jpg', 'places/42e18fcd2b236e57c0b8517bea6bd979.jpg', 'places/6176222d555e0023f9bcd1a50bab374c.jpg', 'places/75c62e19a9bc9136f17968ab7b9d2ac6.jpg', 'places/7632d32062dd523d9d7efedbc84f06f9.jpg', 'places/a1b6382df31b01e04742d8a48183afba.jpg', 'places/d59cd9027b79f5b5d3fb128257b8c890.jpg', 'places/f29ac662ef580ee016aff1d92ac3e2f7.jpg'],\n    bikes: [],\n    ai: [],\n    tech: []\n  };\n}\n\n/**\n * Utility functions for loading and managing wallpaper images\n */\n\n/**\n * Get all available images for specified categories (USER SELECTED CATEGORIES)\n * This is where the filtering happens based on user's category selection\n */\nexport const getImagesForCategories = async selectedCategories => {\n  // Handle edge case: no categories selected\n  if (selectedCategories.length === 0) {\n    console.log('No categories selected - returning empty array for black background');\n    return [];\n  }\n  const allImages = [];\n  const failedCategories = [];\n\n  // Only process the categories that the user has selected\n  for (const category of selectedCategories) {\n    // Validate category name\n    if (!isValidCategory(category)) {\n      console.warn(`Invalid category name: ${category}`);\n      failedCategories.push(category);\n      continue;\n    }\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        allImages.push(...categoryImages);\n        console.log(`Successfully loaded ${categoryImages.length} images from category: ${category}`);\n      } else {\n        console.warn(`No images found for category: ${category}`);\n        failedCategories.push(category);\n      }\n    } catch (error) {\n      console.warn(`Failed to load images for category: ${category}`, error);\n      failedCategories.push(category);\n    }\n  }\n\n  // Log results for debugging\n  const successfulCategories = selectedCategories.filter(cat => !failedCategories.includes(cat));\n  console.log(`Category filtering results:`, {\n    selectedCategories,\n    successfulCategories,\n    failedCategories,\n    totalImages: allImages.length\n  });\n  return allImages;\n};\n\n/**\n * Get all images for a specific category from the manifest\n */\nexport const getImagesForCategory = async category => {\n  const filenames = imageManifest[category] || [];\n  return filenames.map(filename => ({\n    src: `/wallpapers/${category}/${filename}`,\n    category,\n    filename\n  }));\n};\n\n/**\n * Preload an image to ensure smooth transitions\n */\nexport const preloadImage = src => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    // Set timeout to prevent hanging on slow/broken images\n    const timeout = setTimeout(() => {\n      reject(new Error(`Image load timeout: ${src}`));\n    }, 10000); // 10 second timeout\n\n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve();\n    };\n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    img.src = src;\n  });\n};\n\n/**\n * Lazy load image with Intersection Observer API\n */\nexport const lazyLoadImage = (src, options = {}) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    // Default options for lazy loading\n    const {\n      rootMargin = '50px',\n      threshold = 0.1\n    } = options;\n\n    // Set timeout for loading\n    const timeout = setTimeout(() => {\n      reject(new Error(`Lazy load timeout: ${src}`));\n    }, 15000); // 15 second timeout for lazy loading\n\n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve(img);\n    };\n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to lazy load image: ${src}`));\n    };\n\n    // Use Intersection Observer for lazy loading if supported\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            img.src = src;\n            observer.unobserve(img);\n          }\n        });\n      }, {\n        rootMargin,\n        threshold\n      });\n\n      // Create a placeholder element to observe\n      const placeholder = document.createElement('div');\n      placeholder.style.width = '1px';\n      placeholder.style.height = '1px';\n      placeholder.style.position = 'absolute';\n      placeholder.style.top = '0';\n      placeholder.style.left = '0';\n      document.body.appendChild(placeholder);\n      observer.observe(placeholder);\n\n      // Clean up placeholder after loading\n      img.onload = () => {\n        clearTimeout(timeout);\n        document.body.removeChild(placeholder);\n        resolve(img);\n      };\n    } else {\n      // Fallback: load immediately if Intersection Observer not supported\n      img.src = src;\n    }\n  });\n};\n\n/**\n * Preload multiple images with error tolerance\n */\nexport const preloadImages = async images => {\n  const preloadPromises = images.map(async image => {\n    try {\n      await preloadImage(image.src);\n      return {\n        success: true,\n        image\n      };\n    } catch (error) {\n      console.warn(`Failed to preload image: ${image.src}`, error);\n      return {\n        success: false,\n        image,\n        error\n      };\n    }\n  });\n  const results = await Promise.all(preloadPromises);\n  const successfulImages = results.filter(result => result.success).map(result => result.image);\n  const failedCount = results.length - successfulImages.length;\n  if (failedCount > 0) {\n    console.warn(`${failedCount} out of ${images.length} images failed to preload`);\n  } else {\n    console.log(`Successfully preloaded ${images.length} images`);\n  }\n  return successfulImages;\n};\n\n/**\n * Lazy load multiple images with priority system\n */\nexport const lazyLoadImages = async (images, options = {}) => {\n  const {\n    priority = 'normal',\n    batchSize = 3,\n    delay = 100\n  } = options;\n\n  // Adjust loading strategy based on priority\n  const loadingDelay = priority === 'high' ? 0 : priority === 'normal' ? delay : delay * 2;\n  const currentBatchSize = priority === 'high' ? batchSize * 2 : batchSize;\n  const successfulImages = [];\n\n  // Process images in batches to avoid overwhelming the browser\n  for (let i = 0; i < images.length; i += currentBatchSize) {\n    const batch = images.slice(i, i + currentBatchSize);\n    const batchPromises = batch.map(async image => {\n      try {\n        await lazyLoadImage(image.src);\n        return {\n          success: true,\n          image\n        };\n      } catch (error) {\n        console.warn(`Failed to lazy load image: ${image.src}`, error);\n        return {\n          success: false,\n          image,\n          error\n        };\n      }\n    });\n    const batchResults = await Promise.all(batchPromises);\n    const batchSuccessful = batchResults.filter(result => result.success).map(result => result.image);\n    successfulImages.push(...batchSuccessful);\n\n    // Add delay between batches (except for high priority)\n    if (loadingDelay > 0 && i + currentBatchSize < images.length) {\n      await new Promise(resolve => setTimeout(resolve, loadingDelay));\n    }\n  }\n  console.log(`Lazy loaded ${successfulImages.length} out of ${images.length} images (priority: ${priority})`);\n  return successfulImages;\n};\n\n/**\n * Check if an image exists and can be loaded\n */\nexport const checkImageExists = async src => {\n  try {\n    await preloadImage(src);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Get a random image from the available images\n */\nexport const getRandomImage = images => {\n  if (images.length === 0) return null;\n  const randomIndex = Math.floor(Math.random() * images.length);\n  return images[randomIndex];\n};\n\n/**\n * Get the next image in sequence\n */\nexport const getNextImage = (images, currentIndex) => {\n  if (images.length === 0) return {\n    image: null,\n    nextIndex: 0\n  };\n  const nextIndex = (currentIndex + 1) % images.length;\n  return {\n    image: images[nextIndex],\n    nextIndex\n  };\n};\n\n/**\n * Validate category name\n */\nexport const isValidCategory = category => {\n  return WALLPAPER_CATEGORIES.some(cat => cat.name === category);\n};\n\n/**\n * Get display name for category\n */\nexport const getCategoryDisplayName = category => {\n  const categoryConfig = WALLPAPER_CATEGORIES.find(cat => cat.name === category);\n  return (categoryConfig === null || categoryConfig === void 0 ? void 0 : categoryConfig.displayName) || category;\n};\n\n/**\n * Validate and filter working images from a list\n */\nexport const validateImages = async images => {\n  if (images.length === 0) return [];\n  const validationPromises = images.map(async image => {\n    try {\n      const exists = await checkImageExists(image.src);\n      return exists ? image : null;\n    } catch {\n      return null;\n    }\n  });\n  const results = await Promise.all(validationPromises);\n  const validImages = results.filter(image => image !== null);\n  if (validImages.length < images.length) {\n    console.warn(`${images.length - validImages.length} images failed validation`);\n  }\n  return validImages;\n};\n\n/**\n * Get images with fallback handling for missing files\n */\nexport const getImagesWithFallback = async selectedCategories => {\n  const allImages = [];\n  const errors = [];\n  if (selectedCategories.length === 0) {\n    return {\n      images: [],\n      errors: []\n    };\n  }\n  for (const category of selectedCategories) {\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        // Skip validation for now - just add all images from manifest\n        allImages.push(...categoryImages);\n        console.log(`Added ${categoryImages.length} images from category: ${category}`);\n      } else {\n        errors.push(`No images configured for category: ${category}`);\n      }\n    } catch (error) {\n      errors.push(`Failed to load category ${category}: ${error}`);\n    }\n  }\n  return {\n    images: allImages,\n    errors\n  };\n};\n\n/**\n * Get statistics for category filtering\n */\nexport const getCategoryFilteringStats = async selectedCategories => {\n  const categoriesWithImages = [];\n  const categoriesWithoutImages = [];\n  let totalImages = 0;\n  for (const category of selectedCategories) {\n    try {\n      const images = await getImagesForCategory(category);\n      if (images.length > 0) {\n        categoriesWithImages.push(category);\n        totalImages += images.length;\n      } else {\n        categoriesWithoutImages.push(category);\n      }\n    } catch {\n      categoriesWithoutImages.push(category);\n    }\n  }\n  return {\n    totalCategories: WALLPAPER_CATEGORIES.length,\n    selectedCategories: selectedCategories.length,\n    totalImages,\n    categoriesWithImages,\n    categoriesWithoutImages\n  };\n};\n\n/**\n * Update category image counts dynamically\n */\nexport const updateCategoryImageCounts = async () => {\n  const updatedCategories = [...WALLPAPER_CATEGORIES];\n  for (const category of updatedCategories) {\n    try {\n      const images = await getImagesForCategory(category.name);\n      category.imageCount = images.length;\n    } catch (error) {\n      console.warn(`Failed to count images for category ${category.name}:`, error);\n      category.imageCount = 0;\n    }\n  }\n  return updatedCategories;\n};\n\n/**\n * Get filtered categories with immediate effect\n * This function provides real-time filtering results for the UI\n */\nexport const getFilteredCategoriesWithEffect = async selectedCategories => {\n  const {\n    images: filteredImages\n  } = await getImagesWithFallback(selectedCategories);\n  const categoryStats = {};\n\n  // Get stats for all categories\n  for (const category of WALLPAPER_CATEGORIES) {\n    const isSelected = selectedCategories.includes(category.name);\n    const categoryImages = await getImagesForCategory(category.name);\n    categoryStats[category.name] = {\n      selected: isSelected,\n      imageCount: categoryImages.length,\n      hasImages: categoryImages.length > 0\n    };\n  }\n  return {\n    filteredImages,\n    categoryStats,\n    totalSelectedImages: filteredImages.length,\n    hasAnyImages: filteredImages.length > 0\n  };\n};","map":{"version":3,"names":["WALLPAPER_CATEGORIES","imageManifest","require","rajini","kamal","common_mass","automobile","motivational","nature","spiritual","random","anime","bikes","ai","tech","getImagesForCategories","selectedCategories","length","console","log","allImages","failedCategories","category","isValidCategory","warn","push","categoryImages","getImagesForCategory","error","successfulCategories","filter","cat","includes","totalImages","filenames","map","filename","src","preloadImage","Promise","resolve","reject","img","Image","timeout","setTimeout","Error","onload","clearTimeout","onerror","lazyLoadImage","options","rootMargin","threshold","window","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","placeholder","document","createElement","style","width","height","position","top","left","body","appendChild","observe","removeChild","preloadImages","images","preloadPromises","image","success","results","all","successfulImages","result","failedCount","lazyLoadImages","priority","batchSize","delay","loadingDelay","currentBatchSize","i","batch","slice","batchPromises","batchResults","batchSuccessful","checkImageExists","getRandomImage","randomIndex","Math","floor","getNextImage","currentIndex","nextIndex","some","name","getCategoryDisplayName","categoryConfig","find","displayName","validateImages","validationPromises","exists","validImages","getImagesWithFallback","errors","getCategoryFilteringStats","categoriesWithImages","categoriesWithoutImages","totalCategories","updateCategoryImageCounts","updatedCategories","imageCount","getFilteredCategoriesWithEffect","filteredImages","categoryStats","isSelected","selected","hasImages","totalSelectedImages","hasAnyImages"],"sources":["/Users/chmanune/Project/Github_wall_paper_project/desktop-clock-app/src/utils/imageLoader.ts"],"sourcesContent":["import { WallpaperImage, CategoryConfig } from '../types';\nimport { WALLPAPER_CATEGORIES } from './constants';\n\n// Import the generated image manifest (will be created by build script)\nlet imageManifest: Record<string, string[]> = {};\n\n// Try to load the manifest, fallback to hardcoded list if not available\ntry {\n  // This will be generated by the build script\n  imageManifest = require('../data/imageManifest.json');\n} catch {\n  // Fallback to current known images\n  imageManifest = {\n    rajini: [\n      '183160b768465b686cdb7aafa99cccc5.jpg',\n      '2a54a5f5b7a844923311411a2d68da3c.jpg',\n      '9215ed34ce4c841ef307d148339f6515.jpg',\n      'b2fc0dfa57b17254d4ded63993b3917b.jpg',\n      'bf424df0eca803526cee028a9ef419c8.jpg',\n      'c192692294a5f6a269794a1f7cc738cf.jpg',\n      'efc647edaadddc9b8d2084ec3a0d0436.jpg',\n      'Thalapathy Movie Rajinikanth.jpeg'\n    ],\n    kamal: [\n      '6a6408be15cd1e70a5df0f9848b6a5af (1).jpg',\n      '6a6408be15cd1e70a5df0f9848b6a5af.jpg',\n      '8b707f8aaae421c1138c4ffb5f7628bb.jpg'\n    ],\n    common_mass: [\n      '2300fee19837861494641861116980ee.jpg',\n      '2e534c614c562634f7f74034f9a503c9.jpg',\n      '3d62aaf3d09f8b00c03685cc308b92fa.jpg',\n      '4082b1e37ffdfcc9fa38159dadaccb17.jpg',\n      '618084c21a00942335d5ca3dac51ed17.jpg',\n      '7c3f344a162c03516a2d213d05bd14eb.jpg',\n      '9c743a378ac5901ee040ecd272933634.jpg',\n      '9f6c2a08e9c7432add440ce2f1f434a1.jpg',\n      'c6d3c282ac356d2bf0b64ae221a06dcb.jpg',\n      'download (1).png',\n      'download.png'\n    ],\n    automobile: [\n      '0719eeee4fe543a5cd59d74093fd1a60.jpg',\n      '0c34d4a4678aaa278ca3bd3667b938ad.jpg',\n      '10c59d3a4300d7088c1c55639a168d72.jpg',\n      '18c0fd619f647cc105998012c9f4501f.jpg',\n      '1f637ed40710da202bed91cf0ee7c842.jpg',\n      '2161839ec94977ef06a68b69f988e182.jpg',\n      '230af357c9506065da9ef612f3f9c2c8.jpg',\n      '3daab7279174ca42705cdfcb006d89f5.jpg',\n      '455e53819c86ae83ded135bf63471290.jpg',\n      '6adbc9db1fb793c6514290bb9a7cbf0b.jpg',\n      '6c24758749d20503e526e47eb4f35c56.jpg',\n      '736d1fc83f95cfbe0e668a50f28279c7.jpg',\n      '904bc157166d2a58b389d85eef963ef6.jpg',\n      '99f17ccf47325726cd9d396138e0fb09.jpg',\n      'c8084ab3a075a0a58406b893e6d80792.jpg',\n      'd0b14a7bad86fa2a40436404b25a4dfe.jpg',\n      'd68340f29151017b75c3cb8856577f48.jpg',\n      'e15aa58261b0c253a1d82b332d453e38.jpg',\n      'e79d844f37d4b8137277a2f5d04ab1d1.jpg',\n      'ebbaba49e0acdf2ef594c5c8b5721a5c.jpg',\n      'ebf148c7fea44ed9da4446d6bb9b5b23.jpg',\n      'f1e0409b472b64fa0b79b3e131c708e2.jpg',\n      'f41f77cdd2bb2accfcacb1663b14baf4.jpg'\n    ],\n    motivational: [\n      '241c0b8f3e23e36b03f54cef3abfaf59.jpg',\n      '2f4a623e29593aaf308c810360fd4f49.jpg',\n      '3a198aec4dd0bff0ec7324c6fb6d402f.jpg',\n      '42d9f55012b192fdd413f8ff30953cbc.jpg',\n      '585b4f26a6b03cad75926197a2898e5b.jpg',\n      '8053b96c0e62bb7253751f9b59674ced.jpg',\n      '8504805b1ba2e15fd0717c1d6c2ac1fc.jpg',\n      '90a2feda1b37fe424413d6dffee584ff.jpg',\n      'a9018dd554e4db3ccfdbfa5ac2d77057.jpg',\n      'b3a7dea905bfa34cd14e8b3a5d381817.jpg',\n      'ccbf76c869ce67d930278852888dc997.jpg',\n      'db7eab4fc2ada5526a1d99e3e0f3e1eb.jpg',\n      'download.png',\n      'e60ec0b722db2be60df0639d28b790e1.jpg',\n      'e7f9b22cb6764147a9f65b3302831c0b.jpg',\n      'f148553000afbafdcfaa83bec722b4f3.jpg',\n      'f6843555658beba42b8c5808bd813079.jpg',\n      'fa8b202e2a1f020abe41b823e4bf30cc.jpg'\n    ],\n    nature: [\n      '13863e5a80feecfa438c88e460288d46.jpg',\n      'f44afe81b880a53100049c031c8afd93.jpg'\n    ],\n    spiritual: [\n      '25c5e21914cb7b07a01805aa72f91a59.jpg',\n      'download (1).png',\n      'download.png',\n      'ec809e7b3d96a4c287d0a1117ecc17c0.jpg'\n    ],\n    random: [\n      '0ab0b205f9985c50142e719c97e47b0d.jpg',\n      '9681a53211c39a18f1c46132fb89c2e9.jpg'\n    ],\n    anime: [\n      'characters/44a72ef96d0cb141b5a25519344ba4e0.jpg',\n      'characters/8e901f7e4827cac9073ae2c3131d90fa.jpg',\n      'places/11b9bc76763e9e07b3af0353c8c4edfb.jpg',\n      'places/42e18fcd2b236e57c0b8517bea6bd979.jpg',\n      'places/6176222d555e0023f9bcd1a50bab374c.jpg',\n      'places/75c62e19a9bc9136f17968ab7b9d2ac6.jpg',\n      'places/7632d32062dd523d9d7efedbc84f06f9.jpg',\n      'places/a1b6382df31b01e04742d8a48183afba.jpg',\n      'places/d59cd9027b79f5b5d3fb128257b8c890.jpg',\n      'places/f29ac662ef580ee016aff1d92ac3e2f7.jpg'\n    ],\n    bikes: [],\n    ai: [],\n    tech: []\n  };\n}\n\n/**\n * Utility functions for loading and managing wallpaper images\n */\n\n/**\n * Get all available images for specified categories (USER SELECTED CATEGORIES)\n * This is where the filtering happens based on user's category selection\n */\nexport const getImagesForCategories = async (selectedCategories: string[]): Promise<WallpaperImage[]> => {\n  // Handle edge case: no categories selected\n  if (selectedCategories.length === 0) {\n    console.log('No categories selected - returning empty array for black background');\n    return [];\n  }\n\n  const allImages: WallpaperImage[] = [];\n  const failedCategories: string[] = [];\n  \n  // Only process the categories that the user has selected\n  for (const category of selectedCategories) {\n    // Validate category name\n    if (!isValidCategory(category)) {\n      console.warn(`Invalid category name: ${category}`);\n      failedCategories.push(category);\n      continue;\n    }\n\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        allImages.push(...categoryImages);\n        console.log(`Successfully loaded ${categoryImages.length} images from category: ${category}`);\n      } else {\n        console.warn(`No images found for category: ${category}`);\n        failedCategories.push(category);\n      }\n    } catch (error) {\n      console.warn(`Failed to load images for category: ${category}`, error);\n      failedCategories.push(category);\n    }\n  }\n  \n  // Log results for debugging\n  const successfulCategories = selectedCategories.filter(cat => !failedCategories.includes(cat));\n  console.log(`Category filtering results:`, {\n    selectedCategories,\n    successfulCategories,\n    failedCategories,\n    totalImages: allImages.length\n  });\n  \n  return allImages;\n};\n\n/**\n * Get all images for a specific category from the manifest\n */\nexport const getImagesForCategory = async (category: string): Promise<WallpaperImage[]> => {\n  const filenames = imageManifest[category] || [];\n  \n  return filenames.map(filename => ({\n    src: `/wallpapers/${category}/${filename}`,\n    category,\n    filename\n  }));\n};\n\n/**\n * Preload an image to ensure smooth transitions\n */\nexport const preloadImage = (src: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    // Set timeout to prevent hanging on slow/broken images\n    const timeout = setTimeout(() => {\n      reject(new Error(`Image load timeout: ${src}`));\n    }, 10000); // 10 second timeout\n    \n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve();\n    };\n    \n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    \n    img.src = src;\n  });\n};\n\n/**\n * Lazy load image with Intersection Observer API\n */\nexport const lazyLoadImage = (src: string, options: {\n  rootMargin?: string;\n  threshold?: number;\n} = {}): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    // Default options for lazy loading\n    const { rootMargin = '50px', threshold = 0.1 } = options;\n    \n    // Set timeout for loading\n    const timeout = setTimeout(() => {\n      reject(new Error(`Lazy load timeout: ${src}`));\n    }, 15000); // 15 second timeout for lazy loading\n    \n    img.onload = () => {\n      clearTimeout(timeout);\n      resolve(img);\n    };\n    \n    img.onerror = () => {\n      clearTimeout(timeout);\n      reject(new Error(`Failed to lazy load image: ${src}`));\n    };\n    \n    // Use Intersection Observer for lazy loading if supported\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            img.src = src;\n            observer.unobserve(img);\n          }\n        });\n      }, { rootMargin, threshold });\n      \n      // Create a placeholder element to observe\n      const placeholder = document.createElement('div');\n      placeholder.style.width = '1px';\n      placeholder.style.height = '1px';\n      placeholder.style.position = 'absolute';\n      placeholder.style.top = '0';\n      placeholder.style.left = '0';\n      document.body.appendChild(placeholder);\n      \n      observer.observe(placeholder);\n      \n      // Clean up placeholder after loading\n      img.onload = () => {\n        clearTimeout(timeout);\n        document.body.removeChild(placeholder);\n        resolve(img);\n      };\n    } else {\n      // Fallback: load immediately if Intersection Observer not supported\n      img.src = src;\n    }\n  });\n};\n\n/**\n * Preload multiple images with error tolerance\n */\nexport const preloadImages = async (images: WallpaperImage[]): Promise<WallpaperImage[]> => {\n  const preloadPromises = images.map(async (image) => {\n    try {\n      await preloadImage(image.src);\n      return { success: true, image };\n    } catch (error) {\n      console.warn(`Failed to preload image: ${image.src}`, error);\n      return { success: false, image, error };\n    }\n  });\n  \n  const results = await Promise.all(preloadPromises);\n  const successfulImages = results\n    .filter(result => result.success)\n    .map(result => result.image);\n  \n  const failedCount = results.length - successfulImages.length;\n  \n  if (failedCount > 0) {\n    console.warn(`${failedCount} out of ${images.length} images failed to preload`);\n  } else {\n    console.log(`Successfully preloaded ${images.length} images`);\n  }\n  \n  return successfulImages;\n};\n\n/**\n * Lazy load multiple images with priority system\n */\nexport const lazyLoadImages = async (\n  images: WallpaperImage[], \n  options: {\n    priority?: 'high' | 'normal' | 'low';\n    batchSize?: number;\n    delay?: number;\n  } = {}\n): Promise<WallpaperImage[]> => {\n  const { priority = 'normal', batchSize = 3, delay = 100 } = options;\n  \n  // Adjust loading strategy based on priority\n  const loadingDelay = priority === 'high' ? 0 : priority === 'normal' ? delay : delay * 2;\n  const currentBatchSize = priority === 'high' ? batchSize * 2 : batchSize;\n  \n  const successfulImages: WallpaperImage[] = [];\n  \n  // Process images in batches to avoid overwhelming the browser\n  for (let i = 0; i < images.length; i += currentBatchSize) {\n    const batch = images.slice(i, i + currentBatchSize);\n    \n    const batchPromises = batch.map(async (image) => {\n      try {\n        await lazyLoadImage(image.src);\n        return { success: true, image };\n      } catch (error) {\n        console.warn(`Failed to lazy load image: ${image.src}`, error);\n        return { success: false, image, error };\n      }\n    });\n    \n    const batchResults = await Promise.all(batchPromises);\n    const batchSuccessful = batchResults\n      .filter(result => result.success)\n      .map(result => result.image);\n    \n    successfulImages.push(...batchSuccessful);\n    \n    // Add delay between batches (except for high priority)\n    if (loadingDelay > 0 && i + currentBatchSize < images.length) {\n      await new Promise(resolve => setTimeout(resolve, loadingDelay));\n    }\n  }\n  \n  console.log(`Lazy loaded ${successfulImages.length} out of ${images.length} images (priority: ${priority})`);\n  return successfulImages;\n};\n\n/**\n * Check if an image exists and can be loaded\n */\nexport const checkImageExists = async (src: string): Promise<boolean> => {\n  try {\n    await preloadImage(src);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Get a random image from the available images\n */\nexport const getRandomImage = (images: WallpaperImage[]): WallpaperImage | null => {\n  if (images.length === 0) return null;\n  \n  const randomIndex = Math.floor(Math.random() * images.length);\n  return images[randomIndex];\n};\n\n/**\n * Get the next image in sequence\n */\nexport const getNextImage = (images: WallpaperImage[], currentIndex: number): { image: WallpaperImage | null; nextIndex: number } => {\n  if (images.length === 0) return { image: null, nextIndex: 0 };\n  \n  const nextIndex = (currentIndex + 1) % images.length;\n  return {\n    image: images[nextIndex],\n    nextIndex\n  };\n};\n\n/**\n * Validate category name\n */\nexport const isValidCategory = (category: string): boolean => {\n  return WALLPAPER_CATEGORIES.some(cat => cat.name === category);\n};\n\n/**\n * Get display name for category\n */\nexport const getCategoryDisplayName = (category: string): string => {\n  const categoryConfig = WALLPAPER_CATEGORIES.find(cat => cat.name === category);\n  return categoryConfig?.displayName || category;\n};\n\n/**\n * Validate and filter working images from a list\n */\nexport const validateImages = async (images: WallpaperImage[]): Promise<WallpaperImage[]> => {\n  if (images.length === 0) return [];\n  \n  const validationPromises = images.map(async (image) => {\n    try {\n      const exists = await checkImageExists(image.src);\n      return exists ? image : null;\n    } catch {\n      return null;\n    }\n  });\n  \n  const results = await Promise.all(validationPromises);\n  const validImages = results.filter((image): image is WallpaperImage => image !== null);\n  \n  if (validImages.length < images.length) {\n    console.warn(`${images.length - validImages.length} images failed validation`);\n  }\n  \n  return validImages;\n};\n\n/**\n * Get images with fallback handling for missing files\n */\nexport const getImagesWithFallback = async (selectedCategories: string[]): Promise<{\n  images: WallpaperImage[];\n  errors: string[];\n}> => {\n  const allImages: WallpaperImage[] = [];\n  const errors: string[] = [];\n  \n  if (selectedCategories.length === 0) {\n    return { images: [], errors: [] };\n  }\n  \n  for (const category of selectedCategories) {\n    try {\n      const categoryImages = await getImagesForCategory(category);\n      if (categoryImages.length > 0) {\n        // Skip validation for now - just add all images from manifest\n        allImages.push(...categoryImages);\n        console.log(`Added ${categoryImages.length} images from category: ${category}`);\n      } else {\n        errors.push(`No images configured for category: ${category}`);\n      }\n    } catch (error) {\n      errors.push(`Failed to load category ${category}: ${error}`);\n    }\n  }\n  \n  return { images: allImages, errors };\n};\n\n/**\n * Get statistics for category filtering\n */\nexport const getCategoryFilteringStats = async (selectedCategories: string[]): Promise<{\n  totalCategories: number;\n  selectedCategories: number;\n  totalImages: number;\n  categoriesWithImages: string[];\n  categoriesWithoutImages: string[];\n}> => {\n  const categoriesWithImages: string[] = [];\n  const categoriesWithoutImages: string[] = [];\n  let totalImages = 0;\n\n  for (const category of selectedCategories) {\n    try {\n      const images = await getImagesForCategory(category);\n      if (images.length > 0) {\n        categoriesWithImages.push(category);\n        totalImages += images.length;\n      } else {\n        categoriesWithoutImages.push(category);\n      }\n    } catch {\n      categoriesWithoutImages.push(category);\n    }\n  }\n\n  return {\n    totalCategories: WALLPAPER_CATEGORIES.length,\n    selectedCategories: selectedCategories.length,\n    totalImages,\n    categoriesWithImages,\n    categoriesWithoutImages\n  };\n};\n\n/**\n * Update category image counts dynamically\n */\nexport const updateCategoryImageCounts = async (): Promise<CategoryConfig[]> => {\n  const updatedCategories = [...WALLPAPER_CATEGORIES];\n  \n  for (const category of updatedCategories) {\n    try {\n      const images = await getImagesForCategory(category.name);\n      category.imageCount = images.length;\n    } catch (error) {\n      console.warn(`Failed to count images for category ${category.name}:`, error);\n      category.imageCount = 0;\n    }\n  }\n  \n  return updatedCategories;\n};\n\n/**\n * Get filtered categories with immediate effect\n * This function provides real-time filtering results for the UI\n */\nexport const getFilteredCategoriesWithEffect = async (selectedCategories: string[]): Promise<{\n  filteredImages: WallpaperImage[];\n  categoryStats: {\n    [categoryName: string]: {\n      selected: boolean;\n      imageCount: number;\n      hasImages: boolean;\n    };\n  };\n  totalSelectedImages: number;\n  hasAnyImages: boolean;\n}> => {\n  const { images: filteredImages } = await getImagesWithFallback(selectedCategories);\n  const categoryStats: { [categoryName: string]: { selected: boolean; imageCount: number; hasImages: boolean } } = {};\n  \n  // Get stats for all categories\n  for (const category of WALLPAPER_CATEGORIES) {\n    const isSelected = selectedCategories.includes(category.name);\n    const categoryImages = await getImagesForCategory(category.name);\n    \n    categoryStats[category.name] = {\n      selected: isSelected,\n      imageCount: categoryImages.length,\n      hasImages: categoryImages.length > 0\n    };\n  }\n  \n  return {\n    filteredImages,\n    categoryStats,\n    totalSelectedImages: filteredImages.length,\n    hasAnyImages: filteredImages.length > 0\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}